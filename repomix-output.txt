This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-02-03T19:50:12.024Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

================================================================
Directory Structure
================================================================
pipe-core/
  package.json
  tsconfig.json
pipe-docs/
  website/
    .docusaurus/
      docusaurus-plugin-content-blog/
        default/
          p/
            blog-archive-f05.json
            blog-authors-790.json
            blog-authors-all-sebastien-lorber-articles-6eb.json
            blog-authors-yangshun-af2.json
            blog-bd9.json
            blog-tags-df9.json
            blog-tags-docusaurus-f20.json
            blog-tags-facebook-f47.json
            blog-tags-hello-f96.json
            blog-tags-hola-73f.json
          __plugin.json
          blog-post-list-prop-default.json
          blogMetadata-default.json
          site-blog-2019-05-28-first-blog-post-md-e27.json
          site-blog-2019-05-29-long-blog-post-md-736.json
          site-blog-2021-08-01-mdx-blog-post-mdx-593.json
          site-blog-2021-08-26-welcome-index-md-d9f.json
      docusaurus-plugin-content-docs/
        default/
          p/
            docs-175.json
            docs-category-tutorial-basics-ea4.json
            docs-category-tutorial-extras-128.json
            index-466.json
          __plugin.json
          site-docs-api-reference-configuration-md-4f2.json
          site-docs-api-reference-fetch-md-72c.json
          site-docs-api-reference-node-info-md-cc6.json
          site-docs-api-reference-node-status-md-213.json
          site-docs-api-reference-pin-md-e40.json
          site-docs-api-reference-pinned-cids-md-567.json
          site-docs-api-reference-publish-bundle-md-98e.json
          site-docs-api-reference-publish-md-c40.json
          site-docs-api-reference-replicate-md-c5d.json
          site-docs-api-reference-storage-metrics-md-37d.json
          site-docs-api-reference-unpin-md-df6.json
          site-docs-core-concepts-encryption-md-3be.json
          site-docs-core-concepts-inline-referenced-md-231.json
          site-docs-core-concepts-pipebundle-md-6a7.json
          site-docs-core-concepts-piperecord-md-f4d.json
          site-docs-core-concepts-scopes-md-417.json
          site-docs-core-concepts-terminology-md-7d7.json
          site-docs-intro-md-0e3.json
          site-docs-introduction-overview-md-761.json
          site-docs-introduction-problem-md-20e.json
          site-docs-introduction-solution-md-167.json
          site-docs-tutorial-basics-congratulations-md-822.json
          site-docs-tutorial-basics-create-a-blog-post-md-533.json
          site-docs-tutorial-basics-create-a-document-md-1e4.json
          site-docs-tutorial-basics-create-a-page-md-5c8.json
          site-docs-tutorial-basics-deploy-your-site-md-f55.json
          site-docs-tutorial-basics-markdown-features-mdx-18c.json
          site-docs-tutorial-extras-manage-docs-versions-md-dff.json
          site-docs-tutorial-extras-translate-your-site-md-e44.json
          site-docs-usage-examples-fetch-data-md-513.json
          site-docs-usage-examples-pin-unpin-md-8de.json
          site-docs-usage-examples-publish-data-md-b8d.json
          site-docs-usage-examples-publish-hidden-data-md-7d3.json
          site-docs-usage-examples-replicate-data-md-d94.json
          site-docs-usage-examples-work-bundles-md-16e.json
      docusaurus-plugin-content-pages/
        default/
          __plugin.json
          site-src-pages-markdown-page-md-393.json
      docusaurus-plugin-debug/
        default/
          p/
            docusaurus-debug-content-0d5.json
          __plugin.json
      client-modules.js
      codeTranslations.json
      docusaurus.config.mjs
      DONT-EDIT-THIS-FOLDER
      globalData.json
      i18n.json
      registry.js
      routes.js
      routesChunkNames.json
      site-metadata.json
      site-storage.json
scripts/
  test-api.ts
  test-basic-operations.ts
  test-bundles.ts
  test-encryption.ts
  test-ipfs.ts
  test-replication.ts
src/
  __tests__/
    ipfsClient.test.ts
  tests/
    pipe.test.ts
  api.ts
  encryption.ts
  index.ts
  ipfsClient.ts
  pipe.ts
  schema.ts
  types.ts
.gitignore
jest.config.js
jest.setup.cjs
package.json
README.md
tsconfig.json

================================================================
Files
================================================================

================
File: pipe-core/package.json
================
{
  "name": "pipe-core",
  "version": "1.0.0",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "description": "",
  "dependencies": {
    "@types/express": "^5.0.0",
    "@types/jest": "^29.5.14",
    "@types/node": "^22.13.0",
    "dotenv": "^16.4.7",
    "express": "^4.21.2",
    "helia": "^5.2.0",
    "jest": "^29.7.0",
    "ts-jest": "^29.2.5",
    "typescript": "^5.7.3",
    "zod": "^3.24.1"
  }
}

================
File: pipe-core/tsconfig.json
================
{
  "compilerOptions": {
    /* Visit https://aka.ms/tsconfig to read more about this file */

    /* Projects */
    // "incremental": true,                              /* Save .tsbuildinfo files to allow for incremental compilation of projects. */
    // "composite": true,                                /* Enable constraints that allow a TypeScript project to be used with project references. */
    // "tsBuildInfoFile": "./.tsbuildinfo",              /* Specify the path to .tsbuildinfo incremental compilation file. */
    // "disableSourceOfProjectReferenceRedirect": true,  /* Disable preferring source files instead of declaration files when referencing composite projects. */
    // "disableSolutionSearching": true,                 /* Opt a project out of multi-project reference checking when editing. */
    // "disableReferencedProjectLoad": true,             /* Reduce the number of projects loaded automatically by TypeScript. */

    /* Language and Environment */
    "target": "es2016",                                  /* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */
    // "lib": [],                                        /* Specify a set of bundled library declaration files that describe the target runtime environment. */
    // "jsx": "preserve",                                /* Specify what JSX code is generated. */
    // "experimentalDecorators": true,                   /* Enable experimental support for legacy experimental decorators. */
    // "emitDecoratorMetadata": true,                    /* Emit design-type metadata for decorated declarations in source files. */
    // "jsxFactory": "",                                 /* Specify the JSX factory function used when targeting React JSX emit, e.g. 'React.createElement' or 'h'. */
    // "jsxFragmentFactory": "",                         /* Specify the JSX Fragment reference used for fragments when targeting React JSX emit e.g. 'React.Fragment' or 'Fragment'. */
    // "jsxImportSource": "",                            /* Specify module specifier used to import the JSX factory functions when using 'jsx: react-jsx*'. */
    // "reactNamespace": "",                             /* Specify the object invoked for 'createElement'. This only applies when targeting 'react' JSX emit. */
    // "noLib": true,                                    /* Disable including any library files, including the default lib.d.ts. */
    // "useDefineForClassFields": true,                  /* Emit ECMAScript-standard-compliant class fields. */
    // "moduleDetection": "auto",                        /* Control what method is used to detect module-format JS files. */

    /* Modules */
    "module": "commonjs",                                /* Specify what module code is generated. */
    // "rootDir": "./",                                  /* Specify the root folder within your source files. */
    // "moduleResolution": "node10",                     /* Specify how TypeScript looks up a file from a given module specifier. */
    // "baseUrl": "./",                                  /* Specify the base directory to resolve non-relative module names. */
    // "paths": {},                                      /* Specify a set of entries that re-map imports to additional lookup locations. */
    // "rootDirs": [],                                   /* Allow multiple folders to be treated as one when resolving modules. */
    // "typeRoots": [],                                  /* Specify multiple folders that act like './node_modules/@types'. */
    // "types": [],                                      /* Specify type package names to be included without being referenced in a source file. */
    // "allowUmdGlobalAccess": true,                     /* Allow accessing UMD globals from modules. */
    // "moduleSuffixes": [],                             /* List of file name suffixes to search when resolving a module. */
    // "allowImportingTsExtensions": true,               /* Allow imports to include TypeScript file extensions. Requires '--moduleResolution bundler' and either '--noEmit' or '--emitDeclarationOnly' to be set. */
    // "rewriteRelativeImportExtensions": true,          /* Rewrite '.ts', '.tsx', '.mts', and '.cts' file extensions in relative import paths to their JavaScript equivalent in output files. */
    // "resolvePackageJsonExports": true,                /* Use the package.json 'exports' field when resolving package imports. */
    // "resolvePackageJsonImports": true,                /* Use the package.json 'imports' field when resolving imports. */
    // "customConditions": [],                           /* Conditions to set in addition to the resolver-specific defaults when resolving imports. */
    // "noUncheckedSideEffectImports": true,             /* Check side effect imports. */
    // "resolveJsonModule": true,                        /* Enable importing .json files. */
    // "allowArbitraryExtensions": true,                 /* Enable importing files with any extension, provided a declaration file is present. */
    // "noResolve": true,                                /* Disallow 'import's, 'require's or '<reference>'s from expanding the number of files TypeScript should add to a project. */

    /* JavaScript Support */
    // "allowJs": true,                                  /* Allow JavaScript files to be a part of your program. Use the 'checkJS' option to get errors from these files. */
    // "checkJs": true,                                  /* Enable error reporting in type-checked JavaScript files. */
    // "maxNodeModuleJsDepth": 1,                        /* Specify the maximum folder depth used for checking JavaScript files from 'node_modules'. Only applicable with 'allowJs'. */

    /* Emit */
    // "declaration": true,                              /* Generate .d.ts files from TypeScript and JavaScript files in your project. */
    // "declarationMap": true,                           /* Create sourcemaps for d.ts files. */
    // "emitDeclarationOnly": true,                      /* Only output d.ts files and not JavaScript files. */
    // "sourceMap": true,                                /* Create source map files for emitted JavaScript files. */
    // "inlineSourceMap": true,                          /* Include sourcemap files inside the emitted JavaScript. */
    // "noEmit": true,                                   /* Disable emitting files from a compilation. */
    // "outFile": "./",                                  /* Specify a file that bundles all outputs into one JavaScript file. If 'declaration' is true, also designates a file that bundles all .d.ts output. */
    // "outDir": "./",                                   /* Specify an output folder for all emitted files. */
    // "removeComments": true,                           /* Disable emitting comments. */
    // "importHelpers": true,                            /* Allow importing helper functions from tslib once per project, instead of including them per-file. */
    // "downlevelIteration": true,                       /* Emit more compliant, but verbose and less performant JavaScript for iteration. */
    // "sourceRoot": "",                                 /* Specify the root path for debuggers to find the reference source code. */
    // "mapRoot": "",                                    /* Specify the location where debugger should locate map files instead of generated locations. */
    // "inlineSources": true,                            /* Include source code in the sourcemaps inside the emitted JavaScript. */
    // "emitBOM": true,                                  /* Emit a UTF-8 Byte Order Mark (BOM) in the beginning of output files. */
    // "newLine": "crlf",                                /* Set the newline character for emitting files. */
    // "stripInternal": true,                            /* Disable emitting declarations that have '@internal' in their JSDoc comments. */
    // "noEmitHelpers": true,                            /* Disable generating custom helper functions like '__extends' in compiled output. */
    // "noEmitOnError": true,                            /* Disable emitting files if any type checking errors are reported. */
    // "preserveConstEnums": true,                       /* Disable erasing 'const enum' declarations in generated code. */
    // "declarationDir": "./",                           /* Specify the output directory for generated declaration files. */

    /* Interop Constraints */
    // "isolatedModules": true,                          /* Ensure that each file can be safely transpiled without relying on other imports. */
    // "verbatimModuleSyntax": true,                     /* Do not transform or elide any imports or exports not marked as type-only, ensuring they are written in the output file's format based on the 'module' setting. */
    // "isolatedDeclarations": true,                     /* Require sufficient annotation on exports so other tools can trivially generate declaration files. */
    // "allowSyntheticDefaultImports": true,             /* Allow 'import x from y' when a module doesn't have a default export. */
    "esModuleInterop": true,                             /* Emit additional JavaScript to ease support for importing CommonJS modules. This enables 'allowSyntheticDefaultImports' for type compatibility. */
    // "preserveSymlinks": true,                         /* Disable resolving symlinks to their realpath. This correlates to the same flag in node. */
    "forceConsistentCasingInFileNames": true,            /* Ensure that casing is correct in imports. */

    /* Type Checking */
    "strict": true,                                      /* Enable all strict type-checking options. */
    // "noImplicitAny": true,                            /* Enable error reporting for expressions and declarations with an implied 'any' type. */
    // "strictNullChecks": true,                         /* When type checking, take into account 'null' and 'undefined'. */
    // "strictFunctionTypes": true,                      /* When assigning functions, check to ensure parameters and the return values are subtype-compatible. */
    // "strictBindCallApply": true,                      /* Check that the arguments for 'bind', 'call', and 'apply' methods match the original function. */
    // "strictPropertyInitialization": true,             /* Check for class properties that are declared but not set in the constructor. */
    // "strictBuiltinIteratorReturn": true,              /* Built-in iterators are instantiated with a 'TReturn' type of 'undefined' instead of 'any'. */
    // "noImplicitThis": true,                           /* Enable error reporting when 'this' is given the type 'any'. */
    // "useUnknownInCatchVariables": true,               /* Default catch clause variables as 'unknown' instead of 'any'. */
    // "alwaysStrict": true,                             /* Ensure 'use strict' is always emitted. */
    // "noUnusedLocals": true,                           /* Enable error reporting when local variables aren't read. */
    // "noUnusedParameters": true,                       /* Raise an error when a function parameter isn't read. */
    // "exactOptionalPropertyTypes": true,               /* Interpret optional property types as written, rather than adding 'undefined'. */
    // "noImplicitReturns": true,                        /* Enable error reporting for codepaths that do not explicitly return in a function. */
    // "noFallthroughCasesInSwitch": true,               /* Enable error reporting for fallthrough cases in switch statements. */
    // "noUncheckedIndexedAccess": true,                 /* Add 'undefined' to a type when accessed using an index. */
    // "noImplicitOverride": true,                       /* Ensure overriding members in derived classes are marked with an override modifier. */
    // "noPropertyAccessFromIndexSignature": true,       /* Enforces using indexed accessors for keys declared using an indexed type. */
    // "allowUnusedLabels": true,                        /* Disable error reporting for unused labels. */
    // "allowUnreachableCode": true,                     /* Disable error reporting for unreachable code. */

    /* Completeness */
    // "skipDefaultLibCheck": true,                      /* Skip type checking .d.ts files that are included with TypeScript. */
    "skipLibCheck": true                                 /* Skip type checking all .d.ts files. */
  }
}

================
File: pipe-docs/website/.docusaurus/docusaurus-plugin-content-blog/default/p/blog-archive-f05.json
================
{"archive":{"blogPosts":[{"id":"welcome","metadata":{"permalink":"/blog/welcome","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2021-08-26-welcome/index.md","source":"@site/blog/2021-08-26-welcome/index.md","title":"Welcome","description":"Docusaurus blogging features are powered by the blog plugin.","date":"2021-08-26T00:00:00.000Z","tags":[{"inline":false,"label":"Facebook","permalink":"/blog/tags/facebook","description":"Facebook tag description"},{"inline":false,"label":"Hello","permalink":"/blog/tags/hello","description":"Hello tag description"},{"inline":false,"label":"Docusaurus","permalink":"/blog/tags/docusaurus","description":"Docusaurus tag description"}],"readingTime":0.465,"hasTruncateMarker":true,"authors":[{"name":"Sébastien Lorber","title":"Docusaurus maintainer","url":"https://sebastienlorber.com","page":{"permalink":"/blog/authors/all-sebastien-lorber-articles"},"socials":{"x":"https://x.com/sebastienlorber","linkedin":"https://www.linkedin.com/in/sebastienlorber/","github":"https://github.com/slorber","newsletter":"https://thisweekinreact.com"},"imageURL":"https://github.com/slorber.png","key":"slorber"},{"name":"Yangshun Tay","title":"Front End Engineer @ Facebook","url":"https://github.com/yangshun","page":{"permalink":"/blog/authors/yangshun"},"socials":{"x":"https://x.com/yangshunz","github":"https://github.com/yangshun"},"imageURL":"https://github.com/yangshun.png","key":"yangshun"}],"frontMatter":{"slug":"welcome","title":"Welcome","authors":["slorber","yangshun"],"tags":["facebook","hello","docusaurus"]},"unlisted":false,"nextItem":{"title":"MDX Blog Post","permalink":"/blog/mdx-blog-post"}},"content":"[Docusaurus blogging features](https://docusaurus.io/docs/blog) are powered by the [blog plugin](https://docusaurus.io/docs/api/plugins/@docusaurus/plugin-content-blog).\n\nHere are a few tips you might find useful.\n\n<!-- truncate -->\n\nSimply add Markdown files (or folders) to the `blog` directory.\n\nRegular blog authors can be added to `authors.yml`.\n\nThe blog post date can be extracted from filenames, such as:\n\n- `2019-05-30-welcome.md`\n- `2019-05-30-welcome/index.md`\n\nA blog post folder can be convenient to co-locate blog post images:\n\n![Docusaurus Plushie](./docusaurus-plushie-banner.jpeg)\n\nThe blog supports tags as well!\n\n**And if you don't want a blog**: just delete this directory, and use `blog: false` in your Docusaurus config."},{"id":"mdx-blog-post","metadata":{"permalink":"/blog/mdx-blog-post","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2021-08-01-mdx-blog-post.mdx","source":"@site/blog/2021-08-01-mdx-blog-post.mdx","title":"MDX Blog Post","description":"Blog posts support Docusaurus Markdown features, such as MDX.","date":"2021-08-01T00:00:00.000Z","tags":[{"inline":false,"label":"Docusaurus","permalink":"/blog/tags/docusaurus","description":"Docusaurus tag description"}],"readingTime":0.235,"hasTruncateMarker":true,"authors":[{"name":"Sébastien Lorber","title":"Docusaurus maintainer","url":"https://sebastienlorber.com","page":{"permalink":"/blog/authors/all-sebastien-lorber-articles"},"socials":{"x":"https://x.com/sebastienlorber","linkedin":"https://www.linkedin.com/in/sebastienlorber/","github":"https://github.com/slorber","newsletter":"https://thisweekinreact.com"},"imageURL":"https://github.com/slorber.png","key":"slorber"}],"frontMatter":{"slug":"mdx-blog-post","title":"MDX Blog Post","authors":["slorber"],"tags":["docusaurus"]},"unlisted":false,"prevItem":{"title":"Welcome","permalink":"/blog/welcome"},"nextItem":{"title":"Long Blog Post","permalink":"/blog/long-blog-post"}},"content":"Blog posts support [Docusaurus Markdown features](https://docusaurus.io/docs/markdown-features), such as [MDX](https://mdxjs.com/).\n\n:::tip\n\nUse the power of React to create interactive blog posts.\n\n:::\n\n{/* truncate */}\n\nFor example, use JSX to create an interactive button:\n\n```js\n<button onClick={() => alert('button clicked!')}>Click me!</button>\n```\n\n<button onClick={() => alert('button clicked!')}>Click me!</button>"},{"id":"long-blog-post","metadata":{"permalink":"/blog/long-blog-post","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2019-05-29-long-blog-post.md","source":"@site/blog/2019-05-29-long-blog-post.md","title":"Long Blog Post","description":"This is the summary of a very long blog post,","date":"2019-05-29T00:00:00.000Z","tags":[{"inline":false,"label":"Hello","permalink":"/blog/tags/hello","description":"Hello tag description"},{"inline":false,"label":"Docusaurus","permalink":"/blog/tags/docusaurus","description":"Docusaurus tag description"}],"readingTime":2.06,"hasTruncateMarker":true,"authors":[{"name":"Yangshun Tay","title":"Front End Engineer @ Facebook","url":"https://github.com/yangshun","page":{"permalink":"/blog/authors/yangshun"},"socials":{"x":"https://x.com/yangshunz","github":"https://github.com/yangshun"},"imageURL":"https://github.com/yangshun.png","key":"yangshun"}],"frontMatter":{"slug":"long-blog-post","title":"Long Blog Post","authors":"yangshun","tags":["hello","docusaurus"]},"unlisted":false,"prevItem":{"title":"MDX Blog Post","permalink":"/blog/mdx-blog-post"},"nextItem":{"title":"First Blog Post","permalink":"/blog/first-blog-post"}},"content":"This is the summary of a very long blog post,\n\nUse a `<!--` `truncate` `-->` comment to limit blog post size in the list view.\n\n<!-- truncate -->\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet"},{"id":"first-blog-post","metadata":{"permalink":"/blog/first-blog-post","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2019-05-28-first-blog-post.md","source":"@site/blog/2019-05-28-first-blog-post.md","title":"First Blog Post","description":"Lorem ipsum dolor sit amet...","date":"2019-05-28T00:00:00.000Z","tags":[{"inline":false,"label":"Hola","permalink":"/blog/tags/hola","description":"Hola tag description"},{"inline":false,"label":"Docusaurus","permalink":"/blog/tags/docusaurus","description":"Docusaurus tag description"}],"readingTime":0.135,"hasTruncateMarker":true,"authors":[{"name":"Sébastien Lorber","title":"Docusaurus maintainer","url":"https://sebastienlorber.com","page":{"permalink":"/blog/authors/all-sebastien-lorber-articles"},"socials":{"x":"https://x.com/sebastienlorber","linkedin":"https://www.linkedin.com/in/sebastienlorber/","github":"https://github.com/slorber","newsletter":"https://thisweekinreact.com"},"imageURL":"https://github.com/slorber.png","key":"slorber"},{"name":"Yangshun Tay","title":"Front End Engineer @ Facebook","url":"https://github.com/yangshun","page":{"permalink":"/blog/authors/yangshun"},"socials":{"x":"https://x.com/yangshunz","github":"https://github.com/yangshun"},"imageURL":"https://github.com/yangshun.png","key":"yangshun"}],"frontMatter":{"slug":"first-blog-post","title":"First Blog Post","authors":["slorber","yangshun"],"tags":["hola","docusaurus"]},"unlisted":false,"prevItem":{"title":"Long Blog Post","permalink":"/blog/long-blog-post"}},"content":"Lorem ipsum dolor sit amet...\n\n<!-- truncate -->\n\n...consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet"}]}}

================
File: pipe-docs/website/.docusaurus/docusaurus-plugin-content-blog/default/p/blog-authors-790.json
================
{"authors":[{"name":"Yangshun Tay","title":"Front End Engineer @ Facebook","url":"https://github.com/yangshun","page":{"permalink":"/blog/authors/yangshun"},"socials":{"x":"https://x.com/yangshunz","github":"https://github.com/yangshun"},"imageURL":"https://github.com/yangshun.png","key":"yangshun","count":3},{"name":"Sébastien Lorber","title":"Docusaurus maintainer","url":"https://sebastienlorber.com","page":{"permalink":"/blog/authors/all-sebastien-lorber-articles"},"socials":{"x":"https://x.com/sebastienlorber","linkedin":"https://www.linkedin.com/in/sebastienlorber/","github":"https://github.com/slorber","newsletter":"https://thisweekinreact.com"},"imageURL":"https://github.com/slorber.png","key":"slorber","count":3}]}

================
File: pipe-docs/website/.docusaurus/docusaurus-plugin-content-blog/default/p/blog-authors-all-sebastien-lorber-articles-6eb.json
================
{"author":{"name":"Sébastien Lorber","title":"Docusaurus maintainer","url":"https://sebastienlorber.com","page":{"permalink":"/blog/authors/all-sebastien-lorber-articles"},"socials":{"x":"https://x.com/sebastienlorber","linkedin":"https://www.linkedin.com/in/sebastienlorber/","github":"https://github.com/slorber","newsletter":"https://thisweekinreact.com"},"imageURL":"https://github.com/slorber.png","key":"slorber","count":3},"listMetadata":{"permalink":"/blog/authors/all-sebastien-lorber-articles","page":1,"postsPerPage":10,"totalPages":1,"totalCount":3,"blogDescription":"Blog","blogTitle":"Blog"}}

================
File: pipe-docs/website/.docusaurus/docusaurus-plugin-content-blog/default/p/blog-authors-yangshun-af2.json
================
{"author":{"name":"Yangshun Tay","title":"Front End Engineer @ Facebook","url":"https://github.com/yangshun","page":{"permalink":"/blog/authors/yangshun"},"socials":{"x":"https://x.com/yangshunz","github":"https://github.com/yangshun"},"imageURL":"https://github.com/yangshun.png","key":"yangshun","count":3},"listMetadata":{"permalink":"/blog/authors/yangshun","page":1,"postsPerPage":10,"totalPages":1,"totalCount":3,"blogDescription":"Blog","blogTitle":"Blog"}}

================
File: pipe-docs/website/.docusaurus/docusaurus-plugin-content-blog/default/p/blog-bd9.json
================
{"metadata":{"permalink":"/blog","page":1,"postsPerPage":10,"totalPages":1,"totalCount":4,"blogDescription":"Blog","blogTitle":"Blog"}}

================
File: pipe-docs/website/.docusaurus/docusaurus-plugin-content-blog/default/p/blog-tags-df9.json
================
{"tags":[{"label":"Facebook","permalink":"/blog/tags/facebook","description":"Facebook tag description","count":1},{"label":"Hello","permalink":"/blog/tags/hello","description":"Hello tag description","count":2},{"label":"Docusaurus","permalink":"/blog/tags/docusaurus","description":"Docusaurus tag description","count":4},{"label":"Hola","permalink":"/blog/tags/hola","description":"Hola tag description","count":1}]}

================
File: pipe-docs/website/.docusaurus/docusaurus-plugin-content-blog/default/p/blog-tags-docusaurus-f20.json
================
{"tag":{"label":"Docusaurus","permalink":"/blog/tags/docusaurus","description":"Docusaurus tag description","allTagsPath":"/blog/tags","count":4,"unlisted":false},"listMetadata":{"permalink":"/blog/tags/docusaurus","page":1,"postsPerPage":10,"totalPages":1,"totalCount":4,"blogDescription":"Blog","blogTitle":"Blog"}}

================
File: pipe-docs/website/.docusaurus/docusaurus-plugin-content-blog/default/p/blog-tags-facebook-f47.json
================
{"tag":{"label":"Facebook","permalink":"/blog/tags/facebook","description":"Facebook tag description","allTagsPath":"/blog/tags","count":1,"unlisted":false},"listMetadata":{"permalink":"/blog/tags/facebook","page":1,"postsPerPage":10,"totalPages":1,"totalCount":1,"blogDescription":"Blog","blogTitle":"Blog"}}

================
File: pipe-docs/website/.docusaurus/docusaurus-plugin-content-blog/default/p/blog-tags-hello-f96.json
================
{"tag":{"label":"Hello","permalink":"/blog/tags/hello","description":"Hello tag description","allTagsPath":"/blog/tags","count":2,"unlisted":false},"listMetadata":{"permalink":"/blog/tags/hello","page":1,"postsPerPage":10,"totalPages":1,"totalCount":2,"blogDescription":"Blog","blogTitle":"Blog"}}

================
File: pipe-docs/website/.docusaurus/docusaurus-plugin-content-blog/default/p/blog-tags-hola-73f.json
================
{"tag":{"label":"Hola","permalink":"/blog/tags/hola","description":"Hola tag description","allTagsPath":"/blog/tags","count":1,"unlisted":false},"listMetadata":{"permalink":"/blog/tags/hola","page":1,"postsPerPage":10,"totalPages":1,"totalCount":1,"blogDescription":"Blog","blogTitle":"Blog"}}

================
File: pipe-docs/website/.docusaurus/docusaurus-plugin-content-blog/default/__plugin.json
================
{
  "name": "docusaurus-plugin-content-blog",
  "id": "default"
}

================
File: pipe-docs/website/.docusaurus/docusaurus-plugin-content-blog/default/blog-post-list-prop-default.json
================
{
  "title": "Recent posts",
  "items": [
    {
      "title": "Welcome",
      "permalink": "/blog/welcome",
      "unlisted": false,
      "date": "2021-08-26T00:00:00.000Z"
    },
    {
      "title": "MDX Blog Post",
      "permalink": "/blog/mdx-blog-post",
      "unlisted": false,
      "date": "2021-08-01T00:00:00.000Z"
    },
    {
      "title": "Long Blog Post",
      "permalink": "/blog/long-blog-post",
      "unlisted": false,
      "date": "2019-05-29T00:00:00.000Z"
    },
    {
      "title": "First Blog Post",
      "permalink": "/blog/first-blog-post",
      "unlisted": false,
      "date": "2019-05-28T00:00:00.000Z"
    }
  ]
}

================
File: pipe-docs/website/.docusaurus/docusaurus-plugin-content-blog/default/blogMetadata-default.json
================
{
  "blogBasePath": "/blog",
  "blogTitle": "Blog",
  "authorsListPath": "/blog/authors"
}

================
File: pipe-docs/website/.docusaurus/docusaurus-plugin-content-blog/default/site-blog-2019-05-28-first-blog-post-md-e27.json
================
{
  "permalink": "/blog/first-blog-post",
  "editUrl": "https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2019-05-28-first-blog-post.md",
  "source": "@site/blog/2019-05-28-first-blog-post.md",
  "title": "First Blog Post",
  "description": "Lorem ipsum dolor sit amet...",
  "date": "2019-05-28T00:00:00.000Z",
  "tags": [
    {
      "inline": false,
      "label": "Hola",
      "permalink": "/blog/tags/hola",
      "description": "Hola tag description"
    },
    {
      "inline": false,
      "label": "Docusaurus",
      "permalink": "/blog/tags/docusaurus",
      "description": "Docusaurus tag description"
    }
  ],
  "readingTime": 0.135,
  "hasTruncateMarker": true,
  "authors": [
    {
      "name": "Sébastien Lorber",
      "title": "Docusaurus maintainer",
      "url": "https://sebastienlorber.com",
      "page": {
        "permalink": "/blog/authors/all-sebastien-lorber-articles"
      },
      "socials": {
        "x": "https://x.com/sebastienlorber",
        "linkedin": "https://www.linkedin.com/in/sebastienlorber/",
        "github": "https://github.com/slorber",
        "newsletter": "https://thisweekinreact.com"
      },
      "imageURL": "https://github.com/slorber.png",
      "key": "slorber"
    },
    {
      "name": "Yangshun Tay",
      "title": "Front End Engineer @ Facebook",
      "url": "https://github.com/yangshun",
      "page": {
        "permalink": "/blog/authors/yangshun"
      },
      "socials": {
        "x": "https://x.com/yangshunz",
        "github": "https://github.com/yangshun"
      },
      "imageURL": "https://github.com/yangshun.png",
      "key": "yangshun"
    }
  ],
  "frontMatter": {
    "slug": "first-blog-post",
    "title": "First Blog Post",
    "authors": [
      "slorber",
      "yangshun"
    ],
    "tags": [
      "hola",
      "docusaurus"
    ]
  },
  "unlisted": false,
  "prevItem": {
    "title": "Long Blog Post",
    "permalink": "/blog/long-blog-post"
  }
}

================
File: pipe-docs/website/.docusaurus/docusaurus-plugin-content-blog/default/site-blog-2019-05-29-long-blog-post-md-736.json
================
{
  "permalink": "/blog/long-blog-post",
  "editUrl": "https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2019-05-29-long-blog-post.md",
  "source": "@site/blog/2019-05-29-long-blog-post.md",
  "title": "Long Blog Post",
  "description": "This is the summary of a very long blog post,",
  "date": "2019-05-29T00:00:00.000Z",
  "tags": [
    {
      "inline": false,
      "label": "Hello",
      "permalink": "/blog/tags/hello",
      "description": "Hello tag description"
    },
    {
      "inline": false,
      "label": "Docusaurus",
      "permalink": "/blog/tags/docusaurus",
      "description": "Docusaurus tag description"
    }
  ],
  "readingTime": 2.06,
  "hasTruncateMarker": true,
  "authors": [
    {
      "name": "Yangshun Tay",
      "title": "Front End Engineer @ Facebook",
      "url": "https://github.com/yangshun",
      "page": {
        "permalink": "/blog/authors/yangshun"
      },
      "socials": {
        "x": "https://x.com/yangshunz",
        "github": "https://github.com/yangshun"
      },
      "imageURL": "https://github.com/yangshun.png",
      "key": "yangshun"
    }
  ],
  "frontMatter": {
    "slug": "long-blog-post",
    "title": "Long Blog Post",
    "authors": "yangshun",
    "tags": [
      "hello",
      "docusaurus"
    ]
  },
  "unlisted": false,
  "prevItem": {
    "title": "MDX Blog Post",
    "permalink": "/blog/mdx-blog-post"
  },
  "nextItem": {
    "title": "First Blog Post",
    "permalink": "/blog/first-blog-post"
  }
}

================
File: pipe-docs/website/.docusaurus/docusaurus-plugin-content-blog/default/site-blog-2021-08-01-mdx-blog-post-mdx-593.json
================
{
  "permalink": "/blog/mdx-blog-post",
  "editUrl": "https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2021-08-01-mdx-blog-post.mdx",
  "source": "@site/blog/2021-08-01-mdx-blog-post.mdx",
  "title": "MDX Blog Post",
  "description": "Blog posts support Docusaurus Markdown features, such as MDX.",
  "date": "2021-08-01T00:00:00.000Z",
  "tags": [
    {
      "inline": false,
      "label": "Docusaurus",
      "permalink": "/blog/tags/docusaurus",
      "description": "Docusaurus tag description"
    }
  ],
  "readingTime": 0.235,
  "hasTruncateMarker": true,
  "authors": [
    {
      "name": "Sébastien Lorber",
      "title": "Docusaurus maintainer",
      "url": "https://sebastienlorber.com",
      "page": {
        "permalink": "/blog/authors/all-sebastien-lorber-articles"
      },
      "socials": {
        "x": "https://x.com/sebastienlorber",
        "linkedin": "https://www.linkedin.com/in/sebastienlorber/",
        "github": "https://github.com/slorber",
        "newsletter": "https://thisweekinreact.com"
      },
      "imageURL": "https://github.com/slorber.png",
      "key": "slorber"
    }
  ],
  "frontMatter": {
    "slug": "mdx-blog-post",
    "title": "MDX Blog Post",
    "authors": [
      "slorber"
    ],
    "tags": [
      "docusaurus"
    ]
  },
  "unlisted": false,
  "prevItem": {
    "title": "Welcome",
    "permalink": "/blog/welcome"
  },
  "nextItem": {
    "title": "Long Blog Post",
    "permalink": "/blog/long-blog-post"
  }
}

================
File: pipe-docs/website/.docusaurus/docusaurus-plugin-content-blog/default/site-blog-2021-08-26-welcome-index-md-d9f.json
================
{
  "permalink": "/blog/welcome",
  "editUrl": "https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2021-08-26-welcome/index.md",
  "source": "@site/blog/2021-08-26-welcome/index.md",
  "title": "Welcome",
  "description": "Docusaurus blogging features are powered by the blog plugin.",
  "date": "2021-08-26T00:00:00.000Z",
  "tags": [
    {
      "inline": false,
      "label": "Facebook",
      "permalink": "/blog/tags/facebook",
      "description": "Facebook tag description"
    },
    {
      "inline": false,
      "label": "Hello",
      "permalink": "/blog/tags/hello",
      "description": "Hello tag description"
    },
    {
      "inline": false,
      "label": "Docusaurus",
      "permalink": "/blog/tags/docusaurus",
      "description": "Docusaurus tag description"
    }
  ],
  "readingTime": 0.465,
  "hasTruncateMarker": true,
  "authors": [
    {
      "name": "Sébastien Lorber",
      "title": "Docusaurus maintainer",
      "url": "https://sebastienlorber.com",
      "page": {
        "permalink": "/blog/authors/all-sebastien-lorber-articles"
      },
      "socials": {
        "x": "https://x.com/sebastienlorber",
        "linkedin": "https://www.linkedin.com/in/sebastienlorber/",
        "github": "https://github.com/slorber",
        "newsletter": "https://thisweekinreact.com"
      },
      "imageURL": "https://github.com/slorber.png",
      "key": "slorber"
    },
    {
      "name": "Yangshun Tay",
      "title": "Front End Engineer @ Facebook",
      "url": "https://github.com/yangshun",
      "page": {
        "permalink": "/blog/authors/yangshun"
      },
      "socials": {
        "x": "https://x.com/yangshunz",
        "github": "https://github.com/yangshun"
      },
      "imageURL": "https://github.com/yangshun.png",
      "key": "yangshun"
    }
  ],
  "frontMatter": {
    "slug": "welcome",
    "title": "Welcome",
    "authors": [
      "slorber",
      "yangshun"
    ],
    "tags": [
      "facebook",
      "hello",
      "docusaurus"
    ]
  },
  "unlisted": false,
  "nextItem": {
    "title": "MDX Blog Post",
    "permalink": "/blog/mdx-blog-post"
  }
}

================
File: pipe-docs/website/.docusaurus/docusaurus-plugin-content-docs/default/p/docs-175.json
================
{"version":{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"docs":[{"type":"category","label":"Introduction","items":[{"type":"link","label":"Tutorial Intro","href":"/docs/intro","docId":"intro","unlisted":false},{"type":"link","label":"Pipe Protocol Overview","href":"/docs/introduction/overview","docId":"introduction/overview","unlisted":false},{"type":"link","label":"The Problem Pipe Solves","href":"/docs/introduction/problem","docId":"introduction/problem","unlisted":false},{"type":"link","label":"How Pipe Solves the Problem","href":"/docs/introduction/solution","docId":"introduction/solution","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"category","label":"Core Concepts","items":[{"type":"link","label":"Terminology","href":"/docs/core-concepts/terminology","docId":"core-concepts/terminology","unlisted":false},{"type":"link","label":"Scopes","href":"/docs/core-concepts/scopes","docId":"core-concepts/scopes","unlisted":false},{"type":"link","label":"PipeRecord","href":"/docs/core-concepts/piperecord","docId":"core-concepts/piperecord","unlisted":false},{"type":"link","label":"PipeBundle","href":"/docs/core-concepts/pipebundle","docId":"core-concepts/pipebundle","unlisted":false},{"type":"link","label":"Encryption and Hidden-from-LLM Data","href":"/docs/core-concepts/encryption","docId":"core-concepts/encryption","unlisted":false},{"type":"link","label":"Inline vs. Referenced Content","href":"/docs/core-concepts/inline-referenced","docId":"core-concepts/inline-referenced","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"category","label":"Usage Examples","items":[{"type":"link","label":"Fetching Data and Schema","href":"/docs/usage-examples/fetch-data","docId":"usage-examples/fetch-data","unlisted":false},{"type":"link","label":"Working with Bundles","href":"/docs/usage-examples/work-bundles","docId":"usage-examples/work-bundles","unlisted":false},{"type":"link","label":"Publishing Hidden Data","href":"/docs/usage-examples/publish-hidden-data","docId":"usage-examples/publish-hidden-data","unlisted":false},{"type":"link","label":"Managing Pinned Content","href":"/docs/usage-examples/pin-unpin","docId":"usage-examples/pin-unpin","unlisted":false},{"type":"link","label":"Replicating Data","href":"/docs/usage-examples/replicate-data","docId":"usage-examples/replicate-data","unlisted":false},{"type":"link","label":"Publishing Data and Schema","href":"/docs/usage-examples/publish-data","docId":"usage-examples/publish-data","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"category","label":"API Reference","items":[{"type":"link","label":"GET /node-status","href":"/docs/api-reference/node-status","docId":"api-reference/node-status","unlisted":false},{"type":"link","label":"GET /node-info","href":"/docs/api-reference/node-info","docId":"api-reference/node-info","unlisted":false},{"type":"link","label":"GET /storage-metrics","href":"/docs/api-reference/storage-metrics","docId":"api-reference/storage-metrics","unlisted":false},{"type":"link","label":"GET /pinned-cids","href":"/docs/api-reference/pinned-cids","docId":"api-reference/pinned-cids","unlisted":false},{"type":"link","label":"GET /configuration","href":"/docs/api-reference/configuration","docId":"api-reference/configuration","unlisted":false},{"type":"link","label":"GET /fetch","href":"/docs/api-reference/fetch","docId":"api-reference/fetch","unlisted":false},{"type":"link","label":"POST /publish","href":"/docs/api-reference/publish","docId":"api-reference/publish","unlisted":false},{"type":"link","label":"POST /publish-bundle","href":"/docs/api-reference/publish-bundle","docId":"api-reference/publish-bundle","unlisted":false},{"type":"link","label":"POST /pin","href":"/docs/api-reference/pin","docId":"api-reference/pin","unlisted":false},{"type":"link","label":"POST /unpin","href":"/docs/api-reference/unpin","docId":"api-reference/unpin","unlisted":false},{"type":"link","label":"POST /replicate","href":"/docs/api-reference/replicate","docId":"api-reference/replicate","unlisted":false}],"collapsed":true,"collapsible":true}]},"docs":{"api-reference/configuration":{"id":"api-reference/configuration","title":"GET /configuration","description":"Returns the current configuration of a specified IPFS node. This endpoint provides detailed information about node settings, network configuration, and runtime parameters.","sidebar":"docs"},"api-reference/fetch":{"id":"api-reference/fetch","title":"GET /fetch","description":"Fetches a PipeRecord by its CID from a specified scope. This endpoint retrieves both the record metadata and its content, if available.","sidebar":"docs"},"api-reference/node-info":{"id":"api-reference/node-info","title":"GET /node-info","description":"Returns detailed information about a specific IPFS node managed by the Pipe protocol. This endpoint provides configuration and identity information for either the private or public node.","sidebar":"docs"},"api-reference/node-status":{"id":"api-reference/node-status","title":"GET /node-status","description":"Returns the status of the IPFS nodes managed by the Pipe protocol. This endpoint provides information about the availability and health of both private and public nodes.","sidebar":"docs"},"api-reference/pin":{"id":"api-reference/pin","title":"POST /pin","description":"Pins a CID in a specified scope, preventing it from being garbage collected. Pinned content remains available until explicitly unpinned.","sidebar":"docs"},"api-reference/pinned-cids":{"id":"api-reference/pinned-cids","title":"GET /pinned-cids","description":"Returns a list of Content Identifiers (CIDs) that are currently pinned in a specified scope. This endpoint provides information about pinned content and their metadata.","sidebar":"docs"},"api-reference/publish":{"id":"api-reference/publish","title":"POST /publish","description":"Publishes a single PipeRecord to IPFS. This endpoint handles both inline content and referenced data, with support for encryption and access control.","sidebar":"docs"},"api-reference/publish-bundle":{"id":"api-reference/publish-bundle","title":"POST /publish-bundle","description":"Publishes a PipeBundle containing both schema and data records. This endpoint handles the creation and storage of related schema and data content as a single unit.","sidebar":"docs"},"api-reference/replicate":{"id":"api-reference/replicate","title":"POST /replicate","description":"Replicates content from one scope to another. This endpoint is primarily used to move content between private and public scopes, enabling controlled sharing of data.","sidebar":"docs"},"api-reference/storage-metrics":{"id":"api-reference/storage-metrics","title":"GET /storage-metrics","description":"Returns storage usage metrics for a specified IPFS node. This endpoint provides detailed information about storage consumption, including repository size, content distribution, and pinned data metrics.","sidebar":"docs"},"api-reference/unpin":{"id":"api-reference/unpin","title":"POST /unpin","description":"Unpins a CID from a specified scope, allowing it to be garbage collected if no other pins exist. This endpoint is used to manage storage by removing pins from content that is no longer needed.","sidebar":"docs"},"core-concepts/encryption":{"id":"core-concepts/encryption","title":"Encryption and Hidden-from-LLM Data","description":"The Pipe protocol provides robust encryption capabilities, allowing data to be securely stored and optionally hidden from LLMs. This document explains the encryption features and how to use them effectively.","sidebar":"docs"},"core-concepts/inline-referenced":{"id":"core-concepts/inline-referenced","title":"Inline vs. Referenced Content","description":"The Pipe protocol supports two methods of storing content: inline and referenced. Each approach has its own advantages and use cases.","sidebar":"docs"},"core-concepts/pipebundle":{"id":"core-concepts/pipebundle","title":"PipeBundle","description":"A PipeBundle combines a schema and data record, providing a way to package related schema and data together. This is particularly useful when a piece of data has a defined schema that describes its structure.","sidebar":"docs"},"core-concepts/piperecord":{"id":"core-concepts/piperecord","title":"PipeRecord","description":"A PipeRecord is the fundamental data structure in the Pipe protocol. It represents a single piece of content—either data or schema—that can be referenced by a CID or optionally stored inline.","sidebar":"docs"},"core-concepts/scopes":{"id":"core-concepts/scopes","title":"Scopes","description":"In the Pipe protocol, scopes determine how and where data is stored and accessed. Each scope has specific characteristics and use cases.","sidebar":"docs"},"core-concepts/terminology":{"id":"core-concepts/terminology","title":"Terminology","description":"This section defines key terms used throughout the Pipe protocol documentation.","sidebar":"docs"},"intro":{"id":"intro","title":"Tutorial Intro","description":"Let's discover Docusaurus in less than 5 minutes.","sidebar":"docs"},"introduction/overview":{"id":"introduction/overview","title":"Pipe Protocol Overview","description":"Pipe is a protocol designed for efficient data handling in multi-agent Large Language Model (LLM) systems. It allows agents to share and reference large or structured data through IPFS (InterPlanetary File System), minimizing context overload and improving scalability.","sidebar":"docs"},"introduction/problem":{"id":"introduction/problem","title":"The Problem Pipe Solves","description":"In multi-agent LLM systems, agents often exchange state by directly passing large data inline. This approach leads to several critical issues:","sidebar":"docs"},"introduction/solution":{"id":"introduction/solution","title":"How Pipe Solves the Problem","description":"Pipe provides a comprehensive solution to the challenges of data handling in multi-agent LLM systems through several key mechanisms:","sidebar":"docs"},"tutorial-basics/congratulations":{"id":"tutorial-basics/congratulations","title":"Congratulations!","description":"You have just learned the basics of Docusaurus and made some changes to the initial template."},"tutorial-basics/create-a-blog-post":{"id":"tutorial-basics/create-a-blog-post","title":"Create a Blog Post","description":"Docusaurus creates a page for each blog post, but also a blog index page, a tag system, an RSS feed..."},"tutorial-basics/create-a-document":{"id":"tutorial-basics/create-a-document","title":"Create a Document","description":"Documents are groups of pages connected through:"},"tutorial-basics/create-a-page":{"id":"tutorial-basics/create-a-page","title":"Create a Page","description":"Add Markdown or React files to src/pages to create a standalone page:"},"tutorial-basics/deploy-your-site":{"id":"tutorial-basics/deploy-your-site","title":"Deploy your site","description":"Docusaurus is a static-site-generator (also called Jamstack)."},"tutorial-basics/markdown-features":{"id":"tutorial-basics/markdown-features","title":"Markdown Features","description":"Docusaurus supports Markdown and a few additional features."},"tutorial-extras/manage-docs-versions":{"id":"tutorial-extras/manage-docs-versions","title":"Manage Docs Versions","description":"Docusaurus can manage multiple versions of your docs."},"tutorial-extras/translate-your-site":{"id":"tutorial-extras/translate-your-site","title":"Translate your site","description":"Let's translate docs/intro.md to French."},"usage-examples/fetch-data":{"id":"usage-examples/fetch-data","title":"Fetching Data and Schema","description":"This guide demonstrates how to fetch data and schema records using the Pipe protocol. We'll cover various scenarios including inline content, referenced content, and encrypted data.","sidebar":"docs"},"usage-examples/pin-unpin":{"id":"usage-examples/pin-unpin","title":"Managing Pinned Content","description":"This guide demonstrates how to manage pinned content in the Pipe protocol. We'll cover pinning, unpinning, and various strategies for content retention.","sidebar":"docs"},"usage-examples/publish-data":{"id":"usage-examples/publish-data","title":"Publishing Data and Schema","description":"This guide demonstrates how to publish data and schema records using the Pipe protocol.","sidebar":"docs"},"usage-examples/publish-hidden-data":{"id":"usage-examples/publish-hidden-data","title":"Publishing Hidden Data","description":"This guide demonstrates how to publish data that should be hidden from Large Language Models (LLMs) using the Pipe protocol. We'll cover various scenarios including encryption, access policies, and tool-specific access.","sidebar":"docs"},"usage-examples/replicate-data":{"id":"usage-examples/replicate-data","title":"Replicating Data","description":"This guide demonstrates how to replicate data between different scopes in the Pipe protocol. We'll cover various replication scenarios and best practices for data distribution.","sidebar":"docs"},"usage-examples/work-bundles":{"id":"usage-examples/work-bundles","title":"Working with Bundles","description":"This guide demonstrates how to work with PipeBundle objects in the Pipe protocol. We'll cover creating, publishing, and fetching bundles that combine schema and data records.","sidebar":"docs"}}}}

================
File: pipe-docs/website/.docusaurus/docusaurus-plugin-content-docs/default/p/docs-category-tutorial-basics-ea4.json
================
{"categoryGeneratedIndex":{"title":"Tutorial - Basics","description":"5 minutes to learn the most important Docusaurus concepts.","slug":"/category/tutorial---basics","permalink":"/docs/category/tutorial---basics","sidebar":"tutorialSidebar","navigation":{"previous":{"title":"Tutorial Intro","permalink":"/docs/intro"},"next":{"title":"Create a Page","permalink":"/docs/tutorial-basics/create-a-page"}}}}

================
File: pipe-docs/website/.docusaurus/docusaurus-plugin-content-docs/default/p/docs-category-tutorial-extras-128.json
================
{"categoryGeneratedIndex":{"title":"Tutorial - Extras","slug":"/category/tutorial---extras","permalink":"/docs/category/tutorial---extras","sidebar":"tutorialSidebar","navigation":{"previous":{"title":"Congratulations!","permalink":"/docs/tutorial-basics/congratulations"},"next":{"title":"Manage Docs Versions","permalink":"/docs/tutorial-extras/manage-docs-versions"}}}}

================
File: pipe-docs/website/.docusaurus/docusaurus-plugin-content-docs/default/p/index-466.json
================
{"version":{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"docs":[{"type":"category","label":"Introduction","items":[{"type":"link","label":"Tutorial Intro","href":"/intro","docId":"intro","unlisted":false},{"type":"link","label":"Pipe Protocol Overview","href":"/introduction/overview","docId":"introduction/overview","unlisted":false},{"type":"link","label":"The Problem Pipe Solves","href":"/introduction/problem","docId":"introduction/problem","unlisted":false},{"type":"link","label":"How Pipe Solves the Problem","href":"/introduction/solution","docId":"introduction/solution","unlisted":false}],"collapsed":false,"collapsible":true},{"type":"category","label":"Core Concepts","items":[{"type":"link","label":"Terminology","href":"/core-concepts/terminology","docId":"core-concepts/terminology","unlisted":false},{"type":"link","label":"Scopes","href":"/core-concepts/scopes","docId":"core-concepts/scopes","unlisted":false},{"type":"link","label":"PipeRecord","href":"/core-concepts/piperecord","docId":"core-concepts/piperecord","unlisted":false},{"type":"link","label":"PipeBundle","href":"/core-concepts/pipebundle","docId":"core-concepts/pipebundle","unlisted":false},{"type":"link","label":"Encryption and Hidden-from-LLM Data","href":"/core-concepts/encryption","docId":"core-concepts/encryption","unlisted":false},{"type":"link","label":"Inline vs. Referenced Content","href":"/core-concepts/inline-referenced","docId":"core-concepts/inline-referenced","unlisted":false}],"collapsed":false,"collapsible":true},{"type":"category","label":"Usage Examples","items":[{"type":"link","label":"Fetching Data and Schema","href":"/usage-examples/fetch-data","docId":"usage-examples/fetch-data","unlisted":false},{"type":"link","label":"Working with Bundles","href":"/usage-examples/work-bundles","docId":"usage-examples/work-bundles","unlisted":false},{"type":"link","label":"Publishing Hidden Data","href":"/usage-examples/publish-hidden-data","docId":"usage-examples/publish-hidden-data","unlisted":false},{"type":"link","label":"Managing Pinned Content","href":"/usage-examples/pin-unpin","docId":"usage-examples/pin-unpin","unlisted":false},{"type":"link","label":"Replicating Data","href":"/usage-examples/replicate-data","docId":"usage-examples/replicate-data","unlisted":false},{"type":"link","label":"Publishing Data and Schema","href":"/usage-examples/publish-data","docId":"usage-examples/publish-data","unlisted":false}],"collapsed":false,"collapsible":true},{"type":"category","label":"API Reference","items":[{"type":"link","label":"GET /node-status","href":"/api-reference/node-status","docId":"api-reference/node-status","unlisted":false},{"type":"link","label":"GET /node-info","href":"/api-reference/node-info","docId":"api-reference/node-info","unlisted":false},{"type":"link","label":"GET /storage-metrics","href":"/api-reference/storage-metrics","docId":"api-reference/storage-metrics","unlisted":false},{"type":"link","label":"GET /pinned-cids","href":"/api-reference/pinned-cids","docId":"api-reference/pinned-cids","unlisted":false},{"type":"link","label":"GET /configuration","href":"/api-reference/configuration","docId":"api-reference/configuration","unlisted":false},{"type":"link","label":"GET /fetch","href":"/api-reference/fetch","docId":"api-reference/fetch","unlisted":false},{"type":"link","label":"POST /publish","href":"/api-reference/publish","docId":"api-reference/publish","unlisted":false},{"type":"link","label":"POST /publish-bundle","href":"/api-reference/publish-bundle","docId":"api-reference/publish-bundle","unlisted":false},{"type":"link","label":"POST /pin","href":"/api-reference/pin","docId":"api-reference/pin","unlisted":false},{"type":"link","label":"POST /unpin","href":"/api-reference/unpin","docId":"api-reference/unpin","unlisted":false},{"type":"link","label":"POST /replicate","href":"/api-reference/replicate","docId":"api-reference/replicate","unlisted":false}],"collapsed":false,"collapsible":true}]},"docs":{"api-reference/configuration":{"id":"api-reference/configuration","title":"GET /configuration","description":"Returns the current configuration of a specified IPFS node. This endpoint provides detailed information about node settings, network configuration, and runtime parameters.","sidebar":"docs"},"api-reference/fetch":{"id":"api-reference/fetch","title":"GET /fetch","description":"Fetches a PipeRecord by its CID from a specified scope. This endpoint retrieves both the record metadata and its content, if available.","sidebar":"docs"},"api-reference/node-info":{"id":"api-reference/node-info","title":"GET /node-info","description":"Returns detailed information about a specific IPFS node managed by the Pipe protocol. This endpoint provides configuration and identity information for either the private or public node.","sidebar":"docs"},"api-reference/node-status":{"id":"api-reference/node-status","title":"GET /node-status","description":"Returns the status of the IPFS nodes managed by the Pipe protocol. This endpoint provides information about the availability and health of both private and public nodes.","sidebar":"docs"},"api-reference/pin":{"id":"api-reference/pin","title":"POST /pin","description":"Pins a CID in a specified scope, preventing it from being garbage collected. Pinned content remains available until explicitly unpinned.","sidebar":"docs"},"api-reference/pinned-cids":{"id":"api-reference/pinned-cids","title":"GET /pinned-cids","description":"Returns a list of Content Identifiers (CIDs) that are currently pinned in a specified scope. This endpoint provides information about pinned content and their metadata.","sidebar":"docs"},"api-reference/publish":{"id":"api-reference/publish","title":"POST /publish","description":"Publishes a single PipeRecord to IPFS. This endpoint handles both inline content and referenced data, with support for encryption and access control.","sidebar":"docs"},"api-reference/publish-bundle":{"id":"api-reference/publish-bundle","title":"POST /publish-bundle","description":"Publishes a PipeBundle containing both schema and data records. This endpoint handles the creation and storage of related schema and data content as a single unit.","sidebar":"docs"},"api-reference/replicate":{"id":"api-reference/replicate","title":"POST /replicate","description":"Replicates content from one scope to another. This endpoint is primarily used to move content between private and public scopes, enabling controlled sharing of data.","sidebar":"docs"},"api-reference/storage-metrics":{"id":"api-reference/storage-metrics","title":"GET /storage-metrics","description":"Returns storage usage metrics for a specified IPFS node. This endpoint provides detailed information about storage consumption, including repository size, content distribution, and pinned data metrics.","sidebar":"docs"},"api-reference/unpin":{"id":"api-reference/unpin","title":"POST /unpin","description":"Unpins a CID from a specified scope, allowing it to be garbage collected if no other pins exist. This endpoint is used to manage storage by removing pins from content that is no longer needed.","sidebar":"docs"},"core-concepts/encryption":{"id":"core-concepts/encryption","title":"Encryption and Hidden-from-LLM Data","description":"The Pipe protocol provides robust encryption capabilities, allowing data to be securely stored and optionally hidden from LLMs. This document explains the encryption features and how to use them effectively.","sidebar":"docs"},"core-concepts/inline-referenced":{"id":"core-concepts/inline-referenced","title":"Inline vs. Referenced Content","description":"The Pipe protocol supports two methods of storing content: inline and referenced. Each approach has its own advantages and use cases.","sidebar":"docs"},"core-concepts/pipebundle":{"id":"core-concepts/pipebundle","title":"PipeBundle","description":"A PipeBundle combines a schema and data record, providing a way to package related schema and data together. This is particularly useful when a piece of data has a defined schema that describes its structure.","sidebar":"docs"},"core-concepts/piperecord":{"id":"core-concepts/piperecord","title":"PipeRecord","description":"A PipeRecord is the fundamental data structure in the Pipe protocol. It represents a single piece of content—either data or schema—that can be referenced by a CID or optionally stored inline.","sidebar":"docs"},"core-concepts/scopes":{"id":"core-concepts/scopes","title":"Scopes","description":"In the Pipe protocol, scopes determine how and where data is stored and accessed. Each scope has specific characteristics and use cases.","sidebar":"docs"},"core-concepts/terminology":{"id":"core-concepts/terminology","title":"Terminology","description":"This section defines key terms used throughout the Pipe protocol documentation.","sidebar":"docs"},"intro":{"id":"intro","title":"Tutorial Intro","description":"Let's discover Docusaurus in less than 5 minutes.","sidebar":"docs"},"introduction/overview":{"id":"introduction/overview","title":"Pipe Protocol Overview","description":"Pipe is a protocol designed for efficient data handling in multi-agent Large Language Model (LLM) systems. It allows agents to share and reference large or structured data through IPFS (InterPlanetary File System), minimizing context overload and improving scalability.","sidebar":"docs"},"introduction/problem":{"id":"introduction/problem","title":"The Problem Pipe Solves","description":"In multi-agent LLM systems, agents often exchange state by directly passing large data inline. This approach leads to several critical issues:","sidebar":"docs"},"introduction/solution":{"id":"introduction/solution","title":"How Pipe Solves the Problem","description":"Pipe provides a comprehensive solution to the challenges of data handling in multi-agent LLM systems through several key mechanisms:","sidebar":"docs"},"tutorial-basics/congratulations":{"id":"tutorial-basics/congratulations","title":"Congratulations!","description":"You have just learned the basics of Docusaurus and made some changes to the initial template."},"tutorial-basics/create-a-blog-post":{"id":"tutorial-basics/create-a-blog-post","title":"Create a Blog Post","description":"Docusaurus creates a page for each blog post, but also a blog index page, a tag system, an RSS feed..."},"tutorial-basics/create-a-document":{"id":"tutorial-basics/create-a-document","title":"Create a Document","description":"Documents are groups of pages connected through:"},"tutorial-basics/create-a-page":{"id":"tutorial-basics/create-a-page","title":"Create a Page","description":"Add Markdown or React files to src/pages to create a standalone page:"},"tutorial-basics/deploy-your-site":{"id":"tutorial-basics/deploy-your-site","title":"Deploy your site","description":"Docusaurus is a static-site-generator (also called Jamstack)."},"tutorial-basics/markdown-features":{"id":"tutorial-basics/markdown-features","title":"Markdown Features","description":"Docusaurus supports Markdown and a few additional features."},"tutorial-extras/manage-docs-versions":{"id":"tutorial-extras/manage-docs-versions","title":"Manage Docs Versions","description":"Docusaurus can manage multiple versions of your docs."},"tutorial-extras/translate-your-site":{"id":"tutorial-extras/translate-your-site","title":"Translate your site","description":"Let's translate docs/intro.md to French."},"usage-examples/fetch-data":{"id":"usage-examples/fetch-data","title":"Fetching Data and Schema","description":"This guide demonstrates how to fetch data and schema records using the Pipe protocol. We'll cover various scenarios including inline content, referenced content, and encrypted data.","sidebar":"docs"},"usage-examples/pin-unpin":{"id":"usage-examples/pin-unpin","title":"Managing Pinned Content","description":"This guide demonstrates how to manage pinned content in the Pipe protocol. We'll cover pinning, unpinning, and various strategies for content retention.","sidebar":"docs"},"usage-examples/publish-data":{"id":"usage-examples/publish-data","title":"Publishing Data and Schema","description":"This guide demonstrates how to publish data and schema records using the Pipe protocol.","sidebar":"docs"},"usage-examples/publish-hidden-data":{"id":"usage-examples/publish-hidden-data","title":"Publishing Hidden Data","description":"This guide demonstrates how to publish data that should be hidden from Large Language Models (LLMs) using the Pipe protocol. We'll cover various scenarios including encryption, access policies, and tool-specific access.","sidebar":"docs"},"usage-examples/replicate-data":{"id":"usage-examples/replicate-data","title":"Replicating Data","description":"This guide demonstrates how to replicate data between different scopes in the Pipe protocol. We'll cover various replication scenarios and best practices for data distribution.","sidebar":"docs"},"usage-examples/work-bundles":{"id":"usage-examples/work-bundles","title":"Working with Bundles","description":"This guide demonstrates how to work with PipeBundle objects in the Pipe protocol. We'll cover creating, publishing, and fetching bundles that combine schema and data records.","sidebar":"docs"}}}}

================
File: pipe-docs/website/.docusaurus/docusaurus-plugin-content-docs/default/__plugin.json
================
{
  "name": "docusaurus-plugin-content-docs",
  "id": "default"
}

================
File: pipe-docs/website/.docusaurus/docusaurus-plugin-content-docs/default/site-docs-api-reference-configuration-md-4f2.json
================
{
  "id": "api-reference/configuration",
  "title": "GET /configuration",
  "description": "Returns the current configuration of a specified IPFS node. This endpoint provides detailed information about node settings, network configuration, and runtime parameters.",
  "source": "@site/docs/api-reference/configuration.md",
  "sourceDirName": "api-reference",
  "slug": "/api-reference/configuration",
  "permalink": "/api-reference/configuration",
  "draft": false,
  "unlisted": false,
  "tags": [],
  "version": "current",
  "lastUpdatedAt": 1539502055000,
  "frontMatter": {},
  "sidebar": "docs",
  "previous": {
    "title": "GET /pinned-cids",
    "permalink": "/api-reference/pinned-cids"
  },
  "next": {
    "title": "GET /fetch",
    "permalink": "/api-reference/fetch"
  }
}

================
File: pipe-docs/website/.docusaurus/docusaurus-plugin-content-docs/default/site-docs-api-reference-fetch-md-72c.json
================
{
  "id": "api-reference/fetch",
  "title": "GET /fetch",
  "description": "Fetches a PipeRecord by its CID from a specified scope. This endpoint retrieves both the record metadata and its content, if available.",
  "source": "@site/docs/api-reference/fetch.md",
  "sourceDirName": "api-reference",
  "slug": "/api-reference/fetch",
  "permalink": "/api-reference/fetch",
  "draft": false,
  "unlisted": false,
  "tags": [],
  "version": "current",
  "lastUpdatedAt": 1539502055000,
  "frontMatter": {},
  "sidebar": "docs",
  "previous": {
    "title": "GET /configuration",
    "permalink": "/api-reference/configuration"
  },
  "next": {
    "title": "POST /publish",
    "permalink": "/api-reference/publish"
  }
}

================
File: pipe-docs/website/.docusaurus/docusaurus-plugin-content-docs/default/site-docs-api-reference-node-info-md-cc6.json
================
{
  "id": "api-reference/node-info",
  "title": "GET /node-info",
  "description": "Returns detailed information about a specific IPFS node managed by the Pipe protocol. This endpoint provides configuration and identity information for either the private or public node.",
  "source": "@site/docs/api-reference/node-info.md",
  "sourceDirName": "api-reference",
  "slug": "/api-reference/node-info",
  "permalink": "/api-reference/node-info",
  "draft": false,
  "unlisted": false,
  "tags": [],
  "version": "current",
  "lastUpdatedAt": 1539502055000,
  "frontMatter": {},
  "sidebar": "docs",
  "previous": {
    "title": "GET /node-status",
    "permalink": "/api-reference/node-status"
  },
  "next": {
    "title": "GET /storage-metrics",
    "permalink": "/api-reference/storage-metrics"
  }
}

================
File: pipe-docs/website/.docusaurus/docusaurus-plugin-content-docs/default/site-docs-api-reference-node-status-md-213.json
================
{
  "id": "api-reference/node-status",
  "title": "GET /node-status",
  "description": "Returns the status of the IPFS nodes managed by the Pipe protocol. This endpoint provides information about the availability and health of both private and public nodes.",
  "source": "@site/docs/api-reference/node-status.md",
  "sourceDirName": "api-reference",
  "slug": "/api-reference/node-status",
  "permalink": "/api-reference/node-status",
  "draft": false,
  "unlisted": false,
  "tags": [],
  "version": "current",
  "lastUpdatedAt": 1539502055000,
  "frontMatter": {},
  "sidebar": "docs",
  "previous": {
    "title": "Publishing Data and Schema",
    "permalink": "/usage-examples/publish-data"
  },
  "next": {
    "title": "GET /node-info",
    "permalink": "/api-reference/node-info"
  }
}

================
File: pipe-docs/website/.docusaurus/docusaurus-plugin-content-docs/default/site-docs-api-reference-pin-md-e40.json
================
{
  "id": "api-reference/pin",
  "title": "POST /pin",
  "description": "Pins a CID in a specified scope, preventing it from being garbage collected. Pinned content remains available until explicitly unpinned.",
  "source": "@site/docs/api-reference/pin.md",
  "sourceDirName": "api-reference",
  "slug": "/api-reference/pin",
  "permalink": "/api-reference/pin",
  "draft": false,
  "unlisted": false,
  "tags": [],
  "version": "current",
  "lastUpdatedAt": 1539502055000,
  "frontMatter": {},
  "sidebar": "docs",
  "previous": {
    "title": "POST /publish-bundle",
    "permalink": "/api-reference/publish-bundle"
  },
  "next": {
    "title": "POST /unpin",
    "permalink": "/api-reference/unpin"
  }
}

================
File: pipe-docs/website/.docusaurus/docusaurus-plugin-content-docs/default/site-docs-api-reference-pinned-cids-md-567.json
================
{
  "id": "api-reference/pinned-cids",
  "title": "GET /pinned-cids",
  "description": "Returns a list of Content Identifiers (CIDs) that are currently pinned in a specified scope. This endpoint provides information about pinned content and their metadata.",
  "source": "@site/docs/api-reference/pinned-cids.md",
  "sourceDirName": "api-reference",
  "slug": "/api-reference/pinned-cids",
  "permalink": "/api-reference/pinned-cids",
  "draft": false,
  "unlisted": false,
  "tags": [],
  "version": "current",
  "lastUpdatedAt": 1539502055000,
  "frontMatter": {},
  "sidebar": "docs",
  "previous": {
    "title": "GET /storage-metrics",
    "permalink": "/api-reference/storage-metrics"
  },
  "next": {
    "title": "GET /configuration",
    "permalink": "/api-reference/configuration"
  }
}

================
File: pipe-docs/website/.docusaurus/docusaurus-plugin-content-docs/default/site-docs-api-reference-publish-bundle-md-98e.json
================
{
  "id": "api-reference/publish-bundle",
  "title": "POST /publish-bundle",
  "description": "Publishes a PipeBundle containing both schema and data records. This endpoint handles the creation and storage of related schema and data content as a single unit.",
  "source": "@site/docs/api-reference/publish-bundle.md",
  "sourceDirName": "api-reference",
  "slug": "/api-reference/publish-bundle",
  "permalink": "/api-reference/publish-bundle",
  "draft": false,
  "unlisted": false,
  "tags": [],
  "version": "current",
  "lastUpdatedAt": 1539502055000,
  "frontMatter": {},
  "sidebar": "docs",
  "previous": {
    "title": "POST /publish",
    "permalink": "/api-reference/publish"
  },
  "next": {
    "title": "POST /pin",
    "permalink": "/api-reference/pin"
  }
}

================
File: pipe-docs/website/.docusaurus/docusaurus-plugin-content-docs/default/site-docs-api-reference-publish-md-c40.json
================
{
  "id": "api-reference/publish",
  "title": "POST /publish",
  "description": "Publishes a single PipeRecord to IPFS. This endpoint handles both inline content and referenced data, with support for encryption and access control.",
  "source": "@site/docs/api-reference/publish.md",
  "sourceDirName": "api-reference",
  "slug": "/api-reference/publish",
  "permalink": "/api-reference/publish",
  "draft": false,
  "unlisted": false,
  "tags": [],
  "version": "current",
  "lastUpdatedAt": 1539502055000,
  "frontMatter": {},
  "sidebar": "docs",
  "previous": {
    "title": "GET /fetch",
    "permalink": "/api-reference/fetch"
  },
  "next": {
    "title": "POST /publish-bundle",
    "permalink": "/api-reference/publish-bundle"
  }
}

================
File: pipe-docs/website/.docusaurus/docusaurus-plugin-content-docs/default/site-docs-api-reference-replicate-md-c5d.json
================
{
  "id": "api-reference/replicate",
  "title": "POST /replicate",
  "description": "Replicates content from one scope to another. This endpoint is primarily used to move content between private and public scopes, enabling controlled sharing of data.",
  "source": "@site/docs/api-reference/replicate.md",
  "sourceDirName": "api-reference",
  "slug": "/api-reference/replicate",
  "permalink": "/api-reference/replicate",
  "draft": false,
  "unlisted": false,
  "tags": [],
  "version": "current",
  "lastUpdatedAt": 1539502055000,
  "frontMatter": {},
  "sidebar": "docs",
  "previous": {
    "title": "POST /unpin",
    "permalink": "/api-reference/unpin"
  }
}

================
File: pipe-docs/website/.docusaurus/docusaurus-plugin-content-docs/default/site-docs-api-reference-storage-metrics-md-37d.json
================
{
  "id": "api-reference/storage-metrics",
  "title": "GET /storage-metrics",
  "description": "Returns storage usage metrics for a specified IPFS node. This endpoint provides detailed information about storage consumption, including repository size, content distribution, and pinned data metrics.",
  "source": "@site/docs/api-reference/storage-metrics.md",
  "sourceDirName": "api-reference",
  "slug": "/api-reference/storage-metrics",
  "permalink": "/api-reference/storage-metrics",
  "draft": false,
  "unlisted": false,
  "tags": [],
  "version": "current",
  "lastUpdatedAt": 1539502055000,
  "frontMatter": {},
  "sidebar": "docs",
  "previous": {
    "title": "GET /node-info",
    "permalink": "/api-reference/node-info"
  },
  "next": {
    "title": "GET /pinned-cids",
    "permalink": "/api-reference/pinned-cids"
  }
}

================
File: pipe-docs/website/.docusaurus/docusaurus-plugin-content-docs/default/site-docs-api-reference-unpin-md-df6.json
================
{
  "id": "api-reference/unpin",
  "title": "POST /unpin",
  "description": "Unpins a CID from a specified scope, allowing it to be garbage collected if no other pins exist. This endpoint is used to manage storage by removing pins from content that is no longer needed.",
  "source": "@site/docs/api-reference/unpin.md",
  "sourceDirName": "api-reference",
  "slug": "/api-reference/unpin",
  "permalink": "/api-reference/unpin",
  "draft": false,
  "unlisted": false,
  "tags": [],
  "version": "current",
  "lastUpdatedAt": 1539502055000,
  "frontMatter": {},
  "sidebar": "docs",
  "previous": {
    "title": "POST /pin",
    "permalink": "/api-reference/pin"
  },
  "next": {
    "title": "POST /replicate",
    "permalink": "/api-reference/replicate"
  }
}

================
File: pipe-docs/website/.docusaurus/docusaurus-plugin-content-docs/default/site-docs-core-concepts-encryption-md-3be.json
================
{
  "id": "core-concepts/encryption",
  "title": "Encryption and Hidden-from-LLM Data",
  "description": "The Pipe protocol provides robust encryption capabilities, allowing data to be securely stored and optionally hidden from LLMs. This document explains the encryption features and how to use them effectively.",
  "source": "@site/docs/core-concepts/encryption.md",
  "sourceDirName": "core-concepts",
  "slug": "/core-concepts/encryption",
  "permalink": "/core-concepts/encryption",
  "draft": false,
  "unlisted": false,
  "tags": [],
  "version": "current",
  "lastUpdatedAt": 1539502055000,
  "frontMatter": {},
  "sidebar": "docs",
  "previous": {
    "title": "PipeBundle",
    "permalink": "/core-concepts/pipebundle"
  },
  "next": {
    "title": "Inline vs. Referenced Content",
    "permalink": "/core-concepts/inline-referenced"
  }
}

================
File: pipe-docs/website/.docusaurus/docusaurus-plugin-content-docs/default/site-docs-core-concepts-inline-referenced-md-231.json
================
{
  "id": "core-concepts/inline-referenced",
  "title": "Inline vs. Referenced Content",
  "description": "The Pipe protocol supports two methods of storing content: inline and referenced. Each approach has its own advantages and use cases.",
  "source": "@site/docs/core-concepts/inline-referenced.md",
  "sourceDirName": "core-concepts",
  "slug": "/core-concepts/inline-referenced",
  "permalink": "/core-concepts/inline-referenced",
  "draft": false,
  "unlisted": false,
  "tags": [],
  "version": "current",
  "lastUpdatedAt": 1539502055000,
  "frontMatter": {},
  "sidebar": "docs",
  "previous": {
    "title": "Encryption and Hidden-from-LLM Data",
    "permalink": "/core-concepts/encryption"
  },
  "next": {
    "title": "Fetching Data and Schema",
    "permalink": "/usage-examples/fetch-data"
  }
}

================
File: pipe-docs/website/.docusaurus/docusaurus-plugin-content-docs/default/site-docs-core-concepts-pipebundle-md-6a7.json
================
{
  "id": "core-concepts/pipebundle",
  "title": "PipeBundle",
  "description": "A PipeBundle combines a schema and data record, providing a way to package related schema and data together. This is particularly useful when a piece of data has a defined schema that describes its structure.",
  "source": "@site/docs/core-concepts/pipebundle.md",
  "sourceDirName": "core-concepts",
  "slug": "/core-concepts/pipebundle",
  "permalink": "/core-concepts/pipebundle",
  "draft": false,
  "unlisted": false,
  "tags": [],
  "version": "current",
  "lastUpdatedAt": 1539502055000,
  "frontMatter": {},
  "sidebar": "docs",
  "previous": {
    "title": "PipeRecord",
    "permalink": "/core-concepts/piperecord"
  },
  "next": {
    "title": "Encryption and Hidden-from-LLM Data",
    "permalink": "/core-concepts/encryption"
  }
}

================
File: pipe-docs/website/.docusaurus/docusaurus-plugin-content-docs/default/site-docs-core-concepts-piperecord-md-f4d.json
================
{
  "id": "core-concepts/piperecord",
  "title": "PipeRecord",
  "description": "A PipeRecord is the fundamental data structure in the Pipe protocol. It represents a single piece of content—either data or schema—that can be referenced by a CID or optionally stored inline.",
  "source": "@site/docs/core-concepts/piperecord.md",
  "sourceDirName": "core-concepts",
  "slug": "/core-concepts/piperecord",
  "permalink": "/core-concepts/piperecord",
  "draft": false,
  "unlisted": false,
  "tags": [],
  "version": "current",
  "lastUpdatedAt": 1539502055000,
  "frontMatter": {},
  "sidebar": "docs",
  "previous": {
    "title": "Scopes",
    "permalink": "/core-concepts/scopes"
  },
  "next": {
    "title": "PipeBundle",
    "permalink": "/core-concepts/pipebundle"
  }
}

================
File: pipe-docs/website/.docusaurus/docusaurus-plugin-content-docs/default/site-docs-core-concepts-scopes-md-417.json
================
{
  "id": "core-concepts/scopes",
  "title": "Scopes",
  "description": "In the Pipe protocol, scopes determine how and where data is stored and accessed. Each scope has specific characteristics and use cases.",
  "source": "@site/docs/core-concepts/scopes.md",
  "sourceDirName": "core-concepts",
  "slug": "/core-concepts/scopes",
  "permalink": "/core-concepts/scopes",
  "draft": false,
  "unlisted": false,
  "tags": [],
  "version": "current",
  "lastUpdatedAt": 1539502055000,
  "frontMatter": {},
  "sidebar": "docs",
  "previous": {
    "title": "Terminology",
    "permalink": "/core-concepts/terminology"
  },
  "next": {
    "title": "PipeRecord",
    "permalink": "/core-concepts/piperecord"
  }
}

================
File: pipe-docs/website/.docusaurus/docusaurus-plugin-content-docs/default/site-docs-core-concepts-terminology-md-7d7.json
================
{
  "id": "core-concepts/terminology",
  "title": "Terminology",
  "description": "This section defines key terms used throughout the Pipe protocol documentation.",
  "source": "@site/docs/core-concepts/terminology.md",
  "sourceDirName": "core-concepts",
  "slug": "/core-concepts/terminology",
  "permalink": "/core-concepts/terminology",
  "draft": false,
  "unlisted": false,
  "tags": [],
  "version": "current",
  "lastUpdatedAt": 1539502055000,
  "frontMatter": {},
  "sidebar": "docs",
  "previous": {
    "title": "How Pipe Solves the Problem",
    "permalink": "/introduction/solution"
  },
  "next": {
    "title": "Scopes",
    "permalink": "/core-concepts/scopes"
  }
}

================
File: pipe-docs/website/.docusaurus/docusaurus-plugin-content-docs/default/site-docs-intro-md-0e3.json
================
{
  "id": "intro",
  "title": "Tutorial Intro",
  "description": "Let's discover Docusaurus in less than 5 minutes.",
  "source": "@site/docs/intro.md",
  "sourceDirName": ".",
  "slug": "/intro",
  "permalink": "/intro",
  "draft": false,
  "unlisted": false,
  "tags": [],
  "version": "current",
  "lastUpdatedAt": 1539502055000,
  "sidebarPosition": 1,
  "frontMatter": {
    "sidebar_position": 1
  },
  "sidebar": "docs",
  "next": {
    "title": "Pipe Protocol Overview",
    "permalink": "/introduction/overview"
  }
}

================
File: pipe-docs/website/.docusaurus/docusaurus-plugin-content-docs/default/site-docs-introduction-overview-md-761.json
================
{
  "id": "introduction/overview",
  "title": "Pipe Protocol Overview",
  "description": "Pipe is a protocol designed for efficient data handling in multi-agent Large Language Model (LLM) systems. It allows agents to share and reference large or structured data through IPFS (InterPlanetary File System), minimizing context overload and improving scalability.",
  "source": "@site/docs/introduction/overview.md",
  "sourceDirName": "introduction",
  "slug": "/introduction/overview",
  "permalink": "/introduction/overview",
  "draft": false,
  "unlisted": false,
  "tags": [],
  "version": "current",
  "lastUpdatedAt": 1539502055000,
  "frontMatter": {},
  "sidebar": "docs",
  "previous": {
    "title": "Tutorial Intro",
    "permalink": "/intro"
  },
  "next": {
    "title": "The Problem Pipe Solves",
    "permalink": "/introduction/problem"
  }
}

================
File: pipe-docs/website/.docusaurus/docusaurus-plugin-content-docs/default/site-docs-introduction-problem-md-20e.json
================
{
  "id": "introduction/problem",
  "title": "The Problem Pipe Solves",
  "description": "In multi-agent LLM systems, agents often exchange state by directly passing large data inline. This approach leads to several critical issues:",
  "source": "@site/docs/introduction/problem.md",
  "sourceDirName": "introduction",
  "slug": "/introduction/problem",
  "permalink": "/introduction/problem",
  "draft": false,
  "unlisted": false,
  "tags": [],
  "version": "current",
  "lastUpdatedAt": 1539502055000,
  "frontMatter": {},
  "sidebar": "docs",
  "previous": {
    "title": "Pipe Protocol Overview",
    "permalink": "/introduction/overview"
  },
  "next": {
    "title": "How Pipe Solves the Problem",
    "permalink": "/introduction/solution"
  }
}

================
File: pipe-docs/website/.docusaurus/docusaurus-plugin-content-docs/default/site-docs-introduction-solution-md-167.json
================
{
  "id": "introduction/solution",
  "title": "How Pipe Solves the Problem",
  "description": "Pipe provides a comprehensive solution to the challenges of data handling in multi-agent LLM systems through several key mechanisms:",
  "source": "@site/docs/introduction/solution.md",
  "sourceDirName": "introduction",
  "slug": "/introduction/solution",
  "permalink": "/introduction/solution",
  "draft": false,
  "unlisted": false,
  "tags": [],
  "version": "current",
  "lastUpdatedAt": 1539502055000,
  "frontMatter": {},
  "sidebar": "docs",
  "previous": {
    "title": "The Problem Pipe Solves",
    "permalink": "/introduction/problem"
  },
  "next": {
    "title": "Terminology",
    "permalink": "/core-concepts/terminology"
  }
}

================
File: pipe-docs/website/.docusaurus/docusaurus-plugin-content-docs/default/site-docs-tutorial-basics-congratulations-md-822.json
================
{
  "id": "tutorial-basics/congratulations",
  "title": "Congratulations!",
  "description": "You have just learned the basics of Docusaurus and made some changes to the initial template.",
  "source": "@site/docs/tutorial-basics/congratulations.md",
  "sourceDirName": "tutorial-basics",
  "slug": "/tutorial-basics/congratulations",
  "permalink": "/tutorial-basics/congratulations",
  "draft": false,
  "unlisted": false,
  "tags": [],
  "version": "current",
  "lastUpdatedAt": 1539502055000,
  "sidebarPosition": 6,
  "frontMatter": {
    "sidebar_position": 6
  }
}

================
File: pipe-docs/website/.docusaurus/docusaurus-plugin-content-docs/default/site-docs-tutorial-basics-create-a-blog-post-md-533.json
================
{
  "id": "tutorial-basics/create-a-blog-post",
  "title": "Create a Blog Post",
  "description": "Docusaurus creates a page for each blog post, but also a blog index page, a tag system, an RSS feed...",
  "source": "@site/docs/tutorial-basics/create-a-blog-post.md",
  "sourceDirName": "tutorial-basics",
  "slug": "/tutorial-basics/create-a-blog-post",
  "permalink": "/tutorial-basics/create-a-blog-post",
  "draft": false,
  "unlisted": false,
  "tags": [],
  "version": "current",
  "lastUpdatedAt": 1539502055000,
  "sidebarPosition": 3,
  "frontMatter": {
    "sidebar_position": 3
  }
}

================
File: pipe-docs/website/.docusaurus/docusaurus-plugin-content-docs/default/site-docs-tutorial-basics-create-a-document-md-1e4.json
================
{
  "id": "tutorial-basics/create-a-document",
  "title": "Create a Document",
  "description": "Documents are groups of pages connected through:",
  "source": "@site/docs/tutorial-basics/create-a-document.md",
  "sourceDirName": "tutorial-basics",
  "slug": "/tutorial-basics/create-a-document",
  "permalink": "/tutorial-basics/create-a-document",
  "draft": false,
  "unlisted": false,
  "tags": [],
  "version": "current",
  "lastUpdatedAt": 1539502055000,
  "sidebarPosition": 2,
  "frontMatter": {
    "sidebar_position": 2
  }
}

================
File: pipe-docs/website/.docusaurus/docusaurus-plugin-content-docs/default/site-docs-tutorial-basics-create-a-page-md-5c8.json
================
{
  "id": "tutorial-basics/create-a-page",
  "title": "Create a Page",
  "description": "Add Markdown or React files to src/pages to create a standalone page:",
  "source": "@site/docs/tutorial-basics/create-a-page.md",
  "sourceDirName": "tutorial-basics",
  "slug": "/tutorial-basics/create-a-page",
  "permalink": "/tutorial-basics/create-a-page",
  "draft": false,
  "unlisted": false,
  "tags": [],
  "version": "current",
  "lastUpdatedAt": 1539502055000,
  "sidebarPosition": 1,
  "frontMatter": {
    "sidebar_position": 1
  }
}

================
File: pipe-docs/website/.docusaurus/docusaurus-plugin-content-docs/default/site-docs-tutorial-basics-deploy-your-site-md-f55.json
================
{
  "id": "tutorial-basics/deploy-your-site",
  "title": "Deploy your site",
  "description": "Docusaurus is a static-site-generator (also called Jamstack).",
  "source": "@site/docs/tutorial-basics/deploy-your-site.md",
  "sourceDirName": "tutorial-basics",
  "slug": "/tutorial-basics/deploy-your-site",
  "permalink": "/tutorial-basics/deploy-your-site",
  "draft": false,
  "unlisted": false,
  "tags": [],
  "version": "current",
  "lastUpdatedAt": 1539502055000,
  "sidebarPosition": 5,
  "frontMatter": {
    "sidebar_position": 5
  }
}

================
File: pipe-docs/website/.docusaurus/docusaurus-plugin-content-docs/default/site-docs-tutorial-basics-markdown-features-mdx-18c.json
================
{
  "id": "tutorial-basics/markdown-features",
  "title": "Markdown Features",
  "description": "Docusaurus supports Markdown and a few additional features.",
  "source": "@site/docs/tutorial-basics/markdown-features.mdx",
  "sourceDirName": "tutorial-basics",
  "slug": "/tutorial-basics/markdown-features",
  "permalink": "/tutorial-basics/markdown-features",
  "draft": false,
  "unlisted": false,
  "tags": [],
  "version": "current",
  "lastUpdatedAt": 1539502055000,
  "sidebarPosition": 4,
  "frontMatter": {
    "sidebar_position": 4
  }
}

================
File: pipe-docs/website/.docusaurus/docusaurus-plugin-content-docs/default/site-docs-tutorial-extras-manage-docs-versions-md-dff.json
================
{
  "id": "tutorial-extras/manage-docs-versions",
  "title": "Manage Docs Versions",
  "description": "Docusaurus can manage multiple versions of your docs.",
  "source": "@site/docs/tutorial-extras/manage-docs-versions.md",
  "sourceDirName": "tutorial-extras",
  "slug": "/tutorial-extras/manage-docs-versions",
  "permalink": "/tutorial-extras/manage-docs-versions",
  "draft": false,
  "unlisted": false,
  "tags": [],
  "version": "current",
  "lastUpdatedAt": 1539502055000,
  "sidebarPosition": 1,
  "frontMatter": {
    "sidebar_position": 1
  }
}

================
File: pipe-docs/website/.docusaurus/docusaurus-plugin-content-docs/default/site-docs-tutorial-extras-translate-your-site-md-e44.json
================
{
  "id": "tutorial-extras/translate-your-site",
  "title": "Translate your site",
  "description": "Let's translate docs/intro.md to French.",
  "source": "@site/docs/tutorial-extras/translate-your-site.md",
  "sourceDirName": "tutorial-extras",
  "slug": "/tutorial-extras/translate-your-site",
  "permalink": "/tutorial-extras/translate-your-site",
  "draft": false,
  "unlisted": false,
  "tags": [],
  "version": "current",
  "lastUpdatedAt": 1539502055000,
  "sidebarPosition": 2,
  "frontMatter": {
    "sidebar_position": 2
  }
}

================
File: pipe-docs/website/.docusaurus/docusaurus-plugin-content-docs/default/site-docs-usage-examples-fetch-data-md-513.json
================
{
  "id": "usage-examples/fetch-data",
  "title": "Fetching Data and Schema",
  "description": "This guide demonstrates how to fetch data and schema records using the Pipe protocol. We'll cover various scenarios including inline content, referenced content, and encrypted data.",
  "source": "@site/docs/usage-examples/fetch-data.md",
  "sourceDirName": "usage-examples",
  "slug": "/usage-examples/fetch-data",
  "permalink": "/usage-examples/fetch-data",
  "draft": false,
  "unlisted": false,
  "tags": [],
  "version": "current",
  "lastUpdatedAt": 1539502055000,
  "frontMatter": {},
  "sidebar": "docs",
  "previous": {
    "title": "Inline vs. Referenced Content",
    "permalink": "/core-concepts/inline-referenced"
  },
  "next": {
    "title": "Working with Bundles",
    "permalink": "/usage-examples/work-bundles"
  }
}

================
File: pipe-docs/website/.docusaurus/docusaurus-plugin-content-docs/default/site-docs-usage-examples-pin-unpin-md-8de.json
================
{
  "id": "usage-examples/pin-unpin",
  "title": "Managing Pinned Content",
  "description": "This guide demonstrates how to manage pinned content in the Pipe protocol. We'll cover pinning, unpinning, and various strategies for content retention.",
  "source": "@site/docs/usage-examples/pin-unpin.md",
  "sourceDirName": "usage-examples",
  "slug": "/usage-examples/pin-unpin",
  "permalink": "/usage-examples/pin-unpin",
  "draft": false,
  "unlisted": false,
  "tags": [],
  "version": "current",
  "lastUpdatedAt": 1539502055000,
  "frontMatter": {},
  "sidebar": "docs",
  "previous": {
    "title": "Publishing Hidden Data",
    "permalink": "/usage-examples/publish-hidden-data"
  },
  "next": {
    "title": "Replicating Data",
    "permalink": "/usage-examples/replicate-data"
  }
}

================
File: pipe-docs/website/.docusaurus/docusaurus-plugin-content-docs/default/site-docs-usage-examples-publish-data-md-b8d.json
================
{
  "id": "usage-examples/publish-data",
  "title": "Publishing Data and Schema",
  "description": "This guide demonstrates how to publish data and schema records using the Pipe protocol.",
  "source": "@site/docs/usage-examples/publish-data.md",
  "sourceDirName": "usage-examples",
  "slug": "/usage-examples/publish-data",
  "permalink": "/usage-examples/publish-data",
  "draft": false,
  "unlisted": false,
  "tags": [],
  "version": "current",
  "lastUpdatedAt": 1539502055000,
  "frontMatter": {},
  "sidebar": "docs",
  "previous": {
    "title": "Replicating Data",
    "permalink": "/usage-examples/replicate-data"
  },
  "next": {
    "title": "GET /node-status",
    "permalink": "/api-reference/node-status"
  }
}

================
File: pipe-docs/website/.docusaurus/docusaurus-plugin-content-docs/default/site-docs-usage-examples-publish-hidden-data-md-7d3.json
================
{
  "id": "usage-examples/publish-hidden-data",
  "title": "Publishing Hidden Data",
  "description": "This guide demonstrates how to publish data that should be hidden from Large Language Models (LLMs) using the Pipe protocol. We'll cover various scenarios including encryption, access policies, and tool-specific access.",
  "source": "@site/docs/usage-examples/publish-hidden-data.md",
  "sourceDirName": "usage-examples",
  "slug": "/usage-examples/publish-hidden-data",
  "permalink": "/usage-examples/publish-hidden-data",
  "draft": false,
  "unlisted": false,
  "tags": [],
  "version": "current",
  "lastUpdatedAt": 1539502055000,
  "frontMatter": {},
  "sidebar": "docs",
  "previous": {
    "title": "Working with Bundles",
    "permalink": "/usage-examples/work-bundles"
  },
  "next": {
    "title": "Managing Pinned Content",
    "permalink": "/usage-examples/pin-unpin"
  }
}

================
File: pipe-docs/website/.docusaurus/docusaurus-plugin-content-docs/default/site-docs-usage-examples-replicate-data-md-d94.json
================
{
  "id": "usage-examples/replicate-data",
  "title": "Replicating Data",
  "description": "This guide demonstrates how to replicate data between different scopes in the Pipe protocol. We'll cover various replication scenarios and best practices for data distribution.",
  "source": "@site/docs/usage-examples/replicate-data.md",
  "sourceDirName": "usage-examples",
  "slug": "/usage-examples/replicate-data",
  "permalink": "/usage-examples/replicate-data",
  "draft": false,
  "unlisted": false,
  "tags": [],
  "version": "current",
  "lastUpdatedAt": 1539502055000,
  "frontMatter": {},
  "sidebar": "docs",
  "previous": {
    "title": "Managing Pinned Content",
    "permalink": "/usage-examples/pin-unpin"
  },
  "next": {
    "title": "Publishing Data and Schema",
    "permalink": "/usage-examples/publish-data"
  }
}

================
File: pipe-docs/website/.docusaurus/docusaurus-plugin-content-docs/default/site-docs-usage-examples-work-bundles-md-16e.json
================
{
  "id": "usage-examples/work-bundles",
  "title": "Working with Bundles",
  "description": "This guide demonstrates how to work with PipeBundle objects in the Pipe protocol. We'll cover creating, publishing, and fetching bundles that combine schema and data records.",
  "source": "@site/docs/usage-examples/work-bundles.md",
  "sourceDirName": "usage-examples",
  "slug": "/usage-examples/work-bundles",
  "permalink": "/usage-examples/work-bundles",
  "draft": false,
  "unlisted": false,
  "tags": [],
  "version": "current",
  "lastUpdatedAt": 1539502055000,
  "frontMatter": {},
  "sidebar": "docs",
  "previous": {
    "title": "Fetching Data and Schema",
    "permalink": "/usage-examples/fetch-data"
  },
  "next": {
    "title": "Publishing Hidden Data",
    "permalink": "/usage-examples/publish-hidden-data"
  }
}

================
File: pipe-docs/website/.docusaurus/docusaurus-plugin-content-pages/default/__plugin.json
================
{
  "name": "docusaurus-plugin-content-pages",
  "id": "default"
}

================
File: pipe-docs/website/.docusaurus/docusaurus-plugin-content-pages/default/site-src-pages-markdown-page-md-393.json
================
{
  "type": "mdx",
  "permalink": "/markdown-page",
  "source": "@site/src/pages/markdown-page.md",
  "title": "Markdown page example",
  "description": "You don't need React to write simple standalone pages.",
  "frontMatter": {
    "title": "Markdown page example"
  },
  "unlisted": false
}

================
File: pipe-docs/website/.docusaurus/docusaurus-plugin-debug/default/p/docusaurus-debug-content-0d5.json
================
{"allContent":{"docusaurus-plugin-content-docs":{"default":{"loadedVersions":[{"versionName":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","path":"/","tagsPath":"/tags","isLast":true,"routePriority":-1,"sidebarFilePath":"/Users/dennisonbertram/Develop/pipe/pipe-docs/website/sidebars.ts","contentPath":"/Users/dennisonbertram/Develop/pipe/pipe-docs/website/docs","contentPathLocalized":"/Users/dennisonbertram/Develop/pipe/pipe-docs/website/i18n/en/docusaurus-plugin-content-docs/current","docs":[{"id":"api-reference/configuration","title":"GET /configuration","description":"Returns the current configuration of a specified IPFS node. This endpoint provides detailed information about node settings, network configuration, and runtime parameters.","source":"@site/docs/api-reference/configuration.md","sourceDirName":"api-reference","slug":"/api-reference/configuration","permalink":"/api-reference/configuration","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedAt":1539502055000,"frontMatter":{},"sidebar":"docs","previous":{"title":"GET /pinned-cids","permalink":"/api-reference/pinned-cids"},"next":{"title":"GET /fetch","permalink":"/api-reference/fetch"}},{"id":"api-reference/fetch","title":"GET /fetch","description":"Fetches a PipeRecord by its CID from a specified scope. This endpoint retrieves both the record metadata and its content, if available.","source":"@site/docs/api-reference/fetch.md","sourceDirName":"api-reference","slug":"/api-reference/fetch","permalink":"/api-reference/fetch","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedAt":1539502055000,"frontMatter":{},"sidebar":"docs","previous":{"title":"GET /configuration","permalink":"/api-reference/configuration"},"next":{"title":"POST /publish","permalink":"/api-reference/publish"}},{"id":"api-reference/node-info","title":"GET /node-info","description":"Returns detailed information about a specific IPFS node managed by the Pipe protocol. This endpoint provides configuration and identity information for either the private or public node.","source":"@site/docs/api-reference/node-info.md","sourceDirName":"api-reference","slug":"/api-reference/node-info","permalink":"/api-reference/node-info","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedAt":1539502055000,"frontMatter":{},"sidebar":"docs","previous":{"title":"GET /node-status","permalink":"/api-reference/node-status"},"next":{"title":"GET /storage-metrics","permalink":"/api-reference/storage-metrics"}},{"id":"api-reference/node-status","title":"GET /node-status","description":"Returns the status of the IPFS nodes managed by the Pipe protocol. This endpoint provides information about the availability and health of both private and public nodes.","source":"@site/docs/api-reference/node-status.md","sourceDirName":"api-reference","slug":"/api-reference/node-status","permalink":"/api-reference/node-status","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedAt":1539502055000,"frontMatter":{},"sidebar":"docs","previous":{"title":"Publishing Data and Schema","permalink":"/usage-examples/publish-data"},"next":{"title":"GET /node-info","permalink":"/api-reference/node-info"}},{"id":"api-reference/pin","title":"POST /pin","description":"Pins a CID in a specified scope, preventing it from being garbage collected. Pinned content remains available until explicitly unpinned.","source":"@site/docs/api-reference/pin.md","sourceDirName":"api-reference","slug":"/api-reference/pin","permalink":"/api-reference/pin","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedAt":1539502055000,"frontMatter":{},"sidebar":"docs","previous":{"title":"POST /publish-bundle","permalink":"/api-reference/publish-bundle"},"next":{"title":"POST /unpin","permalink":"/api-reference/unpin"}},{"id":"api-reference/pinned-cids","title":"GET /pinned-cids","description":"Returns a list of Content Identifiers (CIDs) that are currently pinned in a specified scope. This endpoint provides information about pinned content and their metadata.","source":"@site/docs/api-reference/pinned-cids.md","sourceDirName":"api-reference","slug":"/api-reference/pinned-cids","permalink":"/api-reference/pinned-cids","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedAt":1539502055000,"frontMatter":{},"sidebar":"docs","previous":{"title":"GET /storage-metrics","permalink":"/api-reference/storage-metrics"},"next":{"title":"GET /configuration","permalink":"/api-reference/configuration"}},{"id":"api-reference/publish","title":"POST /publish","description":"Publishes a single PipeRecord to IPFS. This endpoint handles both inline content and referenced data, with support for encryption and access control.","source":"@site/docs/api-reference/publish.md","sourceDirName":"api-reference","slug":"/api-reference/publish","permalink":"/api-reference/publish","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedAt":1539502055000,"frontMatter":{},"sidebar":"docs","previous":{"title":"GET /fetch","permalink":"/api-reference/fetch"},"next":{"title":"POST /publish-bundle","permalink":"/api-reference/publish-bundle"}},{"id":"api-reference/publish-bundle","title":"POST /publish-bundle","description":"Publishes a PipeBundle containing both schema and data records. This endpoint handles the creation and storage of related schema and data content as a single unit.","source":"@site/docs/api-reference/publish-bundle.md","sourceDirName":"api-reference","slug":"/api-reference/publish-bundle","permalink":"/api-reference/publish-bundle","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedAt":1539502055000,"frontMatter":{},"sidebar":"docs","previous":{"title":"POST /publish","permalink":"/api-reference/publish"},"next":{"title":"POST /pin","permalink":"/api-reference/pin"}},{"id":"api-reference/replicate","title":"POST /replicate","description":"Replicates content from one scope to another. This endpoint is primarily used to move content between private and public scopes, enabling controlled sharing of data.","source":"@site/docs/api-reference/replicate.md","sourceDirName":"api-reference","slug":"/api-reference/replicate","permalink":"/api-reference/replicate","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedAt":1539502055000,"frontMatter":{},"sidebar":"docs","previous":{"title":"POST /unpin","permalink":"/api-reference/unpin"}},{"id":"api-reference/storage-metrics","title":"GET /storage-metrics","description":"Returns storage usage metrics for a specified IPFS node. This endpoint provides detailed information about storage consumption, including repository size, content distribution, and pinned data metrics.","source":"@site/docs/api-reference/storage-metrics.md","sourceDirName":"api-reference","slug":"/api-reference/storage-metrics","permalink":"/api-reference/storage-metrics","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedAt":1539502055000,"frontMatter":{},"sidebar":"docs","previous":{"title":"GET /node-info","permalink":"/api-reference/node-info"},"next":{"title":"GET /pinned-cids","permalink":"/api-reference/pinned-cids"}},{"id":"api-reference/unpin","title":"POST /unpin","description":"Unpins a CID from a specified scope, allowing it to be garbage collected if no other pins exist. This endpoint is used to manage storage by removing pins from content that is no longer needed.","source":"@site/docs/api-reference/unpin.md","sourceDirName":"api-reference","slug":"/api-reference/unpin","permalink":"/api-reference/unpin","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedAt":1539502055000,"frontMatter":{},"sidebar":"docs","previous":{"title":"POST /pin","permalink":"/api-reference/pin"},"next":{"title":"POST /replicate","permalink":"/api-reference/replicate"}},{"id":"core-concepts/encryption","title":"Encryption and Hidden-from-LLM Data","description":"The Pipe protocol provides robust encryption capabilities, allowing data to be securely stored and optionally hidden from LLMs. This document explains the encryption features and how to use them effectively.","source":"@site/docs/core-concepts/encryption.md","sourceDirName":"core-concepts","slug":"/core-concepts/encryption","permalink":"/core-concepts/encryption","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedAt":1539502055000,"frontMatter":{},"sidebar":"docs","previous":{"title":"PipeBundle","permalink":"/core-concepts/pipebundle"},"next":{"title":"Inline vs. Referenced Content","permalink":"/core-concepts/inline-referenced"}},{"id":"core-concepts/inline-referenced","title":"Inline vs. Referenced Content","description":"The Pipe protocol supports two methods of storing content: inline and referenced. Each approach has its own advantages and use cases.","source":"@site/docs/core-concepts/inline-referenced.md","sourceDirName":"core-concepts","slug":"/core-concepts/inline-referenced","permalink":"/core-concepts/inline-referenced","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedAt":1539502055000,"frontMatter":{},"sidebar":"docs","previous":{"title":"Encryption and Hidden-from-LLM Data","permalink":"/core-concepts/encryption"},"next":{"title":"Fetching Data and Schema","permalink":"/usage-examples/fetch-data"}},{"id":"core-concepts/pipebundle","title":"PipeBundle","description":"A PipeBundle combines a schema and data record, providing a way to package related schema and data together. This is particularly useful when a piece of data has a defined schema that describes its structure.","source":"@site/docs/core-concepts/pipebundle.md","sourceDirName":"core-concepts","slug":"/core-concepts/pipebundle","permalink":"/core-concepts/pipebundle","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedAt":1539502055000,"frontMatter":{},"sidebar":"docs","previous":{"title":"PipeRecord","permalink":"/core-concepts/piperecord"},"next":{"title":"Encryption and Hidden-from-LLM Data","permalink":"/core-concepts/encryption"}},{"id":"core-concepts/piperecord","title":"PipeRecord","description":"A PipeRecord is the fundamental data structure in the Pipe protocol. It represents a single piece of content—either data or schema—that can be referenced by a CID or optionally stored inline.","source":"@site/docs/core-concepts/piperecord.md","sourceDirName":"core-concepts","slug":"/core-concepts/piperecord","permalink":"/core-concepts/piperecord","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedAt":1539502055000,"frontMatter":{},"sidebar":"docs","previous":{"title":"Scopes","permalink":"/core-concepts/scopes"},"next":{"title":"PipeBundle","permalink":"/core-concepts/pipebundle"}},{"id":"core-concepts/scopes","title":"Scopes","description":"In the Pipe protocol, scopes determine how and where data is stored and accessed. Each scope has specific characteristics and use cases.","source":"@site/docs/core-concepts/scopes.md","sourceDirName":"core-concepts","slug":"/core-concepts/scopes","permalink":"/core-concepts/scopes","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedAt":1539502055000,"frontMatter":{},"sidebar":"docs","previous":{"title":"Terminology","permalink":"/core-concepts/terminology"},"next":{"title":"PipeRecord","permalink":"/core-concepts/piperecord"}},{"id":"core-concepts/terminology","title":"Terminology","description":"This section defines key terms used throughout the Pipe protocol documentation.","source":"@site/docs/core-concepts/terminology.md","sourceDirName":"core-concepts","slug":"/core-concepts/terminology","permalink":"/core-concepts/terminology","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedAt":1539502055000,"frontMatter":{},"sidebar":"docs","previous":{"title":"How Pipe Solves the Problem","permalink":"/introduction/solution"},"next":{"title":"Scopes","permalink":"/core-concepts/scopes"}},{"id":"intro","title":"Tutorial Intro","description":"Let's discover Docusaurus in less than 5 minutes.","source":"@site/docs/intro.md","sourceDirName":".","slug":"/intro","permalink":"/intro","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedAt":1539502055000,"sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"docs","next":{"title":"Pipe Protocol Overview","permalink":"/introduction/overview"}},{"id":"introduction/overview","title":"Pipe Protocol Overview","description":"Pipe is a protocol designed for efficient data handling in multi-agent Large Language Model (LLM) systems. It allows agents to share and reference large or structured data through IPFS (InterPlanetary File System), minimizing context overload and improving scalability.","source":"@site/docs/introduction/overview.md","sourceDirName":"introduction","slug":"/introduction/overview","permalink":"/introduction/overview","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedAt":1539502055000,"frontMatter":{},"sidebar":"docs","previous":{"title":"Tutorial Intro","permalink":"/intro"},"next":{"title":"The Problem Pipe Solves","permalink":"/introduction/problem"}},{"id":"introduction/problem","title":"The Problem Pipe Solves","description":"In multi-agent LLM systems, agents often exchange state by directly passing large data inline. This approach leads to several critical issues:","source":"@site/docs/introduction/problem.md","sourceDirName":"introduction","slug":"/introduction/problem","permalink":"/introduction/problem","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedAt":1539502055000,"frontMatter":{},"sidebar":"docs","previous":{"title":"Pipe Protocol Overview","permalink":"/introduction/overview"},"next":{"title":"How Pipe Solves the Problem","permalink":"/introduction/solution"}},{"id":"introduction/solution","title":"How Pipe Solves the Problem","description":"Pipe provides a comprehensive solution to the challenges of data handling in multi-agent LLM systems through several key mechanisms:","source":"@site/docs/introduction/solution.md","sourceDirName":"introduction","slug":"/introduction/solution","permalink":"/introduction/solution","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedAt":1539502055000,"frontMatter":{},"sidebar":"docs","previous":{"title":"The Problem Pipe Solves","permalink":"/introduction/problem"},"next":{"title":"Terminology","permalink":"/core-concepts/terminology"}},{"id":"tutorial-basics/congratulations","title":"Congratulations!","description":"You have just learned the basics of Docusaurus and made some changes to the initial template.","source":"@site/docs/tutorial-basics/congratulations.md","sourceDirName":"tutorial-basics","slug":"/tutorial-basics/congratulations","permalink":"/tutorial-basics/congratulations","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedAt":1539502055000,"sidebarPosition":6,"frontMatter":{"sidebar_position":6}},{"id":"tutorial-basics/create-a-blog-post","title":"Create a Blog Post","description":"Docusaurus creates a page for each blog post, but also a blog index page, a tag system, an RSS feed...","source":"@site/docs/tutorial-basics/create-a-blog-post.md","sourceDirName":"tutorial-basics","slug":"/tutorial-basics/create-a-blog-post","permalink":"/tutorial-basics/create-a-blog-post","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedAt":1539502055000,"sidebarPosition":3,"frontMatter":{"sidebar_position":3}},{"id":"tutorial-basics/create-a-document","title":"Create a Document","description":"Documents are groups of pages connected through:","source":"@site/docs/tutorial-basics/create-a-document.md","sourceDirName":"tutorial-basics","slug":"/tutorial-basics/create-a-document","permalink":"/tutorial-basics/create-a-document","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedAt":1539502055000,"sidebarPosition":2,"frontMatter":{"sidebar_position":2}},{"id":"tutorial-basics/create-a-page","title":"Create a Page","description":"Add Markdown or React files to src/pages to create a standalone page:","source":"@site/docs/tutorial-basics/create-a-page.md","sourceDirName":"tutorial-basics","slug":"/tutorial-basics/create-a-page","permalink":"/tutorial-basics/create-a-page","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedAt":1539502055000,"sidebarPosition":1,"frontMatter":{"sidebar_position":1}},{"id":"tutorial-basics/deploy-your-site","title":"Deploy your site","description":"Docusaurus is a static-site-generator (also called Jamstack).","source":"@site/docs/tutorial-basics/deploy-your-site.md","sourceDirName":"tutorial-basics","slug":"/tutorial-basics/deploy-your-site","permalink":"/tutorial-basics/deploy-your-site","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedAt":1539502055000,"sidebarPosition":5,"frontMatter":{"sidebar_position":5}},{"id":"tutorial-basics/markdown-features","title":"Markdown Features","description":"Docusaurus supports Markdown and a few additional features.","source":"@site/docs/tutorial-basics/markdown-features.mdx","sourceDirName":"tutorial-basics","slug":"/tutorial-basics/markdown-features","permalink":"/tutorial-basics/markdown-features","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedAt":1539502055000,"sidebarPosition":4,"frontMatter":{"sidebar_position":4}},{"id":"tutorial-extras/manage-docs-versions","title":"Manage Docs Versions","description":"Docusaurus can manage multiple versions of your docs.","source":"@site/docs/tutorial-extras/manage-docs-versions.md","sourceDirName":"tutorial-extras","slug":"/tutorial-extras/manage-docs-versions","permalink":"/tutorial-extras/manage-docs-versions","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedAt":1539502055000,"sidebarPosition":1,"frontMatter":{"sidebar_position":1}},{"id":"tutorial-extras/translate-your-site","title":"Translate your site","description":"Let's translate docs/intro.md to French.","source":"@site/docs/tutorial-extras/translate-your-site.md","sourceDirName":"tutorial-extras","slug":"/tutorial-extras/translate-your-site","permalink":"/tutorial-extras/translate-your-site","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedAt":1539502055000,"sidebarPosition":2,"frontMatter":{"sidebar_position":2}},{"id":"usage-examples/fetch-data","title":"Fetching Data and Schema","description":"This guide demonstrates how to fetch data and schema records using the Pipe protocol. We'll cover various scenarios including inline content, referenced content, and encrypted data.","source":"@site/docs/usage-examples/fetch-data.md","sourceDirName":"usage-examples","slug":"/usage-examples/fetch-data","permalink":"/usage-examples/fetch-data","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedAt":1539502055000,"frontMatter":{},"sidebar":"docs","previous":{"title":"Inline vs. Referenced Content","permalink":"/core-concepts/inline-referenced"},"next":{"title":"Working with Bundles","permalink":"/usage-examples/work-bundles"}},{"id":"usage-examples/pin-unpin","title":"Managing Pinned Content","description":"This guide demonstrates how to manage pinned content in the Pipe protocol. We'll cover pinning, unpinning, and various strategies for content retention.","source":"@site/docs/usage-examples/pin-unpin.md","sourceDirName":"usage-examples","slug":"/usage-examples/pin-unpin","permalink":"/usage-examples/pin-unpin","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedAt":1539502055000,"frontMatter":{},"sidebar":"docs","previous":{"title":"Publishing Hidden Data","permalink":"/usage-examples/publish-hidden-data"},"next":{"title":"Replicating Data","permalink":"/usage-examples/replicate-data"}},{"id":"usage-examples/publish-data","title":"Publishing Data and Schema","description":"This guide demonstrates how to publish data and schema records using the Pipe protocol.","source":"@site/docs/usage-examples/publish-data.md","sourceDirName":"usage-examples","slug":"/usage-examples/publish-data","permalink":"/usage-examples/publish-data","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedAt":1539502055000,"frontMatter":{},"sidebar":"docs","previous":{"title":"Replicating Data","permalink":"/usage-examples/replicate-data"},"next":{"title":"GET /node-status","permalink":"/api-reference/node-status"}},{"id":"usage-examples/publish-hidden-data","title":"Publishing Hidden Data","description":"This guide demonstrates how to publish data that should be hidden from Large Language Models (LLMs) using the Pipe protocol. We'll cover various scenarios including encryption, access policies, and tool-specific access.","source":"@site/docs/usage-examples/publish-hidden-data.md","sourceDirName":"usage-examples","slug":"/usage-examples/publish-hidden-data","permalink":"/usage-examples/publish-hidden-data","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedAt":1539502055000,"frontMatter":{},"sidebar":"docs","previous":{"title":"Working with Bundles","permalink":"/usage-examples/work-bundles"},"next":{"title":"Managing Pinned Content","permalink":"/usage-examples/pin-unpin"}},{"id":"usage-examples/replicate-data","title":"Replicating Data","description":"This guide demonstrates how to replicate data between different scopes in the Pipe protocol. We'll cover various replication scenarios and best practices for data distribution.","source":"@site/docs/usage-examples/replicate-data.md","sourceDirName":"usage-examples","slug":"/usage-examples/replicate-data","permalink":"/usage-examples/replicate-data","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedAt":1539502055000,"frontMatter":{},"sidebar":"docs","previous":{"title":"Managing Pinned Content","permalink":"/usage-examples/pin-unpin"},"next":{"title":"Publishing Data and Schema","permalink":"/usage-examples/publish-data"}},{"id":"usage-examples/work-bundles","title":"Working with Bundles","description":"This guide demonstrates how to work with PipeBundle objects in the Pipe protocol. We'll cover creating, publishing, and fetching bundles that combine schema and data records.","source":"@site/docs/usage-examples/work-bundles.md","sourceDirName":"usage-examples","slug":"/usage-examples/work-bundles","permalink":"/usage-examples/work-bundles","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedAt":1539502055000,"frontMatter":{},"sidebar":"docs","previous":{"title":"Fetching Data and Schema","permalink":"/usage-examples/fetch-data"},"next":{"title":"Publishing Hidden Data","permalink":"/usage-examples/publish-hidden-data"}}],"drafts":[],"sidebars":{"docs":[{"type":"category","label":"Introduction","items":[{"type":"doc","id":"intro"},{"type":"doc","id":"introduction/overview"},{"type":"doc","id":"introduction/problem"},{"type":"doc","id":"introduction/solution"}],"collapsed":false,"collapsible":true},{"type":"category","label":"Core Concepts","items":[{"type":"doc","id":"core-concepts/terminology"},{"type":"doc","id":"core-concepts/scopes"},{"type":"doc","id":"core-concepts/piperecord"},{"type":"doc","id":"core-concepts/pipebundle"},{"type":"doc","id":"core-concepts/encryption"},{"type":"doc","id":"core-concepts/inline-referenced"}],"collapsed":false,"collapsible":true},{"type":"category","label":"Usage Examples","items":[{"type":"doc","id":"usage-examples/fetch-data"},{"type":"doc","id":"usage-examples/work-bundles"},{"type":"doc","id":"usage-examples/publish-hidden-data"},{"type":"doc","id":"usage-examples/pin-unpin"},{"type":"doc","id":"usage-examples/replicate-data"},{"type":"doc","id":"usage-examples/publish-data"}],"collapsed":false,"collapsible":true},{"type":"category","label":"API Reference","items":[{"type":"doc","id":"api-reference/node-status"},{"type":"doc","id":"api-reference/node-info"},{"type":"doc","id":"api-reference/storage-metrics"},{"type":"doc","id":"api-reference/pinned-cids"},{"type":"doc","id":"api-reference/configuration"},{"type":"doc","id":"api-reference/fetch"},{"type":"doc","id":"api-reference/publish"},{"type":"doc","id":"api-reference/publish-bundle"},{"type":"doc","id":"api-reference/pin"},{"type":"doc","id":"api-reference/unpin"},{"type":"doc","id":"api-reference/replicate"}],"collapsed":false,"collapsible":true}]}}]}},"docusaurus-plugin-content-pages":{"default":[{"type":"jsx","permalink":"/","source":"@site/src/pages/index.tsx"},{"type":"mdx","permalink":"/markdown-page","source":"@site/src/pages/markdown-page.md","title":"Markdown page example","description":"You don't need React to write simple standalone pages.","frontMatter":{"title":"Markdown page example"},"unlisted":false}]},"docusaurus-plugin-debug":{},"docusaurus-plugin-svgr":{},"docusaurus-theme-classic":{},"docusaurus-bootstrap-plugin":{},"docusaurus-mdx-fallback-plugin":{}}}

================
File: pipe-docs/website/.docusaurus/docusaurus-plugin-debug/default/__plugin.json
================
{
  "name": "docusaurus-plugin-debug",
  "id": "default"
}

================
File: pipe-docs/website/.docusaurus/client-modules.js
================
export default [
  require("/Users/dennisonbertram/Develop/pipe/pipe-docs/website/node_modules/infima/dist/css/default/default.css"),
  require("/Users/dennisonbertram/Develop/pipe/pipe-docs/website/node_modules/@docusaurus/theme-classic/lib/prism-include-languages"),
  require("/Users/dennisonbertram/Develop/pipe/pipe-docs/website/node_modules/@docusaurus/theme-classic/lib/nprogress"),
  require("/Users/dennisonbertram/Develop/pipe/pipe-docs/website/src/css/custom.css"),
];

================
File: pipe-docs/website/.docusaurus/codeTranslations.json
================
{}

================
File: pipe-docs/website/.docusaurus/docusaurus.config.mjs
================
/*
 * AUTOGENERATED - DON'T EDIT
 * Your edits in this file will be overwritten in the next build!
 * Modify the docusaurus.config.js file at your site's root instead.
 */
export default {
  "title": "Pipe Protocol",
  "tagline": "A protocol for secure, decentralized data management",
  "favicon": "img/favicon.ico",
  "url": "https://pipe-protocol.io",
  "baseUrl": "/",
  "organizationName": "pipe",
  "projectName": "pipe",
  "onBrokenLinks": "throw",
  "onBrokenMarkdownLinks": "warn",
  "i18n": {
    "defaultLocale": "en",
    "locales": [
      "en"
    ],
    "path": "i18n",
    "localeConfigs": {}
  },
  "presets": [
    [
      "classic",
      {
        "docs": {
          "sidebarPath": "./sidebars.ts",
          "routeBasePath": "/",
          "breadcrumbs": true,
          "showLastUpdateTime": true,
          "sidebarCollapsed": false,
          "sidebarCollapsible": true
        },
        "blog": false,
        "theme": {
          "customCss": "./src/css/custom.css"
        }
      }
    ]
  ],
  "themeConfig": {
    "colorMode": {
      "defaultMode": "light",
      "disableSwitch": false,
      "respectPrefersColorScheme": true
    },
    "docs": {
      "sidebar": {
        "hideable": true,
        "autoCollapseCategories": false
      },
      "versionPersistence": "localStorage"
    },
    "navbar": {
      "hideOnScroll": true,
      "style": "primary",
      "title": "Pipe Protocol",
      "logo": {
        "alt": "Pipe Protocol Logo",
        "src": "img/logo.svg",
        "srcDark": "img/logo_dark.svg"
      },
      "items": [
        {
          "type": "docSidebar",
          "sidebarId": "docs",
          "position": "left",
          "label": "Documentation"
        },
        {
          "href": "https://github.com/pipe/pipe",
          "position": "right",
          "className": "header-github-link",
          "aria-label": "GitHub repository"
        }
      ]
    },
    "footer": {
      "style": "light",
      "links": [
        {
          "title": "Documentation",
          "items": [
            {
              "label": "Introduction",
              "to": "/intro"
            },
            {
              "label": "Core Concepts",
              "to": "/core-concepts/terminology"
            },
            {
              "label": "Usage Examples",
              "to": "/usage-examples/publish-data"
            }
          ]
        },
        {
          "title": "Community",
          "items": [
            {
              "label": "GitHub",
              "href": "https://github.com/pipe/pipe"
            }
          ]
        }
      ],
      "copyright": "Copyright © 2025 Pipe Protocol. Built with Docusaurus."
    },
    "prism": {
      "theme": {
        "plain": {
          "color": "#393A34",
          "backgroundColor": "#f6f8fa"
        },
        "styles": [
          {
            "types": [
              "comment",
              "prolog",
              "doctype",
              "cdata"
            ],
            "style": {
              "color": "#999988",
              "fontStyle": "italic"
            }
          },
          {
            "types": [
              "namespace"
            ],
            "style": {
              "opacity": 0.7
            }
          },
          {
            "types": [
              "string",
              "attr-value"
            ],
            "style": {
              "color": "#e3116c"
            }
          },
          {
            "types": [
              "punctuation",
              "operator"
            ],
            "style": {
              "color": "#393A34"
            }
          },
          {
            "types": [
              "entity",
              "url",
              "symbol",
              "number",
              "boolean",
              "variable",
              "constant",
              "property",
              "regex",
              "inserted"
            ],
            "style": {
              "color": "#36acaa"
            }
          },
          {
            "types": [
              "atrule",
              "keyword",
              "attr-name",
              "selector"
            ],
            "style": {
              "color": "#00a4db"
            }
          },
          {
            "types": [
              "function",
              "deleted",
              "tag"
            ],
            "style": {
              "color": "#d73a49"
            }
          },
          {
            "types": [
              "function-variable"
            ],
            "style": {
              "color": "#6f42c1"
            }
          },
          {
            "types": [
              "tag",
              "selector",
              "keyword"
            ],
            "style": {
              "color": "#00009f"
            }
          }
        ]
      },
      "darkTheme": {
        "plain": {
          "color": "#F8F8F2",
          "backgroundColor": "#282A36"
        },
        "styles": [
          {
            "types": [
              "prolog",
              "constant",
              "builtin"
            ],
            "style": {
              "color": "rgb(189, 147, 249)"
            }
          },
          {
            "types": [
              "inserted",
              "function"
            ],
            "style": {
              "color": "rgb(80, 250, 123)"
            }
          },
          {
            "types": [
              "deleted"
            ],
            "style": {
              "color": "rgb(255, 85, 85)"
            }
          },
          {
            "types": [
              "changed"
            ],
            "style": {
              "color": "rgb(255, 184, 108)"
            }
          },
          {
            "types": [
              "punctuation",
              "symbol"
            ],
            "style": {
              "color": "rgb(248, 248, 242)"
            }
          },
          {
            "types": [
              "string",
              "char",
              "tag",
              "selector"
            ],
            "style": {
              "color": "rgb(255, 121, 198)"
            }
          },
          {
            "types": [
              "keyword",
              "variable"
            ],
            "style": {
              "color": "rgb(189, 147, 249)",
              "fontStyle": "italic"
            }
          },
          {
            "types": [
              "comment"
            ],
            "style": {
              "color": "rgb(98, 114, 164)"
            }
          },
          {
            "types": [
              "attr-name"
            ],
            "style": {
              "color": "rgb(241, 250, 140)"
            }
          }
        ]
      },
      "additionalLanguages": [
        "bash",
        "diff",
        "json",
        "yaml"
      ],
      "magicComments": [
        {
          "className": "theme-code-block-highlighted-line",
          "line": "highlight-next-line",
          "block": {
            "start": "highlight-start",
            "end": "highlight-end"
          }
        }
      ]
    },
    "tableOfContents": {
      "minHeadingLevel": 2,
      "maxHeadingLevel": 4
    },
    "blog": {
      "sidebar": {
        "groupByYear": true
      }
    },
    "metadata": []
  },
  "baseUrlIssueBanner": true,
  "future": {
    "experimental_faster": {
      "swcJsLoader": false,
      "swcJsMinimizer": false,
      "swcHtmlMinimizer": false,
      "lightningCssMinimizer": false,
      "mdxCrossCompilerCache": false,
      "rspackBundler": false
    },
    "experimental_storage": {
      "type": "localStorage",
      "namespace": false
    },
    "experimental_router": "browser"
  },
  "onBrokenAnchors": "warn",
  "onDuplicateRoutes": "warn",
  "staticDirectories": [
    "static"
  ],
  "customFields": {},
  "plugins": [],
  "themes": [],
  "scripts": [],
  "headTags": [],
  "stylesheets": [],
  "clientModules": [],
  "titleDelimiter": "|",
  "noIndex": false,
  "markdown": {
    "format": "mdx",
    "mermaid": false,
    "mdx1Compat": {
      "comments": true,
      "admonitions": true,
      "headingIds": true
    },
    "anchors": {
      "maintainCase": false
    }
  }
};

================
File: pipe-docs/website/.docusaurus/DONT-EDIT-THIS-FOLDER
================
This folder stores temp files that Docusaurus' client bundler accesses.

DO NOT hand-modify files in this folder because they will be overwritten in the
next build. You can clear all build artifacts (including this folder) with the
`docusaurus clear` command.

================
File: pipe-docs/website/.docusaurus/globalData.json
================
{
  "docusaurus-plugin-content-docs": {
    "default": {
      "path": "/",
      "versions": [
        {
          "name": "current",
          "label": "Next",
          "isLast": true,
          "path": "/",
          "mainDocId": "intro",
          "docs": [
            {
              "id": "api-reference/configuration",
              "path": "/api-reference/configuration",
              "sidebar": "docs"
            },
            {
              "id": "api-reference/fetch",
              "path": "/api-reference/fetch",
              "sidebar": "docs"
            },
            {
              "id": "api-reference/node-info",
              "path": "/api-reference/node-info",
              "sidebar": "docs"
            },
            {
              "id": "api-reference/node-status",
              "path": "/api-reference/node-status",
              "sidebar": "docs"
            },
            {
              "id": "api-reference/pin",
              "path": "/api-reference/pin",
              "sidebar": "docs"
            },
            {
              "id": "api-reference/pinned-cids",
              "path": "/api-reference/pinned-cids",
              "sidebar": "docs"
            },
            {
              "id": "api-reference/publish",
              "path": "/api-reference/publish",
              "sidebar": "docs"
            },
            {
              "id": "api-reference/publish-bundle",
              "path": "/api-reference/publish-bundle",
              "sidebar": "docs"
            },
            {
              "id": "api-reference/replicate",
              "path": "/api-reference/replicate",
              "sidebar": "docs"
            },
            {
              "id": "api-reference/storage-metrics",
              "path": "/api-reference/storage-metrics",
              "sidebar": "docs"
            },
            {
              "id": "api-reference/unpin",
              "path": "/api-reference/unpin",
              "sidebar": "docs"
            },
            {
              "id": "core-concepts/encryption",
              "path": "/core-concepts/encryption",
              "sidebar": "docs"
            },
            {
              "id": "core-concepts/inline-referenced",
              "path": "/core-concepts/inline-referenced",
              "sidebar": "docs"
            },
            {
              "id": "core-concepts/pipebundle",
              "path": "/core-concepts/pipebundle",
              "sidebar": "docs"
            },
            {
              "id": "core-concepts/piperecord",
              "path": "/core-concepts/piperecord",
              "sidebar": "docs"
            },
            {
              "id": "core-concepts/scopes",
              "path": "/core-concepts/scopes",
              "sidebar": "docs"
            },
            {
              "id": "core-concepts/terminology",
              "path": "/core-concepts/terminology",
              "sidebar": "docs"
            },
            {
              "id": "intro",
              "path": "/intro",
              "sidebar": "docs"
            },
            {
              "id": "introduction/overview",
              "path": "/introduction/overview",
              "sidebar": "docs"
            },
            {
              "id": "introduction/problem",
              "path": "/introduction/problem",
              "sidebar": "docs"
            },
            {
              "id": "introduction/solution",
              "path": "/introduction/solution",
              "sidebar": "docs"
            },
            {
              "id": "tutorial-basics/congratulations",
              "path": "/tutorial-basics/congratulations"
            },
            {
              "id": "tutorial-basics/create-a-blog-post",
              "path": "/tutorial-basics/create-a-blog-post"
            },
            {
              "id": "tutorial-basics/create-a-document",
              "path": "/tutorial-basics/create-a-document"
            },
            {
              "id": "tutorial-basics/create-a-page",
              "path": "/tutorial-basics/create-a-page"
            },
            {
              "id": "tutorial-basics/deploy-your-site",
              "path": "/tutorial-basics/deploy-your-site"
            },
            {
              "id": "tutorial-basics/markdown-features",
              "path": "/tutorial-basics/markdown-features"
            },
            {
              "id": "tutorial-extras/manage-docs-versions",
              "path": "/tutorial-extras/manage-docs-versions"
            },
            {
              "id": "tutorial-extras/translate-your-site",
              "path": "/tutorial-extras/translate-your-site"
            },
            {
              "id": "usage-examples/fetch-data",
              "path": "/usage-examples/fetch-data",
              "sidebar": "docs"
            },
            {
              "id": "usage-examples/pin-unpin",
              "path": "/usage-examples/pin-unpin",
              "sidebar": "docs"
            },
            {
              "id": "usage-examples/publish-data",
              "path": "/usage-examples/publish-data",
              "sidebar": "docs"
            },
            {
              "id": "usage-examples/publish-hidden-data",
              "path": "/usage-examples/publish-hidden-data",
              "sidebar": "docs"
            },
            {
              "id": "usage-examples/replicate-data",
              "path": "/usage-examples/replicate-data",
              "sidebar": "docs"
            },
            {
              "id": "usage-examples/work-bundles",
              "path": "/usage-examples/work-bundles",
              "sidebar": "docs"
            }
          ],
          "draftIds": [],
          "sidebars": {
            "docs": {
              "link": {
                "path": "/intro",
                "label": "intro"
              }
            }
          }
        }
      ],
      "breadcrumbs": true
    }
  }
}

================
File: pipe-docs/website/.docusaurus/i18n.json
================
{
  "defaultLocale": "en",
  "locales": [
    "en"
  ],
  "path": "i18n",
  "currentLocale": "en",
  "localeConfigs": {
    "en": {
      "label": "English",
      "direction": "ltr",
      "htmlLang": "en",
      "calendar": "gregory",
      "path": "en"
    }
  }
}

================
File: pipe-docs/website/.docusaurus/registry.js
================
export default {
  "__comp---site-src-pages-index-tsx-1-df-d3e": [() => import(/* webpackChunkName: "__comp---site-src-pages-index-tsx-1-df-d3e" */ "@site/src/pages/index.tsx"), "@site/src/pages/index.tsx", require.resolveWeak("@site/src/pages/index.tsx")],
  "__comp---theme-debug-config-23-a-2ff": [() => import(/* webpackChunkName: "__comp---theme-debug-config-23-a-2ff" */ "@theme/DebugConfig"), "@theme/DebugConfig", require.resolveWeak("@theme/DebugConfig")],
  "__comp---theme-debug-contentba-8-ce7": [() => import(/* webpackChunkName: "__comp---theme-debug-contentba-8-ce7" */ "@theme/DebugContent"), "@theme/DebugContent", require.resolveWeak("@theme/DebugContent")],
  "__comp---theme-debug-global-dataede-0fa": [() => import(/* webpackChunkName: "__comp---theme-debug-global-dataede-0fa" */ "@theme/DebugGlobalData"), "@theme/DebugGlobalData", require.resolveWeak("@theme/DebugGlobalData")],
  "__comp---theme-debug-registry-679-501": [() => import(/* webpackChunkName: "__comp---theme-debug-registry-679-501" */ "@theme/DebugRegistry"), "@theme/DebugRegistry", require.resolveWeak("@theme/DebugRegistry")],
  "__comp---theme-debug-routes-946-699": [() => import(/* webpackChunkName: "__comp---theme-debug-routes-946-699" */ "@theme/DebugRoutes"), "@theme/DebugRoutes", require.resolveWeak("@theme/DebugRoutes")],
  "__comp---theme-debug-site-metadata-68-e-3d4": [() => import(/* webpackChunkName: "__comp---theme-debug-site-metadata-68-e-3d4" */ "@theme/DebugSiteMetadata"), "@theme/DebugSiteMetadata", require.resolveWeak("@theme/DebugSiteMetadata")],
  "__comp---theme-doc-item-178-a40": [() => import(/* webpackChunkName: "__comp---theme-doc-item-178-a40" */ "@theme/DocItem"), "@theme/DocItem", require.resolveWeak("@theme/DocItem")],
  "__comp---theme-doc-roota-94-67a": [() => import(/* webpackChunkName: "__comp---theme-doc-roota-94-67a" */ "@theme/DocRoot"), "@theme/DocRoot", require.resolveWeak("@theme/DocRoot")],
  "__comp---theme-doc-version-roota-7-b-5de": [() => import(/* webpackChunkName: "__comp---theme-doc-version-roota-7-b-5de" */ "@theme/DocVersionRoot"), "@theme/DocVersionRoot", require.resolveWeak("@theme/DocVersionRoot")],
  "__comp---theme-docs-root-5-e-9-0b6": [() => import(/* webpackChunkName: "__comp---theme-docs-root-5-e-9-0b6" */ "@theme/DocsRoot"), "@theme/DocsRoot", require.resolveWeak("@theme/DocsRoot")],
  "__comp---theme-mdx-page-1-f-3-b90": [() => import(/* webpackChunkName: "__comp---theme-mdx-page-1-f-3-b90" */ "@theme/MDXPage"), "@theme/MDXPage", require.resolveWeak("@theme/MDXPage")],
  "__props---22-d-307": [() => import(/* webpackChunkName: "__props---22-d-307" */ "@generated/docusaurus-plugin-content-docs/default/p/index-466.json"), "@generated/docusaurus-plugin-content-docs/default/p/index-466.json", require.resolveWeak("@generated/docusaurus-plugin-content-docs/default/p/index-466.json")],
  "__props---docusaurus-debug-content-3-c-0-be2": [() => import(/* webpackChunkName: "__props---docusaurus-debug-content-3-c-0-be2" */ "@generated/docusaurus-plugin-debug/default/p/docusaurus-debug-content-0d5.json"), "@generated/docusaurus-plugin-debug/default/p/docusaurus-debug-content-0d5.json", require.resolveWeak("@generated/docusaurus-plugin-debug/default/p/docusaurus-debug-content-0d5.json")],
  "config---5-e-9-4f3": [() => import(/* webpackChunkName: "config---5-e-9-4f3" */ "@generated/docusaurus.config"), "@generated/docusaurus.config", require.resolveWeak("@generated/docusaurus.config")],
  "content---api-reference-configuration-4-f-2-191": [() => import(/* webpackChunkName: "content---api-reference-configuration-4-f-2-191" */ "@site/docs/api-reference/configuration.md"), "@site/docs/api-reference/configuration.md", require.resolveWeak("@site/docs/api-reference/configuration.md")],
  "content---api-reference-fetch-72-c-a35": [() => import(/* webpackChunkName: "content---api-reference-fetch-72-c-a35" */ "@site/docs/api-reference/fetch.md"), "@site/docs/api-reference/fetch.md", require.resolveWeak("@site/docs/api-reference/fetch.md")],
  "content---api-reference-node-infocc-6-6f4": [() => import(/* webpackChunkName: "content---api-reference-node-infocc-6-6f4" */ "@site/docs/api-reference/node-info.md"), "@site/docs/api-reference/node-info.md", require.resolveWeak("@site/docs/api-reference/node-info.md")],
  "content---api-reference-node-status-213-470": [() => import(/* webpackChunkName: "content---api-reference-node-status-213-470" */ "@site/docs/api-reference/node-status.md"), "@site/docs/api-reference/node-status.md", require.resolveWeak("@site/docs/api-reference/node-status.md")],
  "content---api-reference-pine-40-647": [() => import(/* webpackChunkName: "content---api-reference-pine-40-647" */ "@site/docs/api-reference/pin.md"), "@site/docs/api-reference/pin.md", require.resolveWeak("@site/docs/api-reference/pin.md")],
  "content---api-reference-pinned-cids-567-c36": [() => import(/* webpackChunkName: "content---api-reference-pinned-cids-567-c36" */ "@site/docs/api-reference/pinned-cids.md"), "@site/docs/api-reference/pinned-cids.md", require.resolveWeak("@site/docs/api-reference/pinned-cids.md")],
  "content---api-reference-publish-bundle-98-e-27a": [() => import(/* webpackChunkName: "content---api-reference-publish-bundle-98-e-27a" */ "@site/docs/api-reference/publish-bundle.md"), "@site/docs/api-reference/publish-bundle.md", require.resolveWeak("@site/docs/api-reference/publish-bundle.md")],
  "content---api-reference-publishc-40-bcd": [() => import(/* webpackChunkName: "content---api-reference-publishc-40-bcd" */ "@site/docs/api-reference/publish.md"), "@site/docs/api-reference/publish.md", require.resolveWeak("@site/docs/api-reference/publish.md")],
  "content---api-reference-replicatec-5-d-4fa": [() => import(/* webpackChunkName: "content---api-reference-replicatec-5-d-4fa" */ "@site/docs/api-reference/replicate.md"), "@site/docs/api-reference/replicate.md", require.resolveWeak("@site/docs/api-reference/replicate.md")],
  "content---api-reference-storage-metrics-37-d-4c8": [() => import(/* webpackChunkName: "content---api-reference-storage-metrics-37-d-4c8" */ "@site/docs/api-reference/storage-metrics.md"), "@site/docs/api-reference/storage-metrics.md", require.resolveWeak("@site/docs/api-reference/storage-metrics.md")],
  "content---api-reference-unpindf-6-770": [() => import(/* webpackChunkName: "content---api-reference-unpindf-6-770" */ "@site/docs/api-reference/unpin.md"), "@site/docs/api-reference/unpin.md", require.resolveWeak("@site/docs/api-reference/unpin.md")],
  "content---core-concepts-encryption-3-be-7a0": [() => import(/* webpackChunkName: "content---core-concepts-encryption-3-be-7a0" */ "@site/docs/core-concepts/encryption.md"), "@site/docs/core-concepts/encryption.md", require.resolveWeak("@site/docs/core-concepts/encryption.md")],
  "content---core-concepts-inline-referenced-231-046": [() => import(/* webpackChunkName: "content---core-concepts-inline-referenced-231-046" */ "@site/docs/core-concepts/inline-referenced.md"), "@site/docs/core-concepts/inline-referenced.md", require.resolveWeak("@site/docs/core-concepts/inline-referenced.md")],
  "content---core-concepts-pipebundle-6-a-7-d41": [() => import(/* webpackChunkName: "content---core-concepts-pipebundle-6-a-7-d41" */ "@site/docs/core-concepts/pipebundle.md"), "@site/docs/core-concepts/pipebundle.md", require.resolveWeak("@site/docs/core-concepts/pipebundle.md")],
  "content---core-concepts-piperecordf-4-d-986": [() => import(/* webpackChunkName: "content---core-concepts-piperecordf-4-d-986" */ "@site/docs/core-concepts/piperecord.md"), "@site/docs/core-concepts/piperecord.md", require.resolveWeak("@site/docs/core-concepts/piperecord.md")],
  "content---core-concepts-scopes-417-ff1": [() => import(/* webpackChunkName: "content---core-concepts-scopes-417-ff1" */ "@site/docs/core-concepts/scopes.md"), "@site/docs/core-concepts/scopes.md", require.resolveWeak("@site/docs/core-concepts/scopes.md")],
  "content---core-concepts-terminology-7-d-7-80d": [() => import(/* webpackChunkName: "content---core-concepts-terminology-7-d-7-80d" */ "@site/docs/core-concepts/terminology.md"), "@site/docs/core-concepts/terminology.md", require.resolveWeak("@site/docs/core-concepts/terminology.md")],
  "content---intro-0-e-3-7b8": [() => import(/* webpackChunkName: "content---intro-0-e-3-7b8" */ "@site/docs/intro.md"), "@site/docs/intro.md", require.resolveWeak("@site/docs/intro.md")],
  "content---introduction-overview-761-824": [() => import(/* webpackChunkName: "content---introduction-overview-761-824" */ "@site/docs/introduction/overview.md"), "@site/docs/introduction/overview.md", require.resolveWeak("@site/docs/introduction/overview.md")],
  "content---introduction-problem-20-e-178": [() => import(/* webpackChunkName: "content---introduction-problem-20-e-178" */ "@site/docs/introduction/problem.md"), "@site/docs/introduction/problem.md", require.resolveWeak("@site/docs/introduction/problem.md")],
  "content---introduction-solution-167-e90": [() => import(/* webpackChunkName: "content---introduction-solution-167-e90" */ "@site/docs/introduction/solution.md"), "@site/docs/introduction/solution.md", require.resolveWeak("@site/docs/introduction/solution.md")],
  "content---markdown-page-393-028": [() => import(/* webpackChunkName: "content---markdown-page-393-028" */ "@site/src/pages/markdown-page.md"), "@site/src/pages/markdown-page.md", require.resolveWeak("@site/src/pages/markdown-page.md")],
  "content---tutorial-basics-congratulations-822-79f": [() => import(/* webpackChunkName: "content---tutorial-basics-congratulations-822-79f" */ "@site/docs/tutorial-basics/congratulations.md"), "@site/docs/tutorial-basics/congratulations.md", require.resolveWeak("@site/docs/tutorial-basics/congratulations.md")],
  "content---tutorial-basics-create-a-blog-post-533-8b3": [() => import(/* webpackChunkName: "content---tutorial-basics-create-a-blog-post-533-8b3" */ "@site/docs/tutorial-basics/create-a-blog-post.md"), "@site/docs/tutorial-basics/create-a-blog-post.md", require.resolveWeak("@site/docs/tutorial-basics/create-a-blog-post.md")],
  "content---tutorial-basics-create-a-document-1-e-4-f30": [() => import(/* webpackChunkName: "content---tutorial-basics-create-a-document-1-e-4-f30" */ "@site/docs/tutorial-basics/create-a-document.md"), "@site/docs/tutorial-basics/create-a-document.md", require.resolveWeak("@site/docs/tutorial-basics/create-a-document.md")],
  "content---tutorial-basics-create-a-page-5-c-8-d8b": [() => import(/* webpackChunkName: "content---tutorial-basics-create-a-page-5-c-8-d8b" */ "@site/docs/tutorial-basics/create-a-page.md"), "@site/docs/tutorial-basics/create-a-page.md", require.resolveWeak("@site/docs/tutorial-basics/create-a-page.md")],
  "content---tutorial-basics-deploy-your-sitef-55-bcd": [() => import(/* webpackChunkName: "content---tutorial-basics-deploy-your-sitef-55-bcd" */ "@site/docs/tutorial-basics/deploy-your-site.md"), "@site/docs/tutorial-basics/deploy-your-site.md", require.resolveWeak("@site/docs/tutorial-basics/deploy-your-site.md")],
  "content---tutorial-basics-markdown-features-18-c-d7b": [() => import(/* webpackChunkName: "content---tutorial-basics-markdown-features-18-c-d7b" */ "@site/docs/tutorial-basics/markdown-features.mdx"), "@site/docs/tutorial-basics/markdown-features.mdx", require.resolveWeak("@site/docs/tutorial-basics/markdown-features.mdx")],
  "content---tutorial-extras-manage-docs-versionsdff-033": [() => import(/* webpackChunkName: "content---tutorial-extras-manage-docs-versionsdff-033" */ "@site/docs/tutorial-extras/manage-docs-versions.md"), "@site/docs/tutorial-extras/manage-docs-versions.md", require.resolveWeak("@site/docs/tutorial-extras/manage-docs-versions.md")],
  "content---tutorial-extras-translate-your-sitee-44-f13": [() => import(/* webpackChunkName: "content---tutorial-extras-translate-your-sitee-44-f13" */ "@site/docs/tutorial-extras/translate-your-site.md"), "@site/docs/tutorial-extras/translate-your-site.md", require.resolveWeak("@site/docs/tutorial-extras/translate-your-site.md")],
  "content---usage-examples-fetch-data-513-c31": [() => import(/* webpackChunkName: "content---usage-examples-fetch-data-513-c31" */ "@site/docs/usage-examples/fetch-data.md"), "@site/docs/usage-examples/fetch-data.md", require.resolveWeak("@site/docs/usage-examples/fetch-data.md")],
  "content---usage-examples-pin-unpin-8-de-4ad": [() => import(/* webpackChunkName: "content---usage-examples-pin-unpin-8-de-4ad" */ "@site/docs/usage-examples/pin-unpin.md"), "@site/docs/usage-examples/pin-unpin.md", require.resolveWeak("@site/docs/usage-examples/pin-unpin.md")],
  "content---usage-examples-publish-datab-8-d-142": [() => import(/* webpackChunkName: "content---usage-examples-publish-datab-8-d-142" */ "@site/docs/usage-examples/publish-data.md"), "@site/docs/usage-examples/publish-data.md", require.resolveWeak("@site/docs/usage-examples/publish-data.md")],
  "content---usage-examples-publish-hidden-data-7-d-3-607": [() => import(/* webpackChunkName: "content---usage-examples-publish-hidden-data-7-d-3-607" */ "@site/docs/usage-examples/publish-hidden-data.md"), "@site/docs/usage-examples/publish-hidden-data.md", require.resolveWeak("@site/docs/usage-examples/publish-hidden-data.md")],
  "content---usage-examples-replicate-datad-94-d97": [() => import(/* webpackChunkName: "content---usage-examples-replicate-datad-94-d97" */ "@site/docs/usage-examples/replicate-data.md"), "@site/docs/usage-examples/replicate-data.md", require.resolveWeak("@site/docs/usage-examples/replicate-data.md")],
  "content---usage-examples-work-bundles-16-e-7db": [() => import(/* webpackChunkName: "content---usage-examples-work-bundles-16-e-7db" */ "@site/docs/usage-examples/work-bundles.md"), "@site/docs/usage-examples/work-bundles.md", require.resolveWeak("@site/docs/usage-examples/work-bundles.md")],
  "plugin---aba-d70": [() => import(/* webpackChunkName: "plugin---aba-d70" */ "@generated/docusaurus-plugin-content-docs/default/__plugin.json"), "@generated/docusaurus-plugin-content-docs/default/__plugin.json", require.resolveWeak("@generated/docusaurus-plugin-content-docs/default/__plugin.json")],
  "plugin---docusaurus-debugb-38-ad3": [() => import(/* webpackChunkName: "plugin---docusaurus-debugb-38-ad3" */ "@generated/docusaurus-plugin-debug/default/__plugin.json"), "@generated/docusaurus-plugin-debug/default/__plugin.json", require.resolveWeak("@generated/docusaurus-plugin-debug/default/__plugin.json")],
  "plugin---markdown-pagea-74-7b5": [() => import(/* webpackChunkName: "plugin---markdown-pagea-74-7b5" */ "@generated/docusaurus-plugin-content-pages/default/__plugin.json"), "@generated/docusaurus-plugin-content-pages/default/__plugin.json", require.resolveWeak("@generated/docusaurus-plugin-content-pages/default/__plugin.json")],};

================
File: pipe-docs/website/.docusaurus/routes.js
================
import React from 'react';
import ComponentCreator from '@docusaurus/ComponentCreator';

export default [
  {
    path: '/__docusaurus/debug',
    component: ComponentCreator('/__docusaurus/debug', '5ff'),
    exact: true
  },
  {
    path: '/__docusaurus/debug/config',
    component: ComponentCreator('/__docusaurus/debug/config', '5ba'),
    exact: true
  },
  {
    path: '/__docusaurus/debug/content',
    component: ComponentCreator('/__docusaurus/debug/content', 'a2b'),
    exact: true
  },
  {
    path: '/__docusaurus/debug/globalData',
    component: ComponentCreator('/__docusaurus/debug/globalData', 'c3c'),
    exact: true
  },
  {
    path: '/__docusaurus/debug/metadata',
    component: ComponentCreator('/__docusaurus/debug/metadata', '156'),
    exact: true
  },
  {
    path: '/__docusaurus/debug/registry',
    component: ComponentCreator('/__docusaurus/debug/registry', '88c'),
    exact: true
  },
  {
    path: '/__docusaurus/debug/routes',
    component: ComponentCreator('/__docusaurus/debug/routes', '000'),
    exact: true
  },
  {
    path: '/markdown-page',
    component: ComponentCreator('/markdown-page', '3d7'),
    exact: true
  },
  {
    path: '/',
    component: ComponentCreator('/', 'e5f'),
    exact: true
  },
  {
    path: '/',
    component: ComponentCreator('/', '6c5'),
    routes: [
      {
        path: '/',
        component: ComponentCreator('/', '842'),
        routes: [
          {
            path: '/',
            component: ComponentCreator('/', 'a85'),
            routes: [
              {
                path: '/api-reference/configuration',
                component: ComponentCreator('/api-reference/configuration', '947'),
                exact: true,
                sidebar: "docs"
              },
              {
                path: '/api-reference/fetch',
                component: ComponentCreator('/api-reference/fetch', 'eb6'),
                exact: true,
                sidebar: "docs"
              },
              {
                path: '/api-reference/node-info',
                component: ComponentCreator('/api-reference/node-info', '63d'),
                exact: true,
                sidebar: "docs"
              },
              {
                path: '/api-reference/node-status',
                component: ComponentCreator('/api-reference/node-status', 'fbc'),
                exact: true,
                sidebar: "docs"
              },
              {
                path: '/api-reference/pin',
                component: ComponentCreator('/api-reference/pin', 'cd0'),
                exact: true,
                sidebar: "docs"
              },
              {
                path: '/api-reference/pinned-cids',
                component: ComponentCreator('/api-reference/pinned-cids', '4aa'),
                exact: true,
                sidebar: "docs"
              },
              {
                path: '/api-reference/publish',
                component: ComponentCreator('/api-reference/publish', 'a94'),
                exact: true,
                sidebar: "docs"
              },
              {
                path: '/api-reference/publish-bundle',
                component: ComponentCreator('/api-reference/publish-bundle', '5bb'),
                exact: true,
                sidebar: "docs"
              },
              {
                path: '/api-reference/replicate',
                component: ComponentCreator('/api-reference/replicate', 'de2'),
                exact: true,
                sidebar: "docs"
              },
              {
                path: '/api-reference/storage-metrics',
                component: ComponentCreator('/api-reference/storage-metrics', '75b'),
                exact: true,
                sidebar: "docs"
              },
              {
                path: '/api-reference/unpin',
                component: ComponentCreator('/api-reference/unpin', '074'),
                exact: true,
                sidebar: "docs"
              },
              {
                path: '/core-concepts/encryption',
                component: ComponentCreator('/core-concepts/encryption', 'b35'),
                exact: true,
                sidebar: "docs"
              },
              {
                path: '/core-concepts/inline-referenced',
                component: ComponentCreator('/core-concepts/inline-referenced', '921'),
                exact: true,
                sidebar: "docs"
              },
              {
                path: '/core-concepts/pipebundle',
                component: ComponentCreator('/core-concepts/pipebundle', '289'),
                exact: true,
                sidebar: "docs"
              },
              {
                path: '/core-concepts/piperecord',
                component: ComponentCreator('/core-concepts/piperecord', 'bf2'),
                exact: true,
                sidebar: "docs"
              },
              {
                path: '/core-concepts/scopes',
                component: ComponentCreator('/core-concepts/scopes', 'c93'),
                exact: true,
                sidebar: "docs"
              },
              {
                path: '/core-concepts/terminology',
                component: ComponentCreator('/core-concepts/terminology', '02d'),
                exact: true,
                sidebar: "docs"
              },
              {
                path: '/intro',
                component: ComponentCreator('/intro', 'd0c'),
                exact: true,
                sidebar: "docs"
              },
              {
                path: '/introduction/overview',
                component: ComponentCreator('/introduction/overview', '2e5'),
                exact: true,
                sidebar: "docs"
              },
              {
                path: '/introduction/problem',
                component: ComponentCreator('/introduction/problem', 'a0f'),
                exact: true,
                sidebar: "docs"
              },
              {
                path: '/introduction/solution',
                component: ComponentCreator('/introduction/solution', '313'),
                exact: true,
                sidebar: "docs"
              },
              {
                path: '/tutorial-basics/congratulations',
                component: ComponentCreator('/tutorial-basics/congratulations', '58f'),
                exact: true
              },
              {
                path: '/tutorial-basics/create-a-blog-post',
                component: ComponentCreator('/tutorial-basics/create-a-blog-post', 'b9d'),
                exact: true
              },
              {
                path: '/tutorial-basics/create-a-document',
                component: ComponentCreator('/tutorial-basics/create-a-document', 'c74'),
                exact: true
              },
              {
                path: '/tutorial-basics/create-a-page',
                component: ComponentCreator('/tutorial-basics/create-a-page', '913'),
                exact: true
              },
              {
                path: '/tutorial-basics/deploy-your-site',
                component: ComponentCreator('/tutorial-basics/deploy-your-site', 'ca5'),
                exact: true
              },
              {
                path: '/tutorial-basics/markdown-features',
                component: ComponentCreator('/tutorial-basics/markdown-features', 'b4e'),
                exact: true
              },
              {
                path: '/tutorial-extras/manage-docs-versions',
                component: ComponentCreator('/tutorial-extras/manage-docs-versions', 'b1f'),
                exact: true
              },
              {
                path: '/tutorial-extras/translate-your-site',
                component: ComponentCreator('/tutorial-extras/translate-your-site', '4d4'),
                exact: true
              },
              {
                path: '/usage-examples/fetch-data',
                component: ComponentCreator('/usage-examples/fetch-data', 'f62'),
                exact: true,
                sidebar: "docs"
              },
              {
                path: '/usage-examples/pin-unpin',
                component: ComponentCreator('/usage-examples/pin-unpin', 'fb9'),
                exact: true,
                sidebar: "docs"
              },
              {
                path: '/usage-examples/publish-data',
                component: ComponentCreator('/usage-examples/publish-data', '84c'),
                exact: true,
                sidebar: "docs"
              },
              {
                path: '/usage-examples/publish-hidden-data',
                component: ComponentCreator('/usage-examples/publish-hidden-data', '245'),
                exact: true,
                sidebar: "docs"
              },
              {
                path: '/usage-examples/replicate-data',
                component: ComponentCreator('/usage-examples/replicate-data', '7ce'),
                exact: true,
                sidebar: "docs"
              },
              {
                path: '/usage-examples/work-bundles',
                component: ComponentCreator('/usage-examples/work-bundles', '90f'),
                exact: true,
                sidebar: "docs"
              }
            ]
          }
        ]
      }
    ]
  },
  {
    path: '*',
    component: ComponentCreator('*'),
  },
];

================
File: pipe-docs/website/.docusaurus/routesChunkNames.json
================
{
  "/__docusaurus/debug-5ff": {
    "__comp": "__comp---theme-debug-config-23-a-2ff",
    "__context": {
      "plugin": "plugin---docusaurus-debugb-38-ad3"
    }
  },
  "/__docusaurus/debug/config-5ba": {
    "__comp": "__comp---theme-debug-config-23-a-2ff",
    "__context": {
      "plugin": "plugin---docusaurus-debugb-38-ad3"
    }
  },
  "/__docusaurus/debug/content-a2b": {
    "__comp": "__comp---theme-debug-contentba-8-ce7",
    "__context": {
      "plugin": "plugin---docusaurus-debugb-38-ad3"
    },
    "__props": "__props---docusaurus-debug-content-3-c-0-be2"
  },
  "/__docusaurus/debug/globalData-c3c": {
    "__comp": "__comp---theme-debug-global-dataede-0fa",
    "__context": {
      "plugin": "plugin---docusaurus-debugb-38-ad3"
    }
  },
  "/__docusaurus/debug/metadata-156": {
    "__comp": "__comp---theme-debug-site-metadata-68-e-3d4",
    "__context": {
      "plugin": "plugin---docusaurus-debugb-38-ad3"
    }
  },
  "/__docusaurus/debug/registry-88c": {
    "__comp": "__comp---theme-debug-registry-679-501",
    "__context": {
      "plugin": "plugin---docusaurus-debugb-38-ad3"
    }
  },
  "/__docusaurus/debug/routes-000": {
    "__comp": "__comp---theme-debug-routes-946-699",
    "__context": {
      "plugin": "plugin---docusaurus-debugb-38-ad3"
    }
  },
  "/markdown-page-3d7": {
    "__comp": "__comp---theme-mdx-page-1-f-3-b90",
    "__context": {
      "plugin": "plugin---markdown-pagea-74-7b5"
    },
    "content": "content---markdown-page-393-028"
  },
  "/-e5f": {
    "__comp": "__comp---site-src-pages-index-tsx-1-df-d3e",
    "__context": {
      "plugin": "plugin---markdown-pagea-74-7b5"
    },
    "config": "config---5-e-9-4f3"
  },
  "/-6c5": {
    "__comp": "__comp---theme-docs-root-5-e-9-0b6",
    "__context": {
      "plugin": "plugin---aba-d70"
    }
  },
  "/-842": {
    "__comp": "__comp---theme-doc-version-roota-7-b-5de",
    "__props": "__props---22-d-307"
  },
  "/-a85": {
    "__comp": "__comp---theme-doc-roota-94-67a"
  },
  "/api-reference/configuration-947": {
    "__comp": "__comp---theme-doc-item-178-a40",
    "content": "content---api-reference-configuration-4-f-2-191"
  },
  "/api-reference/fetch-eb6": {
    "__comp": "__comp---theme-doc-item-178-a40",
    "content": "content---api-reference-fetch-72-c-a35"
  },
  "/api-reference/node-info-63d": {
    "__comp": "__comp---theme-doc-item-178-a40",
    "content": "content---api-reference-node-infocc-6-6f4"
  },
  "/api-reference/node-status-fbc": {
    "__comp": "__comp---theme-doc-item-178-a40",
    "content": "content---api-reference-node-status-213-470"
  },
  "/api-reference/pin-cd0": {
    "__comp": "__comp---theme-doc-item-178-a40",
    "content": "content---api-reference-pine-40-647"
  },
  "/api-reference/pinned-cids-4aa": {
    "__comp": "__comp---theme-doc-item-178-a40",
    "content": "content---api-reference-pinned-cids-567-c36"
  },
  "/api-reference/publish-a94": {
    "__comp": "__comp---theme-doc-item-178-a40",
    "content": "content---api-reference-publishc-40-bcd"
  },
  "/api-reference/publish-bundle-5bb": {
    "__comp": "__comp---theme-doc-item-178-a40",
    "content": "content---api-reference-publish-bundle-98-e-27a"
  },
  "/api-reference/replicate-de2": {
    "__comp": "__comp---theme-doc-item-178-a40",
    "content": "content---api-reference-replicatec-5-d-4fa"
  },
  "/api-reference/storage-metrics-75b": {
    "__comp": "__comp---theme-doc-item-178-a40",
    "content": "content---api-reference-storage-metrics-37-d-4c8"
  },
  "/api-reference/unpin-074": {
    "__comp": "__comp---theme-doc-item-178-a40",
    "content": "content---api-reference-unpindf-6-770"
  },
  "/core-concepts/encryption-b35": {
    "__comp": "__comp---theme-doc-item-178-a40",
    "content": "content---core-concepts-encryption-3-be-7a0"
  },
  "/core-concepts/inline-referenced-921": {
    "__comp": "__comp---theme-doc-item-178-a40",
    "content": "content---core-concepts-inline-referenced-231-046"
  },
  "/core-concepts/pipebundle-289": {
    "__comp": "__comp---theme-doc-item-178-a40",
    "content": "content---core-concepts-pipebundle-6-a-7-d41"
  },
  "/core-concepts/piperecord-bf2": {
    "__comp": "__comp---theme-doc-item-178-a40",
    "content": "content---core-concepts-piperecordf-4-d-986"
  },
  "/core-concepts/scopes-c93": {
    "__comp": "__comp---theme-doc-item-178-a40",
    "content": "content---core-concepts-scopes-417-ff1"
  },
  "/core-concepts/terminology-02d": {
    "__comp": "__comp---theme-doc-item-178-a40",
    "content": "content---core-concepts-terminology-7-d-7-80d"
  },
  "/intro-d0c": {
    "__comp": "__comp---theme-doc-item-178-a40",
    "content": "content---intro-0-e-3-7b8"
  },
  "/introduction/overview-2e5": {
    "__comp": "__comp---theme-doc-item-178-a40",
    "content": "content---introduction-overview-761-824"
  },
  "/introduction/problem-a0f": {
    "__comp": "__comp---theme-doc-item-178-a40",
    "content": "content---introduction-problem-20-e-178"
  },
  "/introduction/solution-313": {
    "__comp": "__comp---theme-doc-item-178-a40",
    "content": "content---introduction-solution-167-e90"
  },
  "/tutorial-basics/congratulations-58f": {
    "__comp": "__comp---theme-doc-item-178-a40",
    "content": "content---tutorial-basics-congratulations-822-79f"
  },
  "/tutorial-basics/create-a-blog-post-b9d": {
    "__comp": "__comp---theme-doc-item-178-a40",
    "content": "content---tutorial-basics-create-a-blog-post-533-8b3"
  },
  "/tutorial-basics/create-a-document-c74": {
    "__comp": "__comp---theme-doc-item-178-a40",
    "content": "content---tutorial-basics-create-a-document-1-e-4-f30"
  },
  "/tutorial-basics/create-a-page-913": {
    "__comp": "__comp---theme-doc-item-178-a40",
    "content": "content---tutorial-basics-create-a-page-5-c-8-d8b"
  },
  "/tutorial-basics/deploy-your-site-ca5": {
    "__comp": "__comp---theme-doc-item-178-a40",
    "content": "content---tutorial-basics-deploy-your-sitef-55-bcd"
  },
  "/tutorial-basics/markdown-features-b4e": {
    "__comp": "__comp---theme-doc-item-178-a40",
    "content": "content---tutorial-basics-markdown-features-18-c-d7b"
  },
  "/tutorial-extras/manage-docs-versions-b1f": {
    "__comp": "__comp---theme-doc-item-178-a40",
    "content": "content---tutorial-extras-manage-docs-versionsdff-033"
  },
  "/tutorial-extras/translate-your-site-4d4": {
    "__comp": "__comp---theme-doc-item-178-a40",
    "content": "content---tutorial-extras-translate-your-sitee-44-f13"
  },
  "/usage-examples/fetch-data-f62": {
    "__comp": "__comp---theme-doc-item-178-a40",
    "content": "content---usage-examples-fetch-data-513-c31"
  },
  "/usage-examples/pin-unpin-fb9": {
    "__comp": "__comp---theme-doc-item-178-a40",
    "content": "content---usage-examples-pin-unpin-8-de-4ad"
  },
  "/usage-examples/publish-data-84c": {
    "__comp": "__comp---theme-doc-item-178-a40",
    "content": "content---usage-examples-publish-datab-8-d-142"
  },
  "/usage-examples/publish-hidden-data-245": {
    "__comp": "__comp---theme-doc-item-178-a40",
    "content": "content---usage-examples-publish-hidden-data-7-d-3-607"
  },
  "/usage-examples/replicate-data-7ce": {
    "__comp": "__comp---theme-doc-item-178-a40",
    "content": "content---usage-examples-replicate-datad-94-d97"
  },
  "/usage-examples/work-bundles-90f": {
    "__comp": "__comp---theme-doc-item-178-a40",
    "content": "content---usage-examples-work-bundles-16-e-7db"
  }
}

================
File: pipe-docs/website/.docusaurus/site-metadata.json
================
{
  "docusaurusVersion": "3.7.0",
  "siteVersion": "0.0.0",
  "pluginVersions": {
    "docusaurus-plugin-content-docs": {
      "type": "package",
      "name": "@docusaurus/plugin-content-docs",
      "version": "3.7.0"
    },
    "docusaurus-plugin-content-pages": {
      "type": "package",
      "name": "@docusaurus/plugin-content-pages",
      "version": "3.7.0"
    },
    "docusaurus-plugin-debug": {
      "type": "package",
      "name": "@docusaurus/plugin-debug",
      "version": "3.7.0"
    },
    "docusaurus-plugin-svgr": {
      "type": "package",
      "name": "@docusaurus/plugin-svgr",
      "version": "3.7.0"
    },
    "docusaurus-theme-classic": {
      "type": "package",
      "name": "@docusaurus/theme-classic",
      "version": "3.7.0"
    }
  }
}

================
File: pipe-docs/website/.docusaurus/site-storage.json
================
{
  "type": "localStorage",
  "namespace": ""
}

================
File: scripts/test-api.ts
================
import { PipeProtocol } from '../src/pipe.js';
import { createApi } from '../src/api.js';
import { AddressInfo } from 'net';
import { request } from 'http';
import { Server } from 'http';

async function testApi() {
  console.log('Starting API test...\n');
  
  const pipe = new PipeProtocol({});
  const app = createApi(pipe);
  let server: Server | undefined;

  try {
    // Start the API server
    server = app.listen(0); // Use port 0 to get a random available port
    const address = server.address() as AddressInfo;
    const port = address.port;
    console.log(`API server started on port ${port}\n`);

    // Helper function to make API requests
    async function makeRequest(method: string, path: string, body?: any): Promise<{ status: number; data: any }> {
      return new Promise((resolve, reject) => {
        const options = {
          hostname: 'localhost',
          port: port,
          path: path,
          method: method,
          headers: {
            'Content-Type': 'application/json'
          }
        };

        const req = request(options, (res) => {
          let data = '';
          res.on('data', chunk => data += chunk);
          res.on('end', () => {
            try {
              resolve({
                status: res.statusCode || 500,
                data: data ? JSON.parse(data) : null
              });
            } catch (error) {
              resolve({
                status: res.statusCode || 500,
                data: null
              });
            }
          });
        });

        req.on('error', (error) => {
          console.error('Request error:', error);
          reject(error);
        });

        if (body) {
          req.write(JSON.stringify(body));
        }
        req.end();
      });
    }

    // Test 1: Publish a record via API
    console.log('Test 1: Publishing a record via API...');
    const record = {
      type: 'data' as const,
      content: { message: 'Hello from API!' },
      scope: 'private' as const,
      accessPolicy: { hiddenFromLLM: false },
      encryption: { enabled: false },
      pinned: true
    };

    const publishResponse = await makeRequest('POST', '/publish', record);
    console.log('Publish response:', {
      status: publishResponse.status,
      data: publishResponse.data
    });

    const publishedCid = publishResponse.data?.cid;

    // Test 2: Fetch the published record
    console.log('\nTest 2: Fetching the published record...');
    const fetchResponse = await makeRequest('GET', `/fetch/${publishedCid}/private`);
    console.log('Fetch response:', {
      status: fetchResponse.status,
      data: fetchResponse.data
    });

    // Verify content matches
    const contentMatches = JSON.stringify(fetchResponse.data?.content) === JSON.stringify(record.content);
    console.log('Content matches original:', contentMatches);

    // Test 3: Get node status
    console.log('\nTest 3: Getting node status...');
    const statusResponse = await makeRequest('GET', '/status');
    console.log('Status response:', {
      status: statusResponse.status,
      data: statusResponse.data
    });

    // Test 4: Pin the record
    console.log('\nTest 4: Pinning the record...');
    const pinResponse = await makeRequest('POST', `/pin/${publishedCid}/private`);
    console.log('Pin response:', {
      status: pinResponse.status,
      data: pinResponse.data
    });

    // Test 5: Get pinned CIDs
    console.log('\nTest 5: Getting pinned CIDs...');
    const pinnedResponse = await makeRequest('GET', '/pins/private');
    console.log('Pinned CIDs response:', {
      status: pinnedResponse.status,
      data: pinnedResponse.data
    });

    // Verify the published CID is in the pinned list
    const isPinned = pinnedResponse.data?.includes(publishedCid);
    console.log('Published CID is pinned:', isPinned);

    // Test 6: Publish a bundle
    console.log('\nTest 6: Publishing a bundle...');
    const bundle = {
      schemaRecord: {
        type: 'schema' as const,
        content: {
          type: 'object',
          properties: {
            name: { type: 'string' }
          }
        },
        scope: 'private' as const,
        accessPolicy: { hiddenFromLLM: false },
        encryption: { enabled: false },
        pinned: true
      },
      dataRecord: {
        type: 'data' as const,
        content: { name: 'Test Bundle' },
        scope: 'private' as const,
        accessPolicy: { hiddenFromLLM: false },
        encryption: { enabled: false },
        pinned: true
      },
      combinedScope: 'private',
      timestamp: new Date().toISOString()
    };

    const bundleResponse = await makeRequest('POST', '/publish/bundle', bundle);
    console.log('Bundle publish response:', {
      status: bundleResponse.status,
      data: bundleResponse.data
    });

    // Test 7: Error handling
    console.log('\nTest 7: Testing error handling...');
    
    // Invalid CID
    const invalidFetchResponse = await makeRequest('GET', '/fetch/invalid-cid/private');
    console.log('Invalid CID fetch response:', {
      status: invalidFetchResponse.status,
      error: invalidFetchResponse.data
    });

    // Invalid scope
    const invalidScopeResponse = await makeRequest('GET', `/fetch/${publishedCid}/invalid`);
    console.log('Invalid scope fetch response:', {
      status: invalidScopeResponse.status,
      error: invalidScopeResponse.data
    });

  } catch (error) {
    console.error('Error during test:', error);
  } finally {
    try {
      if (server) {
        server.close();
      }
      await pipe.stop();
      console.log('\nTest completed, server stopped, and node stopped.');
    } catch (error) {
      console.error('Error stopping server/node:', error);
    }
  }
}

// Run the test
(async () => {
  try {
    await testApi();
  } catch (error) {
    console.error('Test failed:', error);
    process.exit(1);
  }
})();

================
File: scripts/test-basic-operations.ts
================
import { PipeProtocol } from '../src/pipe.js';

async function testBasicOperations() {
  console.log('Starting basic operations test...\n');
  
  let pipe: PipeProtocol | undefined;

  try {
    pipe = new PipeProtocol({});

    // Test 1: Publish a simple record
    console.log('Test 1: Publishing a simple record...');
    const record = {
      type: 'data' as const,
      content: { message: 'Hello, IPFS!' },
      scope: 'private' as const,
      accessPolicy: { hiddenFromLLM: false },
      encryption: { enabled: false },
      pinned: true
    };

    const published = await pipe.publishRecord(record);
    console.log('Published record:', {
      cid: published.cid,
      content: published.content
    });

    // Test 2: Fetch the published record
    console.log('\nTest 2: Fetching the published record...');
    if (published.cid) {
      const fetched = await pipe.fetchRecord(published.cid, 'private');
      console.log('Fetched record:', fetched);

      // Verify content matches
      const contentMatches = JSON.stringify(fetched?.content) === JSON.stringify(record.content);
      console.log('Content matches original:', contentMatches);
    }

    // Test 3: Pin the record
    console.log('\nTest 3: Pinning the record...');
    if (published.cid) {
      await pipe.pin(published.cid, 'private');
      console.log('Record pinned successfully');
    }

    // Test 4: Get pinned CIDs
    console.log('\nTest 4: Getting pinned CIDs...');
    const pinnedCids = await pipe.getPinnedCids('private');
    console.log('Pinned CIDs:', pinnedCids);

    // Verify the published CID is in the pinned list
    if (published.cid) {
      const isPinned = pinnedCids.includes(published.cid);
      console.log('Published CID is pinned:', isPinned);
    }

    // Test 5: Get node status
    console.log('\nTest 5: Getting node status...');
    const status = await pipe.getStatus();
    console.log('Node status:', status);

  } catch (error) {
    console.error('Error during test:', error);
    if (error instanceof Error) {
      console.error('Error stack:', error.stack);
    }
    process.exit(1);
  } finally {
    try {
      if (pipe) {
        await pipe.stop();
        console.log('\nTest completed and node stopped.');
      }
    } catch (error) {
      console.error('Error stopping node:', error);
      if (error instanceof Error) {
        console.error('Error stack:', error.stack);
      }
      process.exit(1);
    }
  }
}

// Run the test
(async () => {
  try {
    await testBasicOperations();
  } catch (error) {
    console.error('Test failed:', error);
    if (error instanceof Error) {
      console.error('Error stack:', error.stack);
    }
    process.exit(1);
  }
})();

================
File: scripts/test-bundles.ts
================
import { PipeProtocol } from '../src/pipe';
import { PipeBundle } from '../src/types';

async function testBundles() {
  console.log('Starting bundles test...\n');
  
  const pipe = new PipeProtocol({});

  try {
    // Test 1: Create and publish a bundle with schema and data
    console.log('Test 1: Publishing a bundle with schema and data...');
    const bundle: PipeBundle = {
      schemaRecord: {
        type: 'schema' as const,
        content: {
          type: 'object',
          properties: {
            name: { type: 'string' },
            age: { type: 'number' }
          },
          required: ['name', 'age']
        },
        scope: 'private' as const,
        accessPolicy: { hiddenFromLLM: false },
        encryption: { enabled: false },
        pinned: true
      },
      dataRecord: {
        type: 'data' as const,
        content: {
          name: 'John Doe',
          age: 30
        },
        scope: 'private' as const,
        accessPolicy: { hiddenFromLLM: false },
        encryption: { enabled: false },
        pinned: true
      },
      combinedScope: 'private',
      timestamp: new Date().toISOString()
    };

    const published = await pipe.publishBundle(bundle);
    console.log('Published bundle:', {
      schemaRecord: {
        cid: published.schemaRecord.cid,
        content: published.schemaRecord.content
      },
      dataRecord: {
        cid: published.dataRecord.cid,
        content: published.dataRecord.content
      },
      timestamp: published.timestamp
    });

    // Test 2: Fetch and verify bundle records
    console.log('\nTest 2: Fetching bundle records...');
    if (published.schemaRecord.cid && published.dataRecord.cid) {
      const fetchedSchema = await pipe.fetchRecord(published.schemaRecord.cid, 'private');
      const fetchedData = await pipe.fetchRecord(published.dataRecord.cid, 'private');

      console.log('Fetched schema record:', {
        content: fetchedSchema?.content,
        type: fetchedSchema?.type
      });

      console.log('Fetched data record:', {
        content: fetchedData?.content,
        type: fetchedData?.type
      });

      // Verify content matches
      const schemaMatches = JSON.stringify(fetchedSchema?.content) === JSON.stringify(bundle.schemaRecord.content);
      const dataMatches = JSON.stringify(fetchedData?.content) === JSON.stringify(bundle.dataRecord.content);
      console.log('Content matches original:', {
        schema: schemaMatches,
        data: dataMatches
      });
    }

    // Test 3: Create and publish an encrypted bundle
    console.log('\nTest 3: Publishing an encrypted bundle...');
    const encryptedBundle: PipeBundle = {
      schemaRecord: {
        type: 'schema' as const,
        content: {
          type: 'object',
          properties: {
            secretKey: { type: 'string' },
            value: { type: 'string' }
          },
          required: ['secretKey', 'value']
        },
        scope: 'private' as const,
        accessPolicy: { hiddenFromLLM: true },
        encryption: { 
          enabled: true,
          method: 'AES-GCM',
          keyRef: 'bundleKey1'
        },
        pinned: true
      },
      dataRecord: {
        type: 'data' as const,
        content: {
          secretKey: 'super-secret',
          value: 'classified-data'
        },
        scope: 'private' as const,
        accessPolicy: { hiddenFromLLM: true },
        encryption: { 
          enabled: true,
          method: 'AES-GCM',
          keyRef: 'bundleKey1'
        },
        pinned: true
      },
      combinedScope: 'private',
      timestamp: new Date().toISOString()
    };

    const publishedEncrypted = await pipe.publishBundle(encryptedBundle);
    console.log('Published encrypted bundle:', {
      schemaRecord: {
        cid: publishedEncrypted.schemaRecord.cid,
        encryption: publishedEncrypted.schemaRecord.encryption
      },
      dataRecord: {
        cid: publishedEncrypted.dataRecord.cid,
        encryption: publishedEncrypted.dataRecord.encryption
      }
    });

    // Test 4: Verify pinning of bundle records
    console.log('\nTest 4: Verifying pinned bundle records...');
    const pinnedCids = await pipe.getPinnedCids('private');
    
    const schemaPinned = published.schemaRecord.cid && pinnedCids.includes(published.schemaRecord.cid);
    const dataPinned = published.dataRecord.cid && pinnedCids.includes(published.dataRecord.cid);
    const encryptedSchemaPinned = publishedEncrypted.schemaRecord.cid && 
      pinnedCids.includes(publishedEncrypted.schemaRecord.cid);
    const encryptedDataPinned = publishedEncrypted.dataRecord.cid && 
      pinnedCids.includes(publishedEncrypted.dataRecord.cid);

    console.log('Bundle records are pinned:', {
      plainSchema: schemaPinned,
      plainData: dataPinned,
      encryptedSchema: encryptedSchemaPinned,
      encryptedData: encryptedDataPinned
    });

  } catch (error) {
    console.error('Error during test:', error);
  } finally {
    try {
      await pipe.stop();
      console.log('\nTest completed and node stopped.');
    } catch (error) {
      console.error('Error stopping node:', error);
    }
  }
}

// Run the test
(async () => {
  try {
    await testBundles();
  } catch (error) {
    console.error('Test failed:', error);
    process.exit(1);
  }
})();

================
File: scripts/test-encryption.ts
================
import { PipeProtocol } from '../src/pipe';

async function testEncryption() {
  console.log('Starting encryption test...\n');
  
  const pipe = new PipeProtocol({});

  try {
    // Test 1: Publish an encrypted record
    console.log('Test 1: Publishing an encrypted record...');
    const record = {
      type: 'data' as const,
      content: { secretMessage: 'This is a secret!' },
      scope: 'private' as const,
      accessPolicy: { hiddenFromLLM: true },
      encryption: { 
        enabled: true,
        method: 'AES-GCM',
        keyRef: 'testKey1'
      },
      pinned: true
    };

    const published = await pipe.publishRecord(record);
    console.log('Published encrypted record:', {
      cid: published.cid,
      content: published.content,
      encryption: published.encryption
    });

    // Verify the content is encrypted (should be different from original)
    const contentChanged = JSON.stringify(published.content) !== JSON.stringify(record.content);
    console.log('Content was encrypted (different from original):', contentChanged);

    // Test 2: Publish a record with different encryption settings
    console.log('\nTest 2: Publishing with different encryption settings...');
    const record2 = {
      type: 'data' as const,
      content: { secretMessage: 'Another secret!' },
      scope: 'private' as const,
      accessPolicy: { hiddenFromLLM: true },
      encryption: { 
        enabled: true,
        method: 'AES-GCM',
        keyRef: 'testKey2'
      },
      pinned: true
    };

    const published2 = await pipe.publishRecord(record2);
    console.log('Published second encrypted record:', {
      cid: published2.cid,
      content: published2.content,
      encryption: published2.encryption
    });

    // Test 3: Verify different keys produce different ciphertexts
    console.log('\nTest 3: Verifying different keys produce different ciphertexts...');
    const differentCiphertexts = published.content !== published2.content;
    console.log('Different keys produced different ciphertexts:', differentCiphertexts);

    // Test 4: Publish an unencrypted record
    console.log('\nTest 4: Publishing an unencrypted record...');
    const record3 = {
      type: 'data' as const,
      content: { publicMessage: 'This is public!' },
      scope: 'public' as const,
      accessPolicy: { hiddenFromLLM: false },
      encryption: { enabled: false },
      pinned: true
    };

    const published3 = await pipe.publishRecord(record3);
    console.log('Published unencrypted record:', {
      cid: published3.cid,
      content: published3.content,
      encryption: published3.encryption
    });

    // Verify content matches (should be unchanged)
    const contentUnchanged = JSON.stringify(published3.content) === JSON.stringify(record3.content);
    console.log('Unencrypted content matches original:', contentUnchanged);

    // Test 5: Fetch and verify records
    console.log('\nTest 5: Fetching and verifying records...');
    
    if (published.cid && published2.cid && published3.cid) {
      // Fetch encrypted records
      const fetched1 = await pipe.fetchRecord(published.cid, 'private');
      const fetched2 = await pipe.fetchRecord(published2.cid, 'private');
      const fetched3 = await pipe.fetchRecord(published3.cid, 'public');

      console.log('Fetched records have encryption enabled:', {
        record1: fetched1?.encryption?.enabled,
        record2: fetched2?.encryption?.enabled,
        record3: fetched3?.encryption?.enabled
      });

      // Verify encryption settings are preserved
      const encryptionPreserved = 
        fetched1?.encryption?.enabled === record.encryption.enabled &&
        fetched2?.encryption?.enabled === record2.encryption.enabled &&
        fetched3?.encryption?.enabled === record3.encryption.enabled;

      console.log('Encryption settings preserved:', encryptionPreserved);
    }

  } catch (error) {
    console.error('Error during test:', error);
  } finally {
    try {
      await pipe.stop();
      console.log('\nTest completed and node stopped.');
    } catch (error) {
      console.error('Error stopping node:', error);
    }
  }
}

// Run the test
(async () => {
  try {
    await testEncryption();
  } catch (error) {
    console.error('Test failed:', error);
    process.exit(1);
  }
})();

================
File: scripts/test-ipfs.ts
================
import { IpfsClient } from '../src/ipfsClient.js';
import { PipeRecord, Scope } from '../src/types.js';

async function testIpfsClient() {
  console.log('Starting IPFS Client tests...\n');
  const client = new IpfsClient();

  try {
    // Test 1: Node Initialization and Status
    console.log('Test 1: Testing node initialization and status...');
    const status = await client.getStatus();
    console.log('Node status:', status);
    console.assert(status.localNode === true, 'Local node should be initialized');
    console.assert(status.machineNode === true, 'Machine node should be initialized');
    console.assert(status.userNode === true, 'User node should be initialized');
    console.log('✓ Node initialization test passed\n');

    // Test 2: Publishing and Fetching
    console.log('Test 2: Testing publishing and fetching...');
    const testRecord: PipeRecord = {
      type: 'data',
      content: { test: 'data' },
      scope: 'private',
      pinned: true
    };
    
    const publishedRecord = await client.publish(testRecord);
    console.log('Published record:', publishedRecord);
    console.assert(publishedRecord.cid, 'Published record should have a CID');

    if (!publishedRecord.cid) {
      throw new Error('Published record CID is undefined');
    }

    const fetchedContent = await client.fetch(publishedRecord.cid, 'private');
    console.log('Fetched content:', fetchedContent);
    console.assert(JSON.stringify(fetchedContent) === JSON.stringify(testRecord.content), 
      'Fetched content should match original content');
    console.log('✓ Publishing and fetching test passed\n');

    // Test 3: Pinning Operations
    console.log('Test 3: Testing pinning operations...');
    const pinnedCids = await client.getPinnedCids('private');
    console.log('Pinned CIDs:', pinnedCids);
    console.assert(publishedRecord.cid && pinnedCids.includes(publishedRecord.cid), 
      'Published record should be in pinned CIDs');

    if (publishedRecord.cid) {
      await client.unpin(publishedRecord.cid, 'private');
      const afterUnpinCids = await client.getPinnedCids('private');
      console.assert(!afterUnpinCids.includes(publishedRecord.cid), 
        'Unpinned record should not be in pinned CIDs');
    }
    console.log('✓ Pinning operations test passed\n');

    // Test 4: Cross-scope Access Prevention
    console.log('Test 4: Testing cross-scope access prevention...');
    const machineRecord: PipeRecord = {
      type: 'data',
      content: { scope: 'machine-data' },
      scope: 'machine',
      pinned: true
    };
    
    const publishedMachineRecord = await client.publish(machineRecord);
    
    if (!publishedMachineRecord.cid) {
      throw new Error('Published machine record CID is undefined');
    }

    try {
      await client.fetch(publishedMachineRecord.cid, 'user');
      console.assert(false, 'Should not be able to fetch machine record from user scope');
    } catch (error) {
      console.log('✓ Successfully prevented cross-scope access');
    }
    console.log('✓ Cross-scope access prevention test passed\n');

    // Test 5: Storage Metrics and Configuration
    console.log('Test 5: Testing storage metrics and configuration...');
    const metrics = await client.getStorageMetrics('private');
    console.log('Storage metrics:', metrics);
    console.assert(typeof metrics.repoSize === 'number', 'Storage metrics should include repo size');

    const config = await client.getConfiguration('private');
    console.log('Node configuration:', config);
    console.assert(config.peerId, 'Configuration should include peer ID');
    console.log('✓ Storage metrics and configuration test passed\n');

    console.log('All tests completed successfully!');
  } catch (error) {
    console.error('Test failed:', error);
    if (error instanceof Error) {
      console.error('Error stack:', error.stack);
    }
    process.exit(1);
  } finally {
    await client.stop();
    console.log('IPFS client stopped.');
  }
}

testIpfsClient().catch(error => {
  console.error('Test suite failed:', error);
  process.exit(1);
});

================
File: scripts/test-replication.ts
================
import { PipeProtocol } from '../src/pipe.js';

async function testReplication() {
  console.log('Starting replication test...\n');
  
  const pipe = new PipeProtocol({
    publicNodeEndpoint: 'https://ipfs.infura.io:5001'
  });

  try {
    // Test 1: Publish a record to private scope
    console.log('Test 1: Publishing a record to private scope...');
    const privateRecord = {
      type: 'data' as const,
      content: { message: 'Private data' },
      scope: 'private' as const,
      accessPolicy: { hiddenFromLLM: false },
      encryption: { enabled: false },
      pinned: true
    };

    const publishedPrivate = await pipe.publishRecord(privateRecord);
    console.log('Published private record:', {
      cid: publishedPrivate.cid,
      scope: publishedPrivate.scope
    });

    // Test 2: Replicate to public scope
    console.log('\nTest 2: Replicating to public scope...');
    if (publishedPrivate.cid) {
      await pipe.replicate(publishedPrivate.cid, 'private', 'public');
      console.log('Record replicated to public scope');
    }

    // Test 3: Verify record is accessible in both scopes
    console.log('\nTest 3: Verifying record accessibility...');
    if (publishedPrivate.cid) {
      const privateAccess = await pipe.fetchRecord(publishedPrivate.cid, 'private');
      const publicAccess = await pipe.fetchRecord(publishedPrivate.cid, 'public');

      console.log('Record accessibility:', {
        privateScope: Boolean(privateAccess),
        publicScope: Boolean(publicAccess)
      });
    }

    // Test 4: Test machine scope
    console.log('\nTest 4: Testing machine scope...');
    const machineRecord = {
      type: 'data' as const,
      content: { message: 'Machine-specific data' },
      scope: 'machine' as const,
      accessPolicy: { hiddenFromLLM: false },
      encryption: { enabled: false },
      pinned: true
    };

    const publishedMachine = await pipe.publishRecord(machineRecord);
    console.log('Published machine record:', {
      cid: publishedMachine.cid,
      scope: publishedMachine.scope
    });

    // Test 5: Test user scope
    console.log('\nTest 5: Testing user scope...');
    const userRecord = {
      type: 'data' as const,
      content: { message: 'User-specific data' },
      scope: 'user' as const,
      accessPolicy: { hiddenFromLLM: false },
      encryption: { enabled: false },
      pinned: true
    };

    const publishedUser = await pipe.publishRecord(userRecord);
    console.log('Published user record:', {
      cid: publishedUser.cid,
      scope: publishedUser.scope
    });

    // Test 6: Verify pinning across scopes
    console.log('\nTest 6: Verifying pinning across scopes...');
    const privatePins = await pipe.getPinnedCids('private');
    const publicPins = await pipe.getPinnedCids('public');
    const machinePins = await pipe.getPinnedCids('machine');
    const userPins = await pipe.getPinnedCids('user');

    console.log('Pinned CIDs by scope:', {
      private: privatePins.length,
      public: publicPins.length,
      machine: machinePins.length,
      user: userPins.length
    });

    // Test 7: Test scope isolation
    console.log('\nTest 7: Testing scope isolation...');
    if (publishedMachine.cid && publishedUser.cid) {
      try {
        await pipe.fetchRecord(publishedMachine.cid, 'user');
        console.log('Warning: Machine record accessible from user scope');
      } catch (error) {
        console.log('Expected: Machine record not accessible from user scope');
      }

      try {
        await pipe.fetchRecord(publishedUser.cid, 'machine');
        console.log('Warning: User record accessible from machine scope');
      } catch (error) {
        console.log('Expected: User record not accessible from machine scope');
      }
    }

  } catch (error) {
    console.error('Error during test:', error);
    if (error instanceof Error) {
      console.error('Error stack:', error.stack);
    }
    process.exit(1);
  } finally {
    try {
      await pipe.stop();
      console.log('\nTest completed and node stopped.');
    } catch (error) {
      console.error('Error stopping node:', error);
      if (error instanceof Error) {
        console.error('Error stack:', error.stack);
      }
      process.exit(1);
    }
  }
}

// Run the test
(async () => {
  try {
    await testReplication();
  } catch (error) {
    console.error('Test failed:', error);
    if (error instanceof Error) {
      console.error('Error stack:', error.stack);
    }
    process.exit(1);
  }
})();

================
File: src/__tests__/ipfsClient.test.ts
================
import { IpfsClient } from '../ipfsClient.js';
import { PipeRecord } from '../types.js';

describe('IpfsClient', () => {
  let client: IpfsClient;

  beforeEach(async () => {
    client = new IpfsClient();
  });

  afterEach(async () => {
    await client.stop();
  });

  describe('Initialization', () => {
    it('should initialize all nodes correctly', async () => {
      const status = await client.getStatus();
      expect(status.localNode).toBe(true);
      expect(status.machineNode).toBe(true);
      expect(status.userNode).toBe(true);
      expect(status.publicNode).toBe(true);
    });

    it('should initialize with custom endpoints', async () => {
      const customClient = new IpfsClient({
        localNodeEndpoint: 'http://localhost:5001',
        publicNodeEndpoint: 'https://ipfs.example.com'
      });
      const status = await customClient.getStatus();
      expect(status.localNode).toBe(true);
      expect(status.publicNode).toBe(true);
      await customClient.stop();
    });
  });

  describe('Publishing and Fetching', () => {
    it('should publish and fetch a record successfully', async () => {
      const testRecord: PipeRecord = {
        type: 'data',
        content: { test: 'data' },
        scope: 'private',
        pinned: true,
        metadata: {
          timestamp: new Date().toISOString(),
          version: '1.0.0'
        }
      };

      const publishedRecord = await client.publish(testRecord);
      expect(publishedRecord.cid).toBeDefined();
      
      if (!publishedRecord.cid) {
        throw new Error('Published record CID is undefined');
      }

      const fetchedContent = await client.fetch(publishedRecord.cid, 'private');
      expect(fetchedContent).toEqual(testRecord.content);
    });

    it('should handle publishing without pinning', async () => {
      const testRecord: PipeRecord = {
        type: 'data',
        content: { test: 'unpinned-data' },
        scope: 'private',
        pinned: false
      };

      const publishedRecord = await client.publish(testRecord);
      expect(publishedRecord.cid).toBeDefined();

      const pinnedCids = await client.getPinnedCids('private');
      expect(pinnedCids).not.toContain(publishedRecord.cid);
    });

    it('should fail to fetch non-existent CID', async () => {
      const nonExistentCid = 'bafybeigdyrzt5sfp7udm7hu76uh7y26nf3efuylqabf3oclgtqy55fbzdi';
      await expect(client.fetch(nonExistentCid, 'private')).rejects.toThrow();
    });

    it('should fail to fetch with invalid CID', async () => {
      await expect(client.fetch('invalid-cid', 'private')).rejects.toThrow();
    });
  });

  describe('Pinning Operations', () => {
    let testRecord: PipeRecord;
    let publishedRecord: PipeRecord;

    beforeEach(async () => {
      testRecord = {
        type: 'data',
        content: { test: 'pinning-test' },
        scope: 'private',
        pinned: true
      };
      publishedRecord = await client.publish(testRecord);
      expect(publishedRecord.cid).toBeDefined();
    });

    it('should list pinned CIDs correctly', async () => {
      const pinnedCids = await client.getPinnedCids('private');
      expect(Array.isArray(pinnedCids)).toBe(true);
      expect(pinnedCids).toHaveLength(1);
      expect(pinnedCids[0]).toBe(publishedRecord.cid);
    });

    it('should unpin CIDs correctly', async () => {
      if (!publishedRecord.cid) throw new Error('CID undefined');
      
      await client.unpin(publishedRecord.cid, 'private');
      const pinnedCids = await client.getPinnedCids('private');
      expect(pinnedCids).toHaveLength(0);
    });

    it('should handle unpinning non-existent CID gracefully', async () => {
      const nonExistentCid = 'bafybeigdyrzt5sfp7udm7hu76uh7y26nf3efuylqabf3oclgtqy55fbzdi';
      await expect(client.unpin(nonExistentCid, 'private')).resolves.not.toThrow();
    });

    it('should maintain separate pin sets for different scopes', async () => {
      const privateRecord = await client.publish({
        type: 'data',
        content: { scope: 'private-data' },
        scope: 'private',
        pinned: true
      });

      const publicRecord = await client.publish({
        type: 'data',
        content: { scope: 'public-data' },
        scope: 'public',
        pinned: true
      });

      const privatePins = await client.getPinnedCids('private');
      const publicPins = await client.getPinnedCids('public');

      expect(privatePins).toContain(privateRecord.cid);
      expect(publicPins).toContain(publicRecord.cid);
      expect(privatePins).not.toContain(publicRecord.cid);
      expect(publicPins).not.toContain(privateRecord.cid);
    });
  });

  describe('Replication', () => {
    it('should replicate content between scopes', async () => {
      const testRecord: PipeRecord = {
        type: 'data',
        content: { test: 'replication-test' },
        scope: 'private',
        pinned: true
      };

      const publishedRecord = await client.publish(testRecord);
      expect(publishedRecord.cid).toBeDefined();
      if (!publishedRecord.cid) throw new Error('CID undefined');

      await client.replicate(publishedRecord.cid, 'private', 'public');

      const privatePins = await client.getPinnedCids('private');
      const publicPins = await client.getPinnedCids('public');

      expect(privatePins).toContain(publishedRecord.cid);
      expect(publicPins).toContain(publishedRecord.cid);

      const publicContent = await client.fetch(publishedRecord.cid, 'public');
      expect(publicContent).toEqual(testRecord.content);
    });

    it('should fail to replicate non-existent content', async () => {
      // Use a CID that we know doesn't exist
      const nonExistentCid = 'bafybeigdyrzt5sfp7udm7hu76uh7y26nf3efuylqabf3oclgtqy55fbzdi';
      await expect(client.replicate(nonExistentCid, 'public', 'private'))
        .rejects
        .toThrow('Content not found in source scope');
    });

    it('should fail to replicate with invalid source scope', async () => {
      const testRecord: PipeRecord = {
        type: 'data',
        content: { test: 'scope-test' },
        scope: 'private',
        pinned: true
      };

      const publishedRecord = await client.publish(testRecord);
      if (!publishedRecord.cid) throw new Error('CID undefined');

      await expect(
        client.replicate(publishedRecord.cid, 'invalid-scope' as any, 'public')
      ).rejects.toThrow();
    });
  });

  describe('Storage and Configuration', () => {
    it('should return storage metrics', async () => {
      const metrics = await client.getStorageMetrics('private');
      expect(metrics).toHaveProperty('repoSize');
      expect(metrics).toHaveProperty('blockCount');
      expect(metrics).toHaveProperty('pinnedCount');
      expect(typeof metrics.pinnedCount).toBe('number');
    });

    it('should return node configuration', async () => {
      const config = await client.getConfiguration('private');
      expect(config).toHaveProperty('peerId');
      expect(config).toHaveProperty('addrs');
      expect(Array.isArray(config.addrs)).toBe(true);
    });

    it('should return node info', async () => {
      const info = await client.getNodeInfo('private');
      expect(info).toHaveProperty('peerId');
    });
  });
});

================
File: src/tests/pipe.test.ts
================
import { PipeProtocol } from '../pipe.js';
import { PipeOptions } from '../pipe';
import { pipe } from '../index';
import { createApi } from '../api';
import { PipeRecord, PipeBundle, Scope } from '../types.js';
import { AddressInfo } from 'net';
import { Server } from 'http';
import { expect, describe, test, beforeEach, afterEach, beforeAll, afterAll } from '@jest/globals';

interface NodeStatus {
  localNode: boolean;
  publicNode: boolean;
}

interface NodeInfo {
  peerId: string;
}

interface StorageMetrics {
  repoSize: number;
}

interface NodeConfig {
  peerId: string;
  addrs: string[];
}

interface PublishResponse {
  cid: string;
}

interface FetchResponse {
  content: any;
}

interface StatusResponse extends NodeStatus {}
interface InfoResponse extends NodeInfo {}
interface MetricsResponse extends StorageMetrics {}
interface ConfigResponse extends NodeConfig {}
interface PinnedResponse extends Array<string> {}

const mockRecord: PipeRecord = {
  type: 'data',
  content: { test: 'data' },
  scope: 'private' as Scope,
  accessPolicy: { hiddenFromLLM: false },
  encryption: { enabled: false },
  pinned: true
};

const mockBundle: PipeBundle = {
  schemaRecord: {
    type: 'schema',
    content: {
      type: 'object',
      properties: {
        name: { type: 'string' },
        age: { type: 'number' }
      },
      required: ['name', 'age']
    },
    scope: 'private' as Scope,
    accessPolicy: { hiddenFromLLM: false },
    encryption: { enabled: false },
    pinned: true
  },
  dataRecord: {
    type: 'data',
    content: {
      name: 'John Doe',
      age: 30
    },
    scope: 'private' as Scope,
    accessPolicy: { hiddenFromLLM: false },
    encryption: { enabled: false },
    pinned: true
  },
  combinedScope: 'private',
  timestamp: new Date().toISOString()
};

describe('PipeProtocol', () => {
  let pipe: PipeProtocol;
  
  beforeEach(() => {
    pipe = new PipeProtocol({});
  });

  afterEach(async () => {
    await pipe.stop();
  });

  test('should publish and fetch a record', async () => {
    const published = await pipe.publishRecord(mockRecord);
    expect(published.cid).toBeDefined();

    if (published.cid) {
      const fetched = await pipe.fetchRecord(published.cid, 'private');
      expect(fetched?.content).toEqual(mockRecord.content);
    }
  });

  test('should get node status', async () => {
    const status = await pipe.getStatus() as NodeStatus;
    expect(status).toEqual({
      localNode: true,
      publicNode: false
    });
  });

  test('should get node info', async () => {
    const info = await pipe.getNodeInfo('private') as NodeInfo;
    expect(info).toEqual({
      peerId: expect.any(String)
    });
  });

  test('should get storage metrics', async () => {
    const metrics = await pipe.getStorageMetrics('private') as StorageMetrics;
    expect(metrics).toEqual({
      repoSize: 0
    });
  });

  test('should get configuration', async () => {
    const config = await pipe.getConfiguration('private') as NodeConfig;
    expect(config).toEqual({
      peerId: expect.any(String),
      addrs: []
    });
  });
});

describe('Pipe Core Functionality', () => {
  let pipeProtocol: PipeProtocol;
  let server: Server;
  let port: number;

  beforeAll(async () => {
    const options: PipeOptions = {
      publicNodeEndpoint: 'https://ipfs.infura.io:5001'
    };
    pipeProtocol = new PipeProtocol(options);
    const app = createApi(pipeProtocol);
    server = app.listen(0);
    port = (server.address() as AddressInfo).port;
  });

  afterAll(async() => {
    server.close();
    await pipeProtocol.stop();
  });

  test('Tool Wrapping', () => {
    const tools = [{
      name: 'weatherTool',
      description: 'Get weather data',
      call: () => 'Sunny'
    }];

    const wrapped = pipe(tools);
    const pipeTool = wrapped.find(t => t.name === 'Pipe');
    expect(pipeTool).toBeDefined();
  });

  test('Should publish a record and return a cid', async () => {
    const record = await pipeProtocol.publishRecord(mockRecord);
    expect(record.cid).toBeDefined();
  });

  test('Should publish a record and then fetch it', async () => {
    const published = await pipeProtocol.publishRecord(mockRecord);
    const fetched = await pipeProtocol.fetchRecord(published.cid || '', 'private');
    expect(fetched?.content).toEqual(mockRecord.content);
  });

  test('Should publish a bundle and return two cids', async () => {
    const bundle = await pipeProtocol.publishBundle(mockBundle);
    expect(bundle.dataRecord.cid).toBeDefined();
    expect(bundle.schemaRecord.cid).toBeDefined();
  });

  test('Should pin a record', async () => {
    const published = await pipeProtocol.publishRecord(mockRecord);
    await pipeProtocol.pin(published.cid || '', 'private');
  });

  test('Should unpin a record', async () => {
    const published = await pipeProtocol.publishRecord(mockRecord);
    await pipeProtocol.unpin(published.cid || '', 'private');
  });

  test('Should replicate a record', async () => {
    const published = await pipeProtocol.publishRecord(mockRecord);
    await pipeProtocol.replicate(published.cid || '', 'private', 'public');
  });

  test('Should get node status', async () => {
    const status = await pipeProtocol.getStatus() as NodeStatus;
    expect(status.localNode).toBe(true);
    expect(status.publicNode).toBe(true);
  });

  test('Should get node info', async () => {
    const info = await pipeProtocol.getNodeInfo('private') as NodeInfo;
    expect(info.peerId).toBeDefined();
  });

  test('Should be able to post a record to the api and return a record', async () => {
    const response = await fetch(`http://localhost:${port}/publish`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(mockRecord)
    });
    const data = await response.json() as PublishResponse;
    expect(data.cid).toBeDefined();
  });

  test('Should be able to get a record from the api', async () => {
    const published = await pipeProtocol.publishRecord(mockRecord);
    const response = await fetch(`http://localhost:${port}/fetch?cid=${published.cid}&scope=private`);
    const data = await response.json() as FetchResponse;
    expect(data.content).toEqual(mockRecord.content);
  });

  test('Should be able to get the node status from the api', async () => {
    const response = await fetch(`http://localhost:${port}/node-status`);
    const status = await response.json() as StatusResponse;
    expect(status.localNode).toBe(true);
    expect(status.publicNode).toBe(true);
  });

  test('Should be able to get the node info from the api', async () => {
    const response = await fetch(`http://localhost:${port}/node-info?scope=private`);
    const info = await response.json() as InfoResponse;
    expect(info.peerId).toBeDefined();
  });

  test('Should be able to get storage metrics from the api', async () => {
    const response = await fetch(`http://localhost:${port}/storage-metrics?scope=private`);
    const metrics = await response.json() as MetricsResponse;
    expect(metrics.repoSize).toBeDefined();
  });

  test('Should be able to get the pinned CIDs from the api', async () => {
    const record = await pipeProtocol.publishRecord(mockRecord);
    await pipeProtocol.pin(record.cid || '', 'private');
    const response = await fetch(`http://localhost:${port}/pinned-cids?scope=private`);
    const pins = await response.json() as PinnedResponse;
    expect(pins).toContain(record.cid);
  });

  test('Should be able to get the configuration from the api', async () => {
    const response = await fetch(`http://localhost:${port}/configuration?scope=private`);
    const config = await response.json() as ConfigResponse;
    expect(config.peerId).toBeDefined();
    expect(config.addrs).toBeDefined();
  });
});

================
File: src/api.ts
================
import express from 'express';
import { PipeProtocol } from './pipe';
import { PipeRecord, PipeBundle, Scope } from './types';

export function createApi(pipeProtocol: PipeProtocol) {
  const app = express();
  app.use(express.json());

  app.post('/publish', async (req, res) => {
    try {
      const record = await pipeProtocol.publishRecord(req.body as PipeRecord);
      res.json(record);
    } catch (error) {
      console.error("Error publishing record:", error);
      res.status(500).send("Failed to publish record.");
    }
  });

  app.post('/publish-bundle', async (req, res) => {
    try {
      const bundle = await pipeProtocol.publishBundle(req.body as PipeBundle);
      res.json(bundle);
    } catch(error) {
      console.error("Error publishing bundle:", error);
      res.status(500).send("Failed to publish bundle.");
    }
  });

  app.get('/fetch', async (req, res) => {
    try {
      const { cid, scope } = req.query;
      const data = await pipeProtocol.fetchRecord(cid as string, scope as Scope);
      res.json(data);
    } catch(error) {
      console.error("Error fetching record:", error);
      res.status(500).send("Failed to fetch record.");
    }
  });

  app.post('/pin', async (req, res) => {
    try {
      const { cid, scope } = req.body;
      await pipeProtocol.pin(cid as string, scope as Scope);
      res.status(200).send('Pinned successfully');
    } catch (error) {
      console.error("Error pinning record:", error);
      res.status(500).send("Failed to pin record.");
    }
  });

  app.post('/unpin', async (req, res) => {
    try {
      const { cid, scope } = req.body;
      await pipeProtocol.unpin(cid as string, scope as Scope);
      res.status(200).send('Unpinned successfully');
    } catch(error) {
      console.error("Error unpinning record:", error);
      res.status(500).send("Failed to unpin record.");
    }
  });

  app.post('/replicate', async (req, res) => {
    try {
      const { cid, fromScope, toScope } = req.body;
      await pipeProtocol.replicate(cid as string, fromScope as Scope, toScope as Scope);
      res.status(200).send("Replicated successfully");
    } catch(error) {
      console.error("Error replicating record:", error);
      res.status(500).send("Failed to replicate record.");
    }
  });

  app.get('/node-status', async (req, res) => {
    try {
      const status = await pipeProtocol.getStatus();
      res.json(status);
    } catch (error) {
      console.error('Error getting node status:', error);
      res.status(500).send("Failed to fetch node status.");
    }
  });

  app.get('/node-info', async (req, res) => {
    try {
      const { scope } = req.query;
      const info = await pipeProtocol.getNodeInfo(scope as Scope);
      res.json(info);
    } catch(error) {
      console.error('Error getting node info:', error);
      res.status(500).send("Failed to fetch node info.");
    }
  });

  app.get('/storage-metrics', async (req, res) => {
    try {
      const { scope } = req.query;
      const metrics = await pipeProtocol.getStorageMetrics(scope as Scope);
      res.json(metrics);
    } catch(error) {
      console.error('Error getting storage metrics:', error);
      res.status(500).send("Failed to fetch storage metrics");
    }
  });

  app.get('/pinned-cids', async(req, res) => {
    try {
      const { scope } = req.query;
      const pins = await pipeProtocol.getPinnedCids(scope as Scope);
      res.json(pins);
    } catch(error) {
      console.error('Error getting pinned CIDs:', error);
      res.status(500).send('Failed to fetch pinned cids');
    }
  });

  app.get('/configuration', async (req, res) => {
    try {
      const { scope } = req.query;
      const config = await pipeProtocol.getConfiguration(scope as Scope);
      res.json(config);
    } catch(error) {
      console.error('Error getting configuration:', error);
      res.status(500).send('Failed to fetch configuration');
    }
  });

  return app;
}

================
File: src/encryption.ts
================
export class EncryptionService {
  encrypt(plaintext: string, method?: string, keyRef?: string): string {
    const methodString = method || "AES-GCM";
    const keyRefString = keyRef || "defaultKey";
    // In a real application, use proper encryption here
    const encryptedData = {
      data: plaintext,
      method: methodString,
      keyRef: keyRefString
    };
    return `encrypted:${Buffer.from(JSON.stringify(encryptedData)).toString('base64')}`;
  }

  decrypt(ciphertext: string, method?: string, keyRef?: string): string {
    if (!ciphertext.startsWith('encrypted:')) {
      throw new Error('Invalid encrypted data format');
    }
    
    const base64Data = ciphertext.slice(10); // Remove 'encrypted:' prefix
    const decryptedJson = Buffer.from(base64Data, 'base64').toString();
    const { data } = JSON.parse(decryptedJson);
    return data;
  }

  getEncryptionInfo(ciphertext: string): { method: string; keyRef: string } | null {
    if (!ciphertext.startsWith('encrypted:')) {
      return null;
    }
    
    try {
      const base64Data = ciphertext.slice(10); // Remove 'encrypted:' prefix
      const decryptedJson = Buffer.from(base64Data, 'base64').toString();
      const { method, keyRef } = JSON.parse(decryptedJson);
      return { method, keyRef };
    } catch (error) {
      console.warn('Failed to extract encryption info:', error);
      return null;
    }
  }
}

================
File: src/index.ts
================
import { PipeProtocol } from './pipe';
import { PipeRecord, PipeBundle, Scope } from './types';

interface Tool {
  name: string;
  description: string;
  call: (...args: any[]) => any;
}

interface PipeTool {
  name: string;
  description: string;
  call: (method: string, args: any) => Promise<PipeRecord | PipeBundle | null | void>;
}

export function pipe(tools: Tool[]): (Tool | PipeTool)[] {
  const pipeProtocol = new PipeProtocol();

  const pipeTool: PipeTool = {
    name: 'Pipe',
    description: `
      A special tool that allows referencing large data via IPFS.
      You can publish data or fetch data by CID.
      Example usage:
        - publishRecord({type, content, scope, pinned, encryption, accessPolicy})
        - fetchRecord(cid, scope)
        - publishBundle({schemaRecord, dataRecord, combinedScope})
        - pin(cid, scope)
        - unpin(cid, scope)
        - replicate(cid, fromScope, toScope)
        - getStatus()
        - getNodeInfo(scope)
        - getStorageMetrics(scope)
        - getPinnedCids(scope)
        - getConfiguration(scope)
      The LLM typically should not decrypt hidden data if hiddenFromLLM = true.
    `,
    call: async (method: string, args: any) => {
      switch (method) {
        case 'publishRecord':
          return pipeProtocol.publishRecord(args as PipeRecord);
        case 'fetchRecord':
          return pipeProtocol.fetchRecord(args.cid, args.scope as Scope);
        case 'publishBundle':
          return pipeProtocol.publishBundle(args as PipeBundle);
        case 'pin':
          return pipeProtocol.pin(args.cid, args.scope as Scope);
        case 'unpin':
          return pipeProtocol.unpin(args.cid, args.scope as Scope);
        case 'replicate':
          return pipeProtocol.replicate(args.cid, args.fromScope as Scope, args.toScope as Scope);
        case 'getStatus':
          return pipeProtocol.getStatus();
        case 'getNodeInfo':
          return pipeProtocol.getNodeInfo(args.scope as Scope);
        case 'getStorageMetrics':
          return pipeProtocol.getStorageMetrics(args.scope as Scope);
        case 'getPinnedCids':
          return pipeProtocol.getPinnedCids(args.scope as Scope);
        case 'getConfiguration':
          return pipeProtocol.getConfiguration(args.scope as Scope);
        default:
          throw new Error(`Unknown Pipe method: ${method}`);
      }
    },
  };

  return [...tools, pipeTool];
}

================
File: src/ipfsClient.ts
================
import { createHelia, Helia } from 'helia';
import { PipeRecord, Scope } from './types.js';
import { config } from 'dotenv';
import { CID } from 'multiformats/cid';
import * as raw from 'multiformats/codecs/raw';
import { sha256 } from 'multiformats/hashes/sha2';
import { MemoryBlockstore } from 'blockstore-core';
config();

interface PipeIpfsOptions {
  localNodeEndpoint?: string;
  publicNodeEndpoint?: string;
}

export class IpfsClient {
  private localNode!: Helia;
  private publicNode?: Helia;
  private machineNode?: Helia;
  private userNode?: Helia;
  private initialized: Promise<void>;
  private localPinnedCids: Set<string>;
  private publicPinnedCids: Set<string>;
  private machinePinnedCids: Set<string>;
  private userPinnedCids: Set<string>;

  constructor(options: PipeIpfsOptions = {}) {
    console.log('Initializing IpfsClient...');
    try {
      const { localNodeEndpoint, publicNodeEndpoint } = options;
      console.log('Creating pinned CID sets...');
      this.localPinnedCids = new Set();
      this.publicPinnedCids = new Set();
      this.machinePinnedCids = new Set();
      this.userPinnedCids = new Set();
      console.log('Starting IPFS node initialization...');
      this.initialized = this.init(localNodeEndpoint, publicNodeEndpoint).catch(error => {
        console.error('Error during IPFS initialization:', error);
        if (error instanceof Error) {
          console.error('Error stack:', error.stack);
        }
        throw error;
      });
      console.log('IpfsClient constructor complete.');
    } catch (error) {
      console.error('Error in IpfsClient constructor:', error);
      if (error instanceof Error) {
        console.error('Error stack:', error.stack);
      }
      throw error;
    }
  }

  private async init(localNodeEndpoint?: string, publicNodeEndpoint?: string) {
    try {
      console.log('Creating local IPFS node...');
      // Initialize with memory blockstore for testing
      const blockstore = new MemoryBlockstore();
      
      this.localNode = await createHelia({
        blockstore,
        start: true
      });
      console.log('Local IPFS node created successfully.');
      
      if(publicNodeEndpoint || process.env.PUBLIC_IPFS_ENDPOINT) {
        console.log('Creating public IPFS node...');
        const publicEndpoint = publicNodeEndpoint || process.env.PUBLIC_IPFS_ENDPOINT || 'https://ipfs.infura.io:5001';
        const publicBlockstore = new MemoryBlockstore();
        this.publicNode = await createHelia({
          blockstore: publicBlockstore,
          start: true
        });
        console.log('Public IPFS node created successfully.');
      }

      // Create machine and user nodes with separate blockstores
      console.log('Creating machine IPFS node...');
      const machineBlockstore = new MemoryBlockstore();
      this.machineNode = await createHelia({
        blockstore: machineBlockstore,
        start: true
      });
      console.log('Machine IPFS node created successfully.');

      console.log('Creating user IPFS node...');
      const userBlockstore = new MemoryBlockstore();
      this.userNode = await createHelia({
        blockstore: userBlockstore,
        start: true
      });
      console.log('User IPFS node created successfully.');
    } catch (error) {
      console.error('Failed to initialize IPFS client:', error);
      if (error instanceof Error) {
        console.error('Error stack:', error.stack);
      }
      throw error;
    }
  }

  private async getNode(scope: Scope): Promise<{ node: Helia; pinnedCids: Set<string> }> {
    await this.initialized;
    switch (scope) {
      case 'public':
        if (!this.publicNode) {
          throw new Error("Cannot use public scope when no public endpoint is provided");
        }
        return { node: this.publicNode, pinnedCids: this.publicPinnedCids };
      case 'machine':
        if (!this.machineNode) {
          throw new Error("Machine node not initialized");
        }
        return { node: this.machineNode, pinnedCids: this.machinePinnedCids };
      case 'user':
        if (!this.userNode) {
          throw new Error("User node not initialized");
        }
        return { node: this.userNode, pinnedCids: this.userPinnedCids };
      case 'private':
        if (!this.localNode) {
          throw new Error("Local node not initialized");
        }
        return { node: this.localNode, pinnedCids: this.localPinnedCids };
      default:
        throw new Error(`Invalid scope: ${scope}`);
    }
  }

  private async createCID(bytes: Uint8Array): Promise<CID> {
    const hash = await sha256.digest(bytes);
    return CID.create(1, raw.code, hash);
  }

  public async publish(record: PipeRecord): Promise<PipeRecord> {
    const { node } = await this.getNode(record.scope);
    const content = JSON.stringify(record.content);
    const encoder = new TextEncoder();
    const bytes = encoder.encode(content);
    const cid = await this.createCID(bytes);
    
    // Store the content
    await node.blockstore.put(cid, bytes);
    
    // Pin if requested
    if (record.pinned) {
      try {
        await this.pin(cid.toString(), record.scope);
      } catch (error) {
        console.warn('Failed to pin content:', error);
        // Continue even if pinning fails
      }
    }
    
    return {...record, cid: cid.toString()};
  }

  public async fetch(cidStr: string, scope: Scope): Promise<any> {
    const { node, pinnedCids } = await this.getNode(scope);
    
    try {
      const cid = CID.parse(cidStr);
      
      // Check if the CID is pinned in this scope
      if (!pinnedCids.has(cidStr)) {
        throw new Error(`Content with CID ${cidStr} is not available in ${scope} scope`);
      }

      const bytes = await node.blockstore.get(cid);
      const decoder = new TextDecoder();
      const content = decoder.decode(bytes);
      return JSON.parse(content);
    } catch (error) {
      if (error instanceof Error) {
        if (error.message.includes('is not available')) {
          throw error;
        }
        throw new Error(`Failed to fetch content: ${error.message}`);
      }
      throw new Error('An unknown error occurred while fetching content');
    }
  }

  public async pin(cidStr: string, scope: Scope): Promise<void> {
    const { node, pinnedCids } = await this.getNode(scope);
    const cid = CID.parse(cidStr);
    try {
      // Verify the content exists before pinning
      await node.blockstore.get(cid);
      pinnedCids.add(cidStr);
    } catch (error) {
      console.error('Error pinning content:', error);
      throw error;
    }
  }

  public async unpin(cidStr: string, scope: Scope): Promise<void> {
    const { pinnedCids } = await this.getNode(scope);
    pinnedCids.delete(cidStr);
  }

  public async replicate(cidStr: string, fromScope: Scope, toScope: Scope): Promise<void> {
    console.log(`Starting replication from ${fromScope} to ${toScope} for CID: ${cidStr}`);
    
    try {
      // Validate scopes
      if (!['private', 'public', 'machine', 'user'].includes(fromScope)) {
        throw new Error(`Invalid source scope: ${fromScope}`);
      }
      if (!['private', 'public', 'machine', 'user'].includes(toScope)) {
        throw new Error(`Invalid target scope: ${toScope}`);
      }

      // Get source and target nodes
      const { node: sourceNode, pinnedCids: sourcePinnedCids } = await this.getNode(fromScope);
      const { node: targetNode } = await this.getNode(toScope);

      // Check if the content exists in the source scope
      if (!sourcePinnedCids.has(cidStr)) {
        throw new Error('Content not found in source scope');
      }

      // Get the content from source
      const cid = CID.parse(cidStr);
      let bytes: Uint8Array | undefined;
      try {
        bytes = await sourceNode.blockstore.get(cid);
      } catch (error) {
        throw new Error('Content not found in source scope');
      }

      if (!bytes || bytes.length === 0) {
        throw new Error('Content not found in source scope');
      }

      // Store in target
      await targetNode.blockstore.put(cid, bytes);

      // Pin in target scope
      await this.pin(cidStr, toScope);

      console.log(`Successfully replicated CID ${cidStr} from ${fromScope} to ${toScope}`);
    } catch (error) {
      console.error(`Error during replication:`, error);
      if (error instanceof Error) {
        console.error('Error stack:', error.stack);
      }
      throw error instanceof Error ? error : new Error('Unknown error during replication');
    }
  }

  public async stop(): Promise<void> {
    await this.initialized;
    await this.localNode.stop();
    if(this.publicNode) await this.publicNode.stop();
    if(this.machineNode) await this.machineNode.stop();
    if(this.userNode) await this.userNode.stop();
  }

  public async getStatus(): Promise<any> {
    await this.initialized;
    return {
      localNode: Boolean(this.localNode),
      publicNode: Boolean(this.publicNode),
      machineNode: Boolean(this.machineNode),
      userNode: Boolean(this.userNode)
    };
  }

  public async getNodeInfo(scope: Scope): Promise<any> {
    const { node } = await this.getNode(scope);
    return {
      peerId: node.toString()
    };
  }

  public async getStorageMetrics(scope: Scope): Promise<any> {
    const { node, pinnedCids } = await this.getNode(scope);
    return {
      repoSize: 0, // Blockstore size not directly accessible
      blockCount: 0, // Block count not directly accessible
      pinnedCount: pinnedCids.size
    };
  }

  public async getPinnedCids(scope: Scope): Promise<string[]> {
    const { pinnedCids } = await this.getNode(scope);
    return Array.from(pinnedCids);
  }

  public async getConfiguration(scope: Scope): Promise<any> {
    const { node } = await this.getNode(scope);
    return {
      peerId: node.toString(),
      addrs: []
    };
  }
}

================
File: src/pipe.ts
================
import { IpfsClient } from './ipfsClient.js';
import { EncryptionService } from './encryption.js';
import { PipeRecord, PipeBundle, Scope, EncryptionInfo } from './types.js';
import { PipeRecordSchema, PipeBundleSchema } from './schema.js';

export interface PipeOptions {
  localNodeEndpoint?: string;
  publicNodeEndpoint?: string;
}

export class PipeProtocol {
  private ipfs: IpfsClient;
  private encryption: EncryptionService;

  constructor(options: PipeOptions = {}) {
    console.log('Initializing PipeProtocol...');
    try {
      console.log('Creating EncryptionService...');
      this.encryption = new EncryptionService();
      console.log('Creating IpfsClient...');
      this.ipfs = new IpfsClient(options);
      console.log('PipeProtocol initialization complete.');
    } catch (error) {
      console.error('Error during PipeProtocol initialization:', error);
      if (error instanceof Error) {
        console.error('Error stack:', error.stack);
      }
      throw error;
    }
  }

  public async publishRecord(record: PipeRecord): Promise<PipeRecord> {
    const parsedRecord = await PipeRecordSchema.parseAsync(record);
    const validRecord: PipeRecord = {
      ...parsedRecord,
      type: parsedRecord.type,
      scope: parsedRecord.scope,
      cid: parsedRecord.cid || undefined
    };

    if(validRecord.encryption?.enabled && !validRecord.encryption?.ciphertext && validRecord.content) {
      const method = validRecord.encryption?.method || "AES-GCM";
      const keyRef = validRecord.encryption?.keyRef || "defaultKey";

      const plaintext = typeof validRecord.content === 'string'
        ? validRecord.content
        : JSON.stringify(validRecord.content);
      
      const encrypted = this.encryption.encrypt(plaintext, method, keyRef);

      validRecord.content = encrypted;
      validRecord.encryption.ciphertext = true;
    }
    return this.ipfs.publish(validRecord);
  }

  public async publishBundle(bundle: PipeBundle): Promise<PipeBundle> {
    const parsedBundle = await PipeBundleSchema.parseAsync(bundle);
    const validBundle: PipeBundle = {
      ...parsedBundle,
      schemaRecord: {
        ...parsedBundle.schemaRecord,
        type: parsedBundle.schemaRecord.type,
        scope: parsedBundle.schemaRecord.scope,
        cid: parsedBundle.schemaRecord.cid || undefined
      },
      dataRecord: {
        ...parsedBundle.dataRecord,
        type: parsedBundle.dataRecord.type,
        scope: parsedBundle.dataRecord.scope,
        cid: parsedBundle.dataRecord.cid || undefined
      }
    };
    
    const publishedSchema = await this.publishRecord(validBundle.schemaRecord);
    const publishedData = await this.publishRecord(validBundle.dataRecord);

    return {
      ...validBundle,
      schemaRecord: publishedSchema,
      dataRecord: publishedData,
      timestamp: new Date().toISOString(),
    };
  }

  public async fetchRecord(cid: string, scope: Scope): Promise<PipeRecord | null> {
    const content = await this.ipfs.fetch(cid, scope);
    if (!content) return null;

    // If the content is a string and starts with 'encrypted:', it's an encrypted record
    const isEncrypted = typeof content === 'string' && content.startsWith('encrypted:');
    
    // Get encryption info if the content is encrypted
    let encryptionInfo: EncryptionInfo = { enabled: false };
    if (isEncrypted && typeof content === 'string') {
      const info = this.encryption.getEncryptionInfo(content);
      if (info) {
        encryptionInfo = {
          enabled: true,
          method: info.method,
          keyRef: info.keyRef,
          ciphertext: true
        };
      }
    }
    
    return {
      cid,
      content,
      type: 'data',
      scope,
      accessPolicy: { hiddenFromLLM: false },
      encryption: encryptionInfo
    };
  }

  public async pin(cid: string, scope: Scope): Promise<void> {
    return this.ipfs.pin(cid, scope);
  }

  public async unpin(cid: string, scope: Scope): Promise<void> {
    return this.ipfs.unpin(cid, scope);
  }

  public async replicate(cid: string, fromScope: Scope, toScope: Scope): Promise<void> {
    return this.ipfs.replicate(cid, fromScope, toScope);
  }

  public async stop() {
    await this.ipfs.stop();
  }

  public getStatus() {
    return this.ipfs.getStatus();
  }

  public getNodeInfo(scope: Scope) {
    return this.ipfs.getNodeInfo(scope);
  }

  public async getStorageMetrics(scope: Scope): Promise<any> {
    return this.ipfs.getStorageMetrics(scope);
  }

  public async getPinnedCids(scope: Scope): Promise<any> {
    return this.ipfs.getPinnedCids(scope);
  }

  public getConfiguration(scope: Scope): any {
    return this.ipfs.getConfiguration(scope);
  }
}

================
File: src/schema.ts
================
import { z } from 'zod';
import { AccessPolicy, EncryptionInfo } from './types';

const EncryptionSchema: z.ZodSchema<EncryptionInfo> = z.object({
  enabled: z.boolean(),
  method: z.string().optional(),
  keyRef: z.string().optional(),
  nonce: z.string().optional(),
  ciphertext: z.boolean().optional(),
});

const AccessPolicySchema: z.ZodSchema<AccessPolicy> = z.object({
  hiddenFromLLM: z.boolean().optional(),
  allowedTools: z.array(z.string()).optional(),
  allowedUsers: z.array(z.string()).optional(),
});

export const PipeRecordSchema = z.object({
  type: z.enum(['data', 'schema']),
  cid: z.string().nullable().optional(),
  content: z.any().nullable().optional(),
  scope: z.enum(['private', 'public', 'machine', 'user']),
  pinned: z.boolean().optional(),
  encryption: EncryptionSchema.optional(),
  accessPolicy: AccessPolicySchema.optional(),
  metadata: z.record(z.any()).optional(),
});

export const PipeBundleSchema = z.object({
  schemaRecord: PipeRecordSchema,
  dataRecord: PipeRecordSchema,
  combinedScope: z.enum(['private', 'public', 'machine', 'user']),
  timestamp: z.string().datetime(),
});

================
File: src/types.ts
================
export interface EncryptionInfo {
  enabled: boolean;
  method?: string;
  keyRef?: string;
  nonce?: string;
  ciphertext?: boolean;
}

export interface AccessPolicy {
  hiddenFromLLM?: boolean;
  allowedTools?: string[];
  allowedUsers?: string[];
}

export type Scope = "private" | "public" | "machine" | "user";

export interface PipeRecord {
  type: "data" | "schema";
  cid?: string;
  content?: any;
  scope: Scope;
  pinned?: boolean;
  encryption?: EncryptionInfo;
  accessPolicy?: AccessPolicy;
  metadata?: Record<string, any>;
}

export interface PipeBundle {
  schemaRecord: PipeRecord;
  dataRecord: PipeRecord;
  combinedScope: Scope;
  timestamp: string;
}

================
File: .gitignore
================
node_modules
dist
*.log
.env
coverage

================
File: jest.config.js
================
export default {
  preset: 'ts-jest',
  testEnvironment: 'node',
  extensionsToTreatAsEsm: ['.ts'],
  moduleNameMapper: {
    '^(\\.{1,2}/.*)\\.js$': '$1',
  },
  transform: {
    '^.+\\.tsx?$': [
      'ts-jest',
      {
        useESM: true,
      },
    ],
  },
  testMatch: ['**/__tests__/**/*.test.ts'],
  verbose: true,
  testTimeout: 30000, // IPFS operations might take time
  collectCoverage: true,
  coverageDirectory: 'coverage',
  coverageReporters: ['text', 'lcov', 'clover'],
  collectCoverageFrom: [
    'src/**/*.ts',
    '!src/**/*.d.ts',
    '!src/**/*.test.ts',
    '!src/types.ts'
  ],
  coverageThreshold: {
    global: {
      branches: 80,
      functions: 80,
      lines: 80,
      statements: 80
    }
  }
};

================
File: jest.setup.cjs
================
const { TextEncoder, TextDecoder } = require('util');
global.TextEncoder = TextEncoder;
global.TextDecoder = TextDecoder;

jest.mock('helia', () => ({
  createHelia: jest.fn().mockResolvedValue({
    blockstore: {
      put: jest.fn(),
      get: jest.fn()
    },
    stop: jest.fn()
  }),
  Helia: jest.fn()
}));

jest.mock('multiformats/cid', () => ({
  CID: {
    parse: jest.fn(),
    create: jest.fn()
  }
}));

jest.mock('multiformats/codecs/raw', () => ({
  code: 0x55,
  encode: jest.fn(),
  decode: jest.fn()
}));

jest.mock('multiformats/hashes/sha2', () => ({
  sha256: {
    code: 0x12,
    digest: jest.fn()
  }
}));

jest.mock('blockstore-core', () => ({
  MemoryBlockstore: jest.fn().mockImplementation(() => ({
    put: jest.fn(),
    get: jest.fn(),
    has: jest.fn(),
    delete: jest.fn()
  }))
}));

================
File: package.json
================
{
  "name": "pipe-core",
  "version": "1.0.0",
  "description": "A protocol for sharing data between LLMs via IPFS",
  "main": "dist/index.js",
  "types": "dist/index.d.ts",
  "type": "module",
  "scripts": {
    "build": "tsc",
    "build:scripts": "tsc",
    "test": "jest",
    "start": "node dist/index.js",
    "dev": "node --loader ts-node/esm src/index.ts",
    "lint": "eslint src/**/*.ts",
    "clean": "rm -rf dist",
    "pretest:basic": "npm run build",
    "pretest:encryption": "npm run build",
    "pretest:bundles": "npm run build",
    "pretest:api": "npm run build",
    "pretest:replication": "npm run build",
    "pretest:ipfs": "npm run build",
    "test:basic": "node dist/scripts/test-basic-operations.js",
    "test:encryption": "node dist/scripts/test-encryption.js",
    "test:bundles": "node dist/scripts/test-bundles.js",
    "test:api": "node dist/scripts/test-api.js",
    "test:replication": "node dist/scripts/test-replication.js",
    "test:ipfs": "node dist/scripts/test-ipfs.js",
    "test:all": "npm run test:basic && npm run test:encryption && npm run test:bundles && npm run test:api && npm run test:replication && npm run test:ipfs",
    "test:jest": "node --experimental-vm-modules node_modules/jest/bin/jest.js",
    "test:jest:watch": "node --experimental-vm-modules node_modules/jest/bin/jest.js --watch"
  },
  "keywords": [
    "ipfs",
    "llm",
    "data-sharing",
    "protocol"
  ],
  "author": "",
  "license": "ISC",
  "dependencies": {
    "@helia/unixfs": "^4.0.2",
    "@types/express": "^5.0.0",
    "@types/jest": "^29.5.14",
    "@types/node": "^22.13.0",
    "blockstore-core": "^5.0.2",
    "dotenv": "^16.4.7",
    "express": "^4.21.2",
    "helia": "^5.2.0",
    "jest": "^29.7.0",
    "multiformats": "^13.3.1",
    "node-fetch": "^2.7.0",
    "ts-jest": "^29.2.5",
    "ts-node": "^10.9.2",
    "typescript": "^5.7.3",
    "zod": "^3.24.1"
  }
}

================
File: README.md
================
# Pipe Core

A protocol for sharing data between LLMs via IPFS with in-process nodes and visibility tooling.

## Features

- In-process IPFS nodes (local and public)
- Data encryption support
- Schema validation
- Access policy management
- API endpoints for data management
- Comprehensive testing suite

## Installation

```bash
npm install
```

## Configuration

Create a `.env` file with the following variables:

```env
LOCAL_IPFS_ENDPOINT="http://localhost:5001"
PUBLIC_IPFS_ENDPOINT="https://ipfs.infura.io:5001"
```

## Usage

### Building the Project

```bash
npm run build
```

### Running Tests

```bash
npm test
```

### Starting the Server

```bash
npm start
```

### Development Mode

```bash
npm run dev
```

## API Endpoints

- `POST /publish` - Publish a record
- `POST /publish-bundle` - Publish a bundle (schema + data)
- `GET /fetch` - Fetch a record by CID
- `POST /pin` - Pin a record
- `POST /unpin` - Unpin a record
- `POST /replicate` - Replicate a record between scopes
- `GET /node-status` - Get node status
- `GET /node-info` - Get node information
- `GET /storage-metrics` - Get storage metrics
- `GET /pinned-cids` - Get pinned CIDs
- `GET /configuration` - Get node configuration

## License

ISC

================
File: tsconfig.json
================
{
  "compilerOptions": {
    /* Visit https://aka.ms/tsconfig to read more about this file */

    /* Projects */
    // "incremental": true,                              /* Save .tsbuildinfo files to allow for incremental compilation of projects. */
    // "composite": true,                                /* Enable constraints that allow a TypeScript project to be used with project references. */
    // "tsBuildInfoFile": "./.tsbuildinfo",              /* Specify the path to .tsbuildinfo incremental compilation file. */
    // "disableSourceOfProjectReferenceRedirect": true,  /* Disable preferring source files instead of declaration files when referencing composite projects. */
    // "disableSolutionSearching": true,                 /* Opt a project out of multi-project reference checking when editing. */
    // "disableReferencedProjectLoad": true,             /* Reduce the number of projects loaded automatically by TypeScript. */

    /* Language and Environment */
    "target": "ES2020",
    "lib": ["ES2020"],
    // "jsx": "preserve",                                /* Specify what JSX code is generated. */
    // "experimentalDecorators": true,                   /* Enable experimental support for legacy experimental decorators. */
    // "emitDecoratorMetadata": true,                    /* Emit design-type metadata for decorated declarations in source files. */
    // "jsxFactory": "",                                 /* Specify the JSX factory function used when targeting React JSX emit, e.g. 'React.createElement' or 'h'. */
    // "jsxFragmentFactory": "",                         /* Specify the JSX Fragment reference used for fragments when targeting React JSX emit e.g. 'React.Fragment' or 'Fragment'. */
    // "jsxImportSource": "",                            /* Specify module specifier used to import the JSX factory functions when using 'jsx: react-jsx*'. */
    // "reactNamespace": "",                             /* Specify the object invoked for 'createElement'. This only applies when targeting 'react' JSX emit. */
    // "noLib": true,                                    /* Disable including any library files, including the default lib.d.ts. */
    // "useDefineForClassFields": true,                  /* Emit ECMAScript-standard-compliant class fields. */
    // "moduleDetection": "auto",                        /* Control what method is used to detect module-format JS files. */

    /* Modules */
    "module": "ES2020",
    "moduleResolution": "node",
    // "baseUrl": "./",                                  /* Specify the base directory to resolve non-relative module names. */
    // "paths": {},                                      /* Specify a set of entries that re-map imports to additional lookup locations. */
    // "rootDirs": [],                                   /* Allow multiple folders to be treated as one when resolving modules. */
    // "typeRoots": [],                                  /* Specify multiple folders that act like './node_modules/@types'. */
    // "types": [],                                      /* Specify type package names to be included without being referenced in a source file. */
    // "allowUmdGlobalAccess": true,                     /* Allow accessing UMD globals from modules. */
    // "moduleSuffixes": [],                             /* List of file name suffixes to search when resolving a module. */
    // "allowImportingTsExtensions": true,               /* Allow imports to include TypeScript file extensions. Requires '--moduleResolution bundler' and either '--noEmit' or '--emitDeclarationOnly' to be set. */
    // "rewriteRelativeImportExtensions": true,          /* Rewrite '.ts', '.tsx', '.mts', and '.cts' file extensions in relative import paths to their JavaScript equivalent in output files. */
    // "resolvePackageJsonExports": true,                /* Use the package.json 'exports' field when resolving package imports. */
    // "resolvePackageJsonImports": true,                /* Use the package.json 'imports' field when resolving imports. */
    // "customConditions": [],                           /* Conditions to set in addition to the resolver-specific defaults when resolving imports. */
    // "noUncheckedSideEffectImports": true,             /* Check side effect imports. */
    "resolveJsonModule": true,
    // "allowArbitraryExtensions": true,                 /* Enable importing files with any extension, provided a declaration file is present. */
    // "noResolve": true,                                /* Disallow 'import's, 'require's or '<reference>'s from expanding the number of files TypeScript should add to a project. */

    /* JavaScript Support */
    "allowJs": true,
    // "checkJs": true,                                  /* Enable error reporting in type-checked JavaScript files. */
    // "maxNodeModuleJsDepth": 1,                        /* Specify the maximum folder depth used for checking JavaScript files from 'node_modules'. Only applicable with 'allowJs'. */

    /* Emit */
    "declaration": true,
    "declarationMap": true,
    // "emitDeclarationOnly": true,                      /* Only output d.ts files and not JavaScript files. */
    "sourceMap": true,
    // "inlineSourceMap": true,                          /* Include sourcemap files inside the emitted JavaScript. */
    // "noEmit": true,                                   /* Disable emitting files from a compilation. */
    // "outFile": "./",                                  /* Specify a file that bundles all outputs into one JavaScript file. If 'declaration' is true, also designates a file that bundles all .d.ts output. */
    "outDir": "./dist",
    // "removeComments": true,                           /* Disable emitting comments. */
    // "importHelpers": true,                            /* Allow importing helper functions from tslib once per project, instead of including them per-file. */
    // "downlevelIteration": true,                       /* Emit more compliant, but verbose and less performant JavaScript for iteration. */
    // "sourceRoot": "",                                 /* Specify the root path for debuggers to find the reference source code. */
    // "mapRoot": "",                                    /* Specify the location where debugger should locate map files instead of generated locations. */
    // "inlineSources": true,                            /* Include source code in the sourcemaps inside the emitted JavaScript. */
    // "emitBOM": true,                                  /* Emit a UTF-8 Byte Order Mark (BOM) in the beginning of output files. */
    // "newLine": "crlf",                                /* Set the newline character for emitting files. */
    // "stripInternal": true,                            /* Disable emitting declarations that have '@internal' in their JSDoc comments. */
    // "noEmitHelpers": true,                            /* Disable generating custom helper functions like '__extends' in compiled output. */
    // "noEmitOnError": true,                            /* Disable emitting files if any type checking errors are reported. */
    // "preserveConstEnums": true,                       /* Disable erasing 'const enum' declarations in generated code. */
    // "declarationDir": "./",                           /* Specify the output directory for generated declaration files. */

    /* Interop Constraints */
    "isolatedModules": true,
    // "verbatimModuleSyntax": true,                     /* Do not transform or elide any imports or exports not marked as type-only, ensuring they are written in the output file's format based on the 'module' setting. */
    // "isolatedDeclarations": true,                     /* Require sufficient annotation on exports so other tools can trivially generate declaration files. */
    "allowSyntheticDefaultImports": true,
    // "preserveSymlinks": true,                         /* Disable resolving symlinks to their realpath. This correlates to the same flag in node. */
    "forceConsistentCasingInFileNames": true,

    /* Type Checking */
    "strict": true,
    // "noImplicitAny": true,                            /* Enable error reporting for expressions and declarations with an implied 'any' type. */
    // "strictNullChecks": true,                         /* When type checking, take into account 'null' and 'undefined'. */
    // "strictFunctionTypes": true,                      /* When assigning functions, check to ensure parameters and the return values are subtype-compatible. */
    // "strictBindCallApply": true,                      /* Check that the arguments for 'bind', 'call', and 'apply' methods match the original function. */
    // "strictPropertyInitialization": true,             /* Check for class properties that are declared but not set in the constructor. */
    // "strictBuiltinIteratorReturn": true,              /* Built-in iterators are instantiated with a 'TReturn' type of 'undefined' instead of 'any'. */
    // "noImplicitThis": true,                           /* Enable error reporting when 'this' is given the type 'any'. */
    // "useUnknownInCatchVariables": true,               /* Default catch clause variables as 'unknown' instead of 'any'. */
    // "alwaysStrict": true,                             /* Ensure 'use strict' is always emitted. */
    // "noUnusedLocals": true,                           /* Enable error reporting when local variables aren't read. */
    // "noUnusedParameters": true,                       /* Raise an error when a function parameter isn't read. */
    // "exactOptionalPropertyTypes": true,               /* Interpret optional property types as written, rather than adding 'undefined'. */
    // "noImplicitReturns": true,                        /* Enable error reporting for codepaths that do not explicitly return in a function. */
    // "noFallthroughCasesInSwitch": true,               /* Enable error reporting for fallthrough cases in switch statements. */
    // "noUncheckedIndexedAccess": true,                 /* Add 'undefined' to a type when accessed using an index. */
    // "noImplicitOverride": true,                       /* Ensure overriding members in derived classes are marked with an override modifier. */
    // "noPropertyAccessFromIndexSignature": true,       /* Enforces using indexed accessors for keys declared using an indexed type. */
    // "allowUnusedLabels": true,                        /* Disable error reporting for unused labels. */
    // "allowUnreachableCode": true,                     /* Disable error reporting for unreachable code. */

    /* Completeness */
    // "skipDefaultLibCheck": true,                      /* Skip type checking .d.ts files that are included with TypeScript. */
    "skipLibCheck": true,
    "rootDir": "."
  },
  "ts-node": {
    "esm": true,
    "experimentalSpecifierResolution": "node"
  },
  "include": ["src/**/*", "scripts/**/*"],
  "exclude": ["node_modules", "dist"]
}
